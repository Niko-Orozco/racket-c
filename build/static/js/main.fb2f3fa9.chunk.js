(this["webpackJsonpracket-to-c"]=this["webpackJsonpracket-to-c"]||[]).push([[2],{208:function(e){e.exports=JSON.parse('[{"expresiones":{"1":{"codigo":";Contruir un programa tal que nos muestre el \\n;Per\xedmetrona circunferencia\\n(define (perimetro)\\n\\t(define radio 0)(define pi 3.141592)\\n\\t(printf \\"Ingrese el radio: \\")\\n\\t(set! radio (read))\\n\\t(printf \\"El perimetro es: ~a\\" (* (* 2  pi) radio))\\n)\\n\\n(perimetro)"},"2":{"codigo":";Contruir un programa tal que nos muestre el volumen de\\n;un cubo\\n(define (volumen)\\n\\t(define arista 0) (define volumen 0)\\n\\t(printf \\"  Introduzca arista: \\" )\\n\\t(set! arista (read))\\n\\t(set! volumen (expt arista 3)\\n\\t(printf\\"  El volumen del cubo es: ~a\\" volumen)\\n)\\n\\n(volumen)"},"3":{"codigo":";Determinar la hipotenusa de un tri\xe1ngulo rect\xe1ngulo conocidas las\\n;longitudes de sus dos catetos. Desarrolle el algoritmo correspondiente.\\n(define (hipotenusa)\\n\\t(define cat1 0) (define cat2 0)\\n\\t(define hipo 0)\\n\\t(printf \\"  Introduzca cateto 1: \\")\\n\\t(set! cat1 (read))\\n\\t(printf \\"  Introduzca cateto 2: \\" )\\t(set! cat2 (read))\\n\\t(set! hipo (sqrt (+ (expt cat1 2)  (expt cat2 2))))\\n\\t(printf \\"  la hipotenusa es: ~a\\" hipo)\\n)\\n\\n(hipotenusa)"},"4":{"codigo":";Suponiendo que el kilo de az\xfacar y de caf\xe9 est\xe1n a 0\'6 y 0\'72\\n;euros respectivamente, contruir un programa que:\\n;1) Pida por teclado una cantidad en euros.\\n;2) Si la mitad de la cantidad introducida se destina a comprar \\n;   az\xfacar, una tercera parte a comprar caf\xe9, y el resto no se gasta. \\n;   Calcule cu\xe1ntos kilos de az\xfacar y caf\xe9 (datos reales) se pueden \\n;   comprar con dicha cantidad de dinero, as\xed como la cantidad de \\n;   dinero sobrante.\\n(define coste_azucar 0.6)\\n(define coste_cafe 0.72)\\n(define (cafe)\\n\\t(define cantidad 0)(define kilos_azucar 0)(define kilos_cafe 0)\\n\\t(printf \\"   Introduzca cantidad: \\" )\\n\\t(set! cantidad (read))\\n\\t(set! kilos_azucar (/ (/ cantidad 2) coste_azucar))\\n\\t(set! kilos_cafe (/ (/ cantidad 3) coste_cafe))\\n\\t(set! cantidad (/ cantidad 6))\\n\\t(printf \\"  ~a kilos de azuccar\\" kilos_azucar)\\n\\t(printf \\"  ~a kilos de cafec\\" kilos_cafe)\\n\\t(printf \\"  Quedan ~a euros\\" cantidad)\\n)\\n\\n(cafe)"},"5":{"codigo":";Dada una cantidad expresada en pies, y otra en metros. Determinar \\n;la suma pero convertida a pulgadas, a yardas, a metros y a millas \\n;por separado. Considere las siguientes equivalencias:\\n\\n;1 milla = 1609 metros, 1 pulgada = 0.0254 metros, 1 yarda = 3 pies, \\n;1 pie = 12 pulgadas.\\n(define (metros) \\n\\t(define pul 0)(define yar 0)(define met 0)(define mil 0)(define pies 0)(define me 0)\\n\\t(printf \\"Ingrese la cantidad expresada en pies: \\")\\n\\t(set! pies (read))\\n\\t(printf \\"Ingrese la cantidad expresada en metros: \\")\\n\\t(set! me (read))\\n\\t(set! pul (+ (* pies 12) (/ me 0.0254)))\\n\\t(set! yar (+ (* pies 3) (* me 1.09361)))\\n\\t(set! met (+ (* pies 0.3045) me))\\n\\t(set! mil (+ (* pies 0.00019) (* me 0.00062)))\\n\\t(printf \\"La suma en pulgadas es: ~a\\" pul)\\n\\t(printf \\"La suma en yardas es: ~a\\" yar)\\n\\t(printf \\"La suma en metros es: ~a\\" met)\\n\\t(printf \\"La suma en millas es: ~a\\" mil)\\n)\\n\\n(metros)"},"6":{"codigo":";Dadas dos tanques llenos de agua cuyas capacidades est\xe1n dadas en \\n;litros y en yardas c\xfabicas. De la cantidad total de agua: el 75% se \\n;dedica al consumo domestico y el 25% se dedica al riego. Dise\xf1e un \\n;programa que haga lo siguiente:\\n;1)  Determine la cantidad total de agua expresada en metros c\xfabicos\\n;   y en metros c\xfabicos.\\n\\n;2) Determine las cantidades de agua dedicada al riego y al consumo\\n;   dom\xe9stico expresada en metros c\xfabicos y en pies c\xfabicos. Considere\\n;   los siguientes factores de conversi\xf3n:\\n\\n;1 pie c\xfabico = 0.0283 metros c\xfabicos, 1 metro c\xfabico = 1000 litros,\\n;1 yarda c\xfabica = 27 pies c\xfabicos.\\n(define (cubicos)\\n\\t(define m_c 0)(define li 0)(define y_c 0)(define p_c 0)(define r_m 0)(define r_p 0)\\n\\t(define c_m 0)(define c_p 0)\\n\\t(printf \\"Ingrese la cantidad expresada en litros: \\")\\n\\t(set! li (read))\\n\\t(printf \\"Ingrese la cantidad expresada en Yardas cubicas: \\")\\n\\t(set! y_c (read))\\n\\t(set! m_c ( li 1000))\\n\\t(set! p_c (/ m_c 0.0283))\\n\\t(set! r_m (* m_c 0.25))\\n\\t(set! c_m (* m_c 0.75))\\n\\t(set! r_p (* p_c 0.25))\\n\\t(set! c_p (* p_c 0.75))\\n\\t(printf \\"La cantidad en metros cubicos es: ~a\\" m_c)\\n\\t(printf \\"La cantidad en yardas cubicos es: ~a\\" p_c)\\n\\t(printf \\"La cantidad que se usa para riego en metros cubicos es: ~a\\" r_m)\\n\\t(printf \\"La cantidad que se usa para el consumo domestico en metros cubicos es: ~a\\" c_m)\\n\\t(printf \\"La cantidad que se usa para riego en pies cubicos es: ~a\\" r_p)\\n\\t(printf \\"La cantidad que se usa para el consumo domestico en pies cubicos es: ~a\\" c_p)\\n)\\n\\n(cubicos)"},"1b":{"codigo":"//Contruir un programa tal que nos muestre el\\n//Per\xedmetrona circunferencia\\n#include <stdio.h>\\nint main(){\\n\\tfloat radio, pi = 3.141592;\\n\\tprintf(\\"Ingrese el radio: \\");\\n\\tscanf(\\"%d\\", &radio);\\n\\tprintf(\\"El perimetro es: %d\\", ((2 * pi)* radio));\\n}"},"2b":{"codigo":"//Contruir un programa tal que nos muestre el volumen de\\n//un cubo\\n#include <math.h>\\nint main(){\\n\\tfloat arista, volumen;\\n\\tprintf( \\"  Introduzca arista: \\" );\\n\\tscanf( \\"%d\\", &arista );\\n\\tvolumen = pow( arista, 3 );\\n\\tprintf( \\"  El volumen del cubo es: %d\\", volumen );\\n}"},"3b":{"codigo":"//Determinar la hipotenusa de un tri\xe1ngulo rect\xe1ngulo conocidas las \\n//longitudes de sus dos catetos. Desarrolle el algoritmo correspondiente.\\n#include <math.h>\\nint main(){\\n\\tint cat1, cat2;\\n\\tfloat hipo;\\n\\tprintf( \\"  Introduzca cateto 1: \\" );\\n\\tscanf( \\"%d\\", &cat1 );\\n\\tprintf( \\"  Introduzca cateto 2: \\" );\\n\\tscanf( \\"%d\\", &cat2 );\\n\\thipo = sqrt(pow(cat1, 2) + pow(cat2, 2));\\n\\tprintf( \\"  la hipotenusa es: %f\\", hipo);\\n}"},"4b":{"codigo":"/*Suponiendo que el kilo de az\xfacar y de caf\xe9 est\xe1n a 0\'6 y 0\'72\\neuros respectivamente, contruir un programa que:\\n1) Pida por teclado una cantidad en euros.\\n2) Si la mitad de la cantidad introducida se destina a comprar \\n\\taz\xfacar, una tercera parte a comprar caf\xe9, y el resto no se gasta. \\n\\tCalcule cu\xe1ntos kilos de az\xfacar y caf\xe9 (datos reales) se pueden \\n\\tcomprar con dicha cantidad de dinero, as\xed como la cantidad de \\n\\tdinero sobrante.*/\\n#include <stdio.h>\\n#define coste_azucar .6\\n#define coste_cafe .72\\nint main()\\n{\\n\\tfloat cantidad, kilos_azucar, kilos_cafe;\\n\\tprintf( \\"   Introduzca cantidad: \\" );\\n\\tscanf( \\"%f\\", &cantidad );\\n\\tkilos_azucar = cantidad / 2 / coste_azucar;\\n\\tkilos_cafe = cantidad / 3 / coste_cafe;\\n\\tcantidad = cantidad / 6;\\n\\tprintf( \\"   %.2f kilos de az%ccar\\", kilos_azucar, 163 );\\n\\tprintf( \\"  %.2f kilos de caf%c\\", kilos_cafe, 130 );\\n\\tprintf( \\"  Quedan %.2f euros\\", cantidad );\\n\\treturn 0;\\n}"},"5b":{"codigo":"/*Dada una cantidad expresada en pies, y otra en metros. Determinar \\nla suma pero convertida a pulgadas, a yardas, a metros y a millas \\npor separado. Considere las siguientes equivalencias:\\n1 milla = 1609 metros, 1 pulgada = 0.0254 metros, 1 yarda = 3 pies, \\n1 pie = 12 pulgadas.*/\\n#include <stdio.h>\\nint main(){\\n\\tfloat pul, yar, met, mil, pies, me;\\n\\tprintf(\\"Ingrese la cantidad expresada en pies: \\");\\n\\tscanf(\\"%f\\", &pies);\\n\\tprintf(\\"Ingrese la cantidad expresada en metros: \\");\\n\\tscanf(\\"%f\\", &me);\\n\\tpul = (pies*12) + (me/0.0254);\\n\\tyar = (pies*3) + (me*1.09361);\\n\\tmet = (pies*0.3045) + me;\\n\\tmil = (pies*0.00019) + (me*0.00062);\\n\\tprintf(\\"La suma en pulgadas es: %f\\", &pul);\\n\\tprintf(\\"La suma en yardas es: %f\\", &yar);\\n\\tprintf(\\"La suma en metros es: %f\\", &met);\\n\\tprintf(\\"La suma en millas es: %f\\", &mil);\\n}"},"6b":{"codigo":"/*Dadas dos tanques llenos de agua cuyas capacidades est\xe1n dadas en \\nlitros y en yardas c\xfabicas. De la cantidad total de agua: el 75% se \\ndedica al consumo domestico y el 25% se dedica al riego. Dise\xf1e un \\nprograma que haga lo siguiente:\\n1)  Determine la cantidad total de agua expresada en metros c\xfabicos \\n\\ty en metros c\xfabicos.\\n\\n2) Determine las cantidades de agua dedicada al riego y al consumo \\n\\tdom\xe9stico expresada en metros c\xfabicos y en pies c\xfabicos. Considere \\n\\tlos siguientes factores de conversi\xf3n:\\n\\n1 pie c\xfabico = 0.0283 metros c\xfabicos, 1 metro c\xfabico = 1000 litros, \\n1 yarda c\xfabica = 27 pies c\xfabicos.*/\\n#include <stdio.h>\\nint main(){\\n\\tfloat m_c, li, y_c, p_c, r_m, r_p, c_m, c_p;\\n\\tprintf(\\"Ingrese la cantidad expresada en litros: \\");\\n\\tscanf(\\"%f\\", &li);\\n\\tprintf(\\"Ingrese la cantidad expresada en Yardas cubicas: \\");\\n\\tscanf(\\"%f\\", &y_c);\\n\\tm_c = li/1000;\\n\\tp_c = m_c/0.0283;\\n\\tr_m = m_c*0.25;\\n\\tc_m = m_c*0.75;\\n\\tr_p = p_c*0.25;\\n\\tc_p = p_c*0.75;\\n\\tprintf(\\"La cantidad en metros cubicos es: %f\\", m_c);\\n\\tprintf(\\"La cantidad en yardas cubicos es: %f\\", p_c);\\n\\tprintf(\\"La cantidad que se usa para riego en metros cubicos es: %f\\", r_m);\\n\\tprintf(\\"La cantidad que se usa para el consumo domestico en metros cubicos es: %f\\", c_m);\\n\\tprintf(\\"La cantidad que se usa para riego en pies cubicos es: %f\\", r_p);\\n\\tprintf(\\"La cantidad que se usa para el consumo domestico en pies cubicos es: %f\\", c_p);\\n}"}},"secuencia":{"1":{"codigo":";Cree e inicialice con cualquier dato del mismo tipo:\\n;-2 variables del tipo de dato entero.\\n;-1 variable de tipo de dato char.\\n;Una vez inicialidos todos los datos sume los dos enteros y \\n;almacenelos en una variable.\\n(define (main)\\n\\t(define variable1 0)(define  variable2 0)\\n\\t(set! variable1 5)\\n\\t(set! variable2 8)\\n\\t(define caracter \\"h\\")\\n\\t(define suma (+ variable1 variable2))\\n)\\n\\n(main)"},"2":{"codigo":";Cree un programa en Racket, que secuencialmente simule una llamada \\n;telefonica. A partir de mensajes muestre como seria el proceso, \\n;tambi\xe9n capture el n\xfamero que el usuario quiera marcar. Nota: \\n;Para imprimir mensajes y recibir datos por pantalla se usa printf \\n(define (llamada)\\n\\t(define  telefono 0)\\n\\t(printf \\"*TELEFONO*\\\\n\\")\\n\\t(printf \\"\\\\nDescuelgue el telefono. \\")\\n\\t(printf \\"\\\\nIngrese el telefono a marcar: \\")\\n\\t(set! telefono (read))\\n\\t(printf \\"\\\\nProcesando\\")\\n\\t(printf \\"\\\\n\\\\nEsta marcando al numero: ~a\\" telefono)\\n\\t(printf \\"\\\\nConversacion en curso.\\")\\n\\t(printf \\"\\\\nPulse una tecla si desea finalizar la llamada.\\")\\n\\t(printf \\"\\\\nLLAMADA FINALIZADA\\")\\n)\\n\\n(llamada)"},"3":{"codigo":";Capture un dato de tipo entero por consola, el programa debe \\n;enviar un mensaje antes de capturar y luego de capturar el \\n;n\xfamero.\\n;Recuerde: Para capturar un dato, se debe tener una variable del\\n;tipo de dato que se desee, en este caso un entero.\\n;Asi: Tipo_dato Nombre_variable;\\n(define (TipoDato)\\n\\t(define numero 0)\\n\\t(printf \\"***Vamos a ingresar el numero.***\\")\\n\\t(printf \\"\\\\nIngrese el numero: \\")\\n\\t(set! numero (read))\\n\\t(printf \\"\\\\n***El numero fue ingresado.***\\")\\n\\t(printf \\"\\\\nEl numero fue: ~a\\" numero)\\n)\\n\\n(TipoDato)"},"4":{"codigo":";Cree un programa en racket que calcule el area de un triangulo,\\n;de acuerdo a una base y una altura arrojada por el usuario.\\n;Nota: Use variables de tipo flotante.\\n(define (areaTriangulo)\\n\\t(define base 0)(define altura 0)(define area 0)\\n\\t(printf \\"AREA DE UN TRIANGULO:\\\\nBASE: \\")\\n\\t(set! base (read))\\n\\t(printf \\"\\\\nALTURA: \\")\\n\\t(set! altura (read))\\n\\t(set! area (/ (* base altura) 2))\\n\\t(printf \\"\\\\n\\\\nEl area del triangulo es: ~a\\" area)\\n)\\n\\n(areaTriangulo)"},"5":{"codigo":";Implemente un programa en Racket que calcule el volumen de un cilindro.\\n;El usuario es quien digita el radio y altura de este.\\n;Trabaje PI como una constante.\\n;Nota: El volumen de un cilindro esta dado por: v=Pi*r^2*h.\\n;*El volumen es igual a el n\xfamero pi multiplicado por el cuadrado\\n;del radio del cilindro y a su vez multiplicado por la altura del \\n;cilindro.\\n(define PI 3.1416)\\n(define (volumenCilindro)\\n\\t(define r 0)(define h 0)\\n\\t(define v 0)\\n\\t(printf \\"VOLUMEN DE UN CILINDRO:\\\\nRADIO: \\")\\n\\t(set! r (read))\\n\\t(printf \\"\\\\nALTURA: \\")\\n\\t(set! h (read))\\n\\tv=PI*r*r*h\\n\\t(printf \\"\\\\n\\\\nEl volumen del cilindro con radio ~a y altura ~a es: ~a\\" r h v)\\n)\\n\\n(volumenCilindro)"},"6":{"codigo":";Con un programa en Racket, calcule la diagonal de un rectangulo que el \\n;usuario sea quien define el tama\xf1o de los lados.\\n;Nota: La diagonal de un rectangulo esta dada por la raiz cuadrada\\n;del la suma de sus dos lados al cuadrado. Por lo que necesitaremos\\n;una libreria para las funciones matematicas. Esta libreria es math.h\\n;contiene la funci\xf3n sqrt para la raiz cuadrada.\\n(define (diagonalRactangulo)\\n\\t(define lado1 0)(define lado2 0)\\n\\t(define diagonal 0)\\n\\t(printf \\"DIAGONAL DE UN RECTANGULO:\\\\nLADO 1: \\")\\n\\t(set! lado1 (read))\\n\\t(printf \\"LADO 2: \\")\\n\\t(set! lado2 (read))\\n\\t(set! diagonal (sqrt (+ (* lado1 lado1) (* lado2 lado2))))\\n\\t(printf \\"\\\\nLa diagonal para el rectangulo de lados ~ax~a es: ~a\\" lado1 lado2 diagonal)\\n)\\n\\n(diagonalRactangulo)"},"1b":{"codigo":"/*Cree e inicialice con cualquier dato del mismo tipo:\\n-2 variables del tipo de dato entero.\\n-1 variable de tipo de dato char.\\nUna vez inicialidos todos los datos sume los dos enteros y\\nalmacenelos en una variable.*/\\nint main(){\\n\\tint variable1, variable2;\\n\\tvariable1=5;\\n\\tvariable2=8;\\n\\tchar caracter=\'h\';\\n\\tint suma = variable1+variable2;\\n}"},"2b":{"codigo":"/*Cree un programa en C, que secuencialmente simule una llamada\\ntelefonica. A partir de mensajes muestre como seria el proceso,\\ntambi\xe9n capture el n\xfamero que el usuario quiera marcar. Nota:\\nPara imprimir mensajes y recibir datos por pantalla se usa printf\\ny scanf respectivamente, funciones provenientes de la libreria \\nstdio.h, dicha libreria debe ser importada.\\nEn c se importan librerias asi:*/\\n#include <stdio.h>\\nint main(){\\n\\tlong telefono=0;\\n\\tprintf(\\"*TELEFONO*\\\\n\\");\\n\\tprintf(\\"\\\\nDescuelgue el telefono. \\");\\n\\tprintf(\\"\\\\nIngrese el telefono a marcar: \\");\\n\\tscanf(\\"%ld\\", &telefono);\\n\\tprintf(\\"\\\\nProcesando\\");\\n\\tprintf(\\"\\\\n\\\\nEsta marcando al numero: %ld\\", telefono);\\n\\tprintf(\\"\\\\nConversacion en curso.\\");\\n\\tprintf(\\"\\\\nPulse una tecla si desea finalizar la llamada. \\\\n\\");\\n\\tsystem(\\"pause\\");\\n\\tprintf(\\"\\\\nLLAMADA FINALIZADA\\");\\n}"},"3b":{"codigo":"/*Capture un dato de tipo entero por consola, el programa debe\\nenviar un mensaje antes de capturar y luego de capturar el \\nn\xfamero.\\nRecuerde: Para capturar un dato, se debe tener una variable del\\ntipo de dato que se desee, en este caso un entero.\\nAsi: Tipo_dato Nombre_variable;*/\\n#include <stdio.h>\\nint main(){\\n\\tint numero;\\n\\tprintf(\\"***Vamos a ingresar el numero.***\\");\\n\\tprintf(\\"\\\\nIngrese el numero: \\");\\n\\tscanf(\\"%d\\", &numero);\\n\\tprintf(\\"\\\\n***El numero fue ingresado.***\\");\\n\\tprintf(\\"\\\\nEl numero fue: %d\\", numero);\\n}"},"4b":{"codigo":"/*Cree un programa en c que calcule el area de un triangulo, \\nde acuerdo a una base y una altura arrojada por el usuario.\\nNota: Use variables de tipo flotante.*/\\n#include <stdio.h>\\nint main(){\\n\\tfloat base=0, altura=0, area=0;\\n\\tprintf(\\"AREA DE UN TRIANGULO:\\\\nBASE: \\");\\n\\tscanf(\\"%f\\", &base);\\n\\tprintf(\\"ALTURA: \\");\\n\\tscanf(\\"%f\\", &altura);\\n\\tarea=(base*altura)/2;\\n\\tprintf(\\"\\\\n\\\\nEl area del triangulo es: %.2f\\", area);\\n}"},"5b":{"codigo":"/*Implemente un programa en c que calcule el volumen de un cilindro.\\nEl usuario es quien digita el radio y altura de este.\\nTrabaje PI como una constante.\\nNota: El volumen de un cilindro esta dado por: v=Pi*r^2*h.\\n*El volumen es igual a el n\xfamero pi multiplicado por el cuadrado\\ndel radio del cilindro y a su vez multiplicado por la altura del \\ncilindro.*/\\n#include <stdio.h>\\n#define PI 3.1416\\nint main(){\\n\\tint r=0,h=0;\\n\\tfloat v;\\n\\tprintf(\\"VOLUMEN DE UN CILINDRO:\\\\nRADIO: \\");\\n\\tscanf(\\"%d\\", &r);\\n\\tprintf(\\"ALTURA: \\");\\n\\tscanf(\\"%d\\", &h);\\n\\tv=PI*r*r*h;\\n\\tprintf(\\"\\\\n\\\\nEl volumen del cilindro con radio %d y altura %d es: %.2f\\", r, h, v);\\n}"},"6b":{"codigo":"/*Con un programa en c, calcule la diagonal de un rectangulo que el \\nusuario sea quien define el tama\xf1o de los lados.\\nNota: La diagonal de un rectangulo esta dada por la raiz cuadrada\\ndel la suma de sus dos lados al cuadrado. Por lo que necesitaremos\\nuna libreria para las funciones matematicas. Esta libreria es math.h\\ncontiene la funci\xf3n sqrt para la raiz cuadrada.*/\\n#include <stdio.h>\\n#include <math.h>\\nint main(){\\n\\tint lado1=0, lado2=0;\\n\\tfloat diagonal=0;\\n\\tprintf(\\"DIAGONAL DE UN RECTANGULO:\\\\nLADO 1: \\");\\n\\tscanf(\\"%d\\", &lado1);\\n\\tprintf(\\"LADO 2: \\");\\n\\tscanf(\\"%d\\", &lado2);\\n\\tdiagonal=sqrt(lado1*lado1 + lado2*lado2);\\n\\tprintf(\\"\\\\n\\\\nLa diagonal para el rectangulo de lados %dx%d es: %.2f\\", lado1, lado2, diagonal);\\n}"}},"condicionales":{"1":{"codigo":";Escribir un programa que detecte si un n\xfamero introducido\\n;desde el teclado es positivo o negativo.\\n(define (main num)\\n\\t(if (< num 0)\\n\\t\\t(printf \\"Numero negativo: ~a\\" num)\\n\\t\\t(printf \\"Numero positivo: ~a\\" num)\\n\\t)\\n)\\n\\n(main (read))"},"2":{"codigo":";Escribir un programa que lea tres n\xfameros por teclado y nos diga \\n;cu\xe1l es el mayor.\\n(define (Mayor? num1 num2 num3)\\n\\t(if (and (> num1 num2) (> num1 num3))\\n\\t\\t(printf \\"El n\xfamero mayor es: ~a\\" num1)\\n\\t)\\n\\t(if (and (> num2 num1) (> num2 num3))\\n\\t\\t(printf \\"El n\xfamero mayor es: ~a\\" num2)\\n\\t)\\n\\t(if (and (> num3 num1) (> num3 num2))\\n\\t\\t(printf \\"El n\xfamero mayor es: ~a\\" num3)\\n\\t)\\n)\\n\\n(Mayor? (read) (read) (read))"},"3":{"codigo":";Escribir un programa que nos diga si un estudiante  aprob\xf3 la \\n;materia, el programa debe realizar los c\xe1lculos en funci\xf3n de \\n;los siguientes criterios.\\n;a. Apruba si las tres notas suman  3.5 o mas\\n;b. Presenta pruba de validacion si la nota estan entre 3 y 3.4\\n;c. Reprueba si la nota es menor a 3\\n(define (aprobo? nota)\\n\\t(if (>= nota 3.5)\\n\\t\\t(printf \\"Aprob\xf3 la materia\\")\\n\\t\\t(if (and (>= nota 3) (< nota 3.4))\\n\\t\\t\\t(printf \\"Presenta prueba de validaci\xf3n\\")\\n\\t\\t\\t(if (and (>= nota 0) (< nota 3))\\n\\t\\t\\t\\t(printf \\"Reprob\xf3 la materia\\")\\n\\t\\t\\t\\t(printf \\"ingrese una nota valida\\")\\n\\t\\t\\t)\\n\\t\\t)\\n\\t)\\n)\\n\\n(aprobo? (read))"},"4":{"codigo":";Escribir un programa que muestre un men\xfa donde las opciones sean \\n;\u201cEquil\xe1tero\u201d, \u201cIs\xf3sceles\u201d y \u201cEscaleno\u201d, pida una opci\xf3n y calcule \\n;el per\xedmetro del tri\xe1ngulo seleccionado.\\n(define (perimetro)\\n\\t(printf \\"1. Equil\xe1tero\\")\\n\\t(printf \\"2. Is\xf3sceles\\")\\n\\t(printf \\"3. Escaleno\\")\\n\\t(define opc (read))\\n\\t(cond\\n\\t\\t[(= opc 1)(printf \\"Ingrese el lado: \\")\\n\\t\\t\\t(printf \\"perimetro: ~a\\" (* 3 (read)))]\\n\\t\\t[(= opc 2)(printf \\"Ingrese el lado y la base: \\")\\n\\t\\t\\t(printf \\"perimetro: ~a\\" (+ (* 2 (read)) (read)))]\\n\\t\\t[(= opc 3)(printf \\"Ingrese los 3 lados: \\")\\n\\t\\t\\t(printf \\"perimetro: ~a\\" (+(+ (read)(read))(read)))]\\n\\t\\t[else (printf \\"Ingrese una opci\xf3n valida\\")]\\n\\t)\\n)\\n\\n(perimetro)"},"5":{"codigo":";Escribir un programa que nos muestre un menu con las opciones de:\\n;1.  Dia  corespondiente,  2. listar  dias,  crear  las  funciones\\n;respectivas  a  las  opciones.\\n(define (dias)\\n\\t(printf \\"Seleccione una opci\xf3n\\")\\n\\t(printf \\"1. Dia corespondiente\\")\\n\\t(printf \\"2. listar dias\\")\\n\\t(define opc (read))\\n\\t(cond\\n\\t\\t[(= opc 1) (printf \\"ingrese un numero entre 1 y 7: \\")(define (dia (read)))\\n\\t\\t\\t(cond\\n\\t\\t\\t\\t[(= opc 1)(printf \\"Lunes\\")]\\n\\t\\t\\t\\t[(= opc 2)(printf \\"Martes\\")]\\n\\t\\t\\t\\t[(= opc 3)(printf \\"Miercoles\\")]\\n\\t\\t\\t\\t[(= opc 4)(printf \\"Jueves\\")]\\n\\t\\t\\t\\t[(= opc 5)(printf \\"Viernes\\")]\\n\\t\\t\\t\\t[(= opc 6)(printf \\"Sabado\\")]\\n\\t\\t\\t\\t[(= opc 7)(printf \\"Domingo\\")]\\n\\t\\t\\t\\t[else (printf \\"Ingrese una opci\xf3n valida\\")]\\n\\t\\t\\t)\\n\\t\\t]\\n\\t\\t[(= opc 2)\\n\\t\\t\\t(printf \\"Lunes\\")\\n\\t\\t\\t(printf \\"Martes\\")\\n\\t\\t\\t(printf \\"Miercoles\\")\\n\\t\\t\\t(printf \\"Jueves\\")\\n\\t\\t\\t(printf \\"Viernes\\")\\n\\t\\t\\t(printf \\"Sabado\\")\\n\\t\\t\\t(printf \\"Domingo\\")\\n\\t\\t]\\n\\t\\t[else (printf \\"Ingrese una opci\xf3n valida\\")]\\n\\t)\\n)\\n\\n(dias)"},"6":{"codigo":";Escribir un programa que calcule el sueldo que le corresponde al \\n;trabajador de una empresa que cobra 40.000  d\xf3lares  anuales, el \\n;programa debe realizar los c\xe1lculos en funci\xf3n de los siguientes \\n;criterios.\\n;a.Si lleva m\xe1s de 15 a\xf1os en la empresa obtiene un aumento del 12%.\\n;b.Si lleva m\xe1s de 10  y menos de 15 a\xf1os obtiene un aumento del 8%.\\n;c.Si lleva m\xe1s de  5  y menos de 10 a\xf1os obtiene un aumento del 5%.\\n;d.  Si lleva menos de 5 a\xf1os se le aplica un aumento del 3%.\\n(define (salario)\\n\\t(printf \\"seleccione una opcion\\")\\n\\t(printf \\"1. Calcular sueldo anual\\")\\n\\t(printf \\"2. Ver aumentos anuales\\")\\n\\t(define opc (read))\\n\\t(printf \\"Ingrese la cantidad de a\xf1os que lleva en la empresa\\")\\n\\t(define anios (read))\\n\\t(cond\\n\\t\\t[(= opc 1)\\n\\t\\t\\t(if (> anios 15)\\n\\t\\t\\t\\t(printf \\"Salario anual de: ~a\\" (+ (* 40000 1.2) 40000))\\n\\t\\t\\t\\t(if (and (< anios 15) (> anios 10))\\n\\t\\t\\t\\t(printf \\"Salario anual de: ~a\\" (+ (* 40000 0.8) 40000))\\n\\t\\t\\t\\t(if (and (< anios 10) (> anios 5))\\n\\t\\t\\t\\t\\t(printf \\"Salario anual de: ~a\\" (+ (* 40000 0.5) 40000))\\n\\t\\t\\t\\t\\t(if (and (< anios 5) (> anios 0))\\n\\t\\t\\t\\t\\t(printf \\"Salario anual de: ~a\\" (+ (* 40000 0.3) 40000))\\n\\t\\t\\t\\t\\t(printf \\"Ingrese una a\xf1o valido\\")\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t]\\n\\t\\t[(= opc 2)\\n\\t\\t\\t(printf \\"Si lleva m\xe1s de 15 a\xf1os en la empresa 12%\\")\\n\\t\\t\\t(printf \\"Si lleva menos de 15 pero m\xe1s de 10 a\xf1os 8%\\")\\n\\t\\t\\t(printf \\"Si lleva menos de 10 pero m\xe1s de 5 a\xf1os 5%\\")\\n\\t\\t\\t(printf \\"Si lleva menos de 5 a\xf1os 3%\\")\\n\\t\\t]\\n\\t\\t[else (printf \\"Ingrese una opci\xf3n valida\\")]\\n\\t)\\n)\\n\\n(salario)"},"1b":{"codigo":"//Escribir un programa que detecte si un n\xfamero introducido\\n//desde el teclado es positivo o negativo.\\nint main (){\\n\\tint num;\\n\\tscanf(\\"%d\\", &num);\\n\\tif (num < 0){\\n\\t\\tprintf (\\"Numero negativo: %d\\", num);\\n\\t\\tprintf (\\"Numero positivo: %d\\", num);\\n\\t}\\n}\\n"},"2b":{"codigo":"//Escribir un programa que lea tres n\xfameros por teclado y nos diga //cu\xe1l es el mayor.int main(){\\n\\tint num1, num2, num3;\\n\\tscanf(\\"%d %d %d\\", num1, num2, num3);\\n\\tif((num1 > num2) && (num1 > num3)){\\n\\t\\tprintf (\\"El n\xfamero mayor es: %d\\", num1);\\n\\t}\\n\\tif((num2 > num1) && (num2 > num3)){\\n\\t\\tprintf (\\"El n\xfamero mayor es: %d\\", num2);\\n\\t}\\n\\tif((num1 > num2) && (num1 > num3)){\\n\\t\\tprintf (\\"El n\xfamero mayor es: %d\\", num3);\\n\\t}\\n}"},"3b":{"codigo":"//Escribir un programa que nos diga si un estudiante  aprob\xf3 la\\n //materia, el programa debe realizar los c\xe1lculos en funci\xf3n de\\n//los siguientes criterios.\\n//a. Apruba si las tres notas suman  3.5 o mas\\n//b. Presenta pruba de validacion si la nota estan entre 3 y 3.4\\n//c. Reprueba si la nota es menor a 3\\n#include <stdio.h>\\nint main()\\n{\\n\\tint nota;\\n\\tprintf(\\"ingrese la nota: \\");\\n\\tscanf(\\"%s\\", &nota);\\n\\tif(nota >= 3.5){\\n\\t\\tprintf (\\"Aprob\xf3 la materia\\");\\n\\t}else{\\n\\t\\tif ((nota >= 3) && (nota < 3.4)){\\n\\t\\t\\tprintf (\\"Presenta prueba de validaci\xf3n\\");\\n\\t\\t}else{\\n\\t\\t\\tif ((nota >= 0) && (nota < 3)){\\n\\t\\t\\t\\tprintf (\\"Reprob\xf3 la materia\\");\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tprintf (\\"ingrese una nota valida\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n"},"4b":{"codigo":"//Escribir un programa que muestre un men\xfa donde las opciones sean \\n//\u201cEquil\xe1tero\u201d, \u201cIs\xf3sceles\u201d y \u201cEscaleno\u201d, pida una opci\xf3n y calcule \\n//el per\xedmetro del tri\xe1ngulo seleccionado.\\n#include <stdio.h>\\n#include <stdlib.h>\\nint main()\\n{\\n\\tint lado, lado2, lado3, base, opcion;\\n\\tprintf(\\"Seleccione opci\xf3n:\\");\\n\\tprintf(\\"1 \u2013 Equil\xe1tero\\");\\n\\tprintf(\\"2 \u2013 Is\xf3sceles\\");\\n\\tprintf(\\"3 \u2013 Escaleno\\");\\n\\tscanf(\\"%d\\",&opcion);\\n\\tswitch (opcion)\\n\\t{\\n\\t\\tcase 1:\\n\\t\\t\\tprintf(\\"Introduzca lado del tri\xe1ngulo:\\");\\n\\t\\t\\tscanf(\\"%d\\",&lado);\\n\\t\\t\\tprintf(\\"El per\xedmetro es: %d\\",3*lado);\\n\\t\\t\\tbreak;\\n\\t\\tcase 2:\\n\\t\\t\\tprintf(\\"Ingrese el lado y la base: \\");\\n\\t\\t\\tscanf(\\"%d %d\\", &lado, &base);\\n\\t\\t\\tprintf(\\"El per\xedmetro es: %d\\",(2*lado)+base);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tprintf (\\"Ingrese los 3 lados: \\");\\n\\t\\t\\tscanf(\\"%d %d %d\\", &lado, &lado2, &lado3);\\n\\t\\t\\tprintf(\\"perimetro: %d\\", (lado3 + (lado + lado2)));\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tprintf(\\"Opci\xf3n no v\xe1lida.\\");\\n\\t\\t\\tbreak;\\n\\t}\\n}\\n"},"5b":{"codigo":"//Escribir un programa que nos muestre un menu con las opciones de:\\n//1.  Dia  corespondiente,  2. listar  dias,  crear  las  funciones\\n//respectivas  a  las  opciones.\\n#include <stdio.h>\\n#include <stdlib.h>\\nint main()\\n{\\n\\tint opcion, dia;\\n\\tprintf(\\"1. Dia corespondiente\\");\\n\\tprintf(\\"2. listar dias\\");\\n\\tswitch (opcion)\\n\\t{\\n\\t\\tcase 1: printf(\\"ingrese un numero entre 1 y 7: \\");\\n\\t\\t\\tswitch (dia)\\n\\t\\t\\t{\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tprintf(\\"Lunes\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tprintf(\\"Martes\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tprintf(\\"Miercoles\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 4:\\n\\t\\t\\t\\tprintf(\\"Jueves\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 5:\\n\\t\\t\\t\\tprintf(\\"Viernes\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 6:\\n\\t\\t\\t\\tprintf(\\"Sabado\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 7:\\n\\t\\t\\t\\tprintf(\\"Domingo\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tprintf(\\"Ingrese una opci\xf3n valida\\");\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase 2:\\n\\t\\t\\tprintf(\\"Lunes\\");\\nt\\t\\tprintf(\\"Martes\\");\\n\\t\\t\\tprintf(\\"Miercoles\\");\\n\\t\\t\\tprintf(\\"Jueves\\");\\n\\t\\t\\tprintf(\\"Viernes\\");\\n\\t\\t\\tprintf(\\"Sabado\\");\\n\\t\\t\\tprintf(\\"Domingo\\");\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tprintf(\\"Ingrese una opci\xf3n valida\\");\\n\\t\\t\\tbreak;\\n\\t}\\n}"},"6b":{"codigo":"//Escribir un programa que calcule el sueldo que le corresponde al \\n//trabajador de una empresa que cobra 40.000  d\xf3lares  anuales, el \\n//programa debe realizar los c\xe1lculos en funci\xf3n de los siguientes \\n//criterios.\\n//a.Si lleva m\xe1s de 15 a\xf1os en la empresa obtiene un aumento del 12%.\\n//b.Si lleva m\xe1s de 10  y menos de 15 a\xf1os obtiene un aumento del 8%.\\n//c.Si lleva m\xe1s de  5  y menos de 10 a\xf1os obtiene un aumento del 5%.\\n//d.  Si lleva menos de 5 a\xf1os se le aplica un aumento del 3%.\\n#include <stdio.h>\\n#include <stdlib.h>\\nint main()\\n{\\n\\tint anios, opcion;\\n\\tprintf(\\"Seleccione opci\xf3n:\\");\\n\\tprintf(\\"1. Calcular sueldo anual\\");\\n\\tprintf(\\"2. Ver aumentos anuales\\");\\n\\tscanf(\\"%d\\",&opcion);\\n\\tswitch (opcion)\\n\\t{\\n\\t\\tcase 1:\\n\\t\\t\\tif (anios > 15){\\n\\t\\t\\t\\tprintf (\\"Salario anual de: ~a\\" ((40000 * 1.2) + 40000));\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tif ((anios < 15) && (anios > 10)){\\n\\t\\t\\t\\t\\tprintf (\\"Salario anual de: ~a\\" ((40000 * 0.8) + 40000));\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\tif ((anios < 10) && (anios > 5)){\\n\\t\\t\\t\\t\\t\\tprintf (\\"Salario anual de: ~a\\" ((40000 * 0.5) + 40000));\\n\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\tif ((anios < 5) && (anios > 0)){\\n\\t\\t\\t\\t\\t\\t\\tprintf (\\"Salario anual de: ~a\\" ((40000 * 0.3) + 40000));\\n\\t\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\t\\tprintf (\\"Ingrese una a\xf1o valido\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase 2:\\n\\t\\t\\tprintf (\\"Si lleva m\xe1s de 15 a\xf1os en la empresa 12%\\");\\n\\t\\t\\tprintf (\\"Si lleva menos de 15 pero m\xe1s de 10 a\xf1os 8%\\");\\n\\t\\t\\tprintf (\\"Si lleva menos de 10 pero m\xe1s de 5 a\xf1os 5%\\");\\n\\t\\t\\tprintf (\\"Si lleva menos de 5 a\xf1os 3%\\");\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\tprintf(\\"Opci\xf3n no v\xe1lida.\\");\\n\\t\\t\\tbreak;\\n}\\n}"}},"ciclos":{"1":{"codigo":";Construir un programa que muestre los n\xfameros  del 1 hasta\\n;el 10 utilizando la estructira de iteracion for\\n(define (numeros)\\n\\t(for ([contador (in-range 1 11 1)])\\n\\t\\t(printf \\"\\\\n~a\\" contador)\\n\\t)\\n)\\n(numeros)\\n"},"2":{"codigo":";Construir un programa que  imprima por pantalla la siguiente secuencia:\\n;0 1 2 3 4\\n;0 1 2 3 4\\n;0 1 2 3 4\\n;0 1 2 3 4\\n;Como restriccion \\n(define (secuencia)\\n\\t(for ([i (in-range 0 5 1)])\\n\\t\\t(for ([j (in-range 0 5 1)])\\n\\t\\t\\t(printf \\" ~a\\" j)\\n\\t\\t)\\n\\t\\t(printf \\"\\\\n\\")\\n\\t)\\n)\\n(secuencia)"},"3":{"codigo":";Calcular la suma de los n\xfameros pares e impares comprendidos entre 1 y n.\\n (define (suma)\\n\\t(define c 1)(define par 0)(define impar 0)\\n\\t(printf \\"Ingrese la cantidad de numeros a sumas: \\")\\n\\t(define num (read))\\n\\t(while (< c num)\\n\\t\\t(if (= (remainder c 2) 0)\\n\\t\\t\\t(set! par (+ par c))\\n\\t\\t\\t(set! impar (+ impar c))\\n\\t\\t)\\t\\t\\n\\t\\t(set! c (+ c 1))\\n\\t)\\n\\t(printf \\"Suma de pares: ~a\\" par)\\n\\t(printf \\"Suma de impares: ~a\\" impar)\\n)\\n(suma)"},"4":{"codigo":";Dise\xf1ar e implementar un programa que solicite a su usuario un valor no\\n;negativo n y visualice la siguiente salida:\\n;1 2 3 \u2026 n-1 n\\n;1 2 3 \u2026 n-1\\n;\u2026.\\n;1 \\n(define (decremento)\\n\\t(define k 1)(define i (read))\\n\\t(while (>= i  1)\\n\\t\\t(set! k 1)\\n\\t\\t(while (<= k i)\\n\\t\\t\\t(printf \\" ~a\\" k)\\n\\t\\t\\t(set! k (+ k 1))\\n\\t\\t)\\n\\t\\t(set! i (- i 1))\\n\\t)\\n)\\n(decremento)"},"5":{"codigo":";Los padres de una ni\xf1a le prometieron darle 10 d\xf3lares cuando cumpliera 12\\n;a\xf1os de edad y duplicar el regalo en cada cumplea\xf1os subsiguiente hasta que\\n;el regalo excediera 1000 d\xf3lares. Escriba un programa para determinar qu\xe9 \\n;edad tendr\xe1 la ni\xf1a cuando se le d\xe9 la \xfaltima cantidad y la cantidad total \\n;recibida.\\n(define (dinero)\\n\\t(define edad 12)(define d 10)(define total 10)(define i 0)\\n\\t(printf \\"Calculo del dinero recibido: \\")\\n\\t(do ((i 1 (+ i 1))) ((< total 1000))\\n\\t\\t(set! d (* d 2))\\n\\t\\t(set! total (+ total d))\\n\\t\\t(set! edad (+ edad 1))\\n\\t)\\n\\t(printf \\"Edad: ~a\\", edad)\\n\\t(printf \\"Dinero recibido: ~a\\" d)\\n\\t(printf \\"Total recibido: ~a\\" total)\\n)\\n(dinero)"},"6":{"codigo":";Construir un programa que calcule y visualice el siguiente esquema\\n;1! + 2! + 3! + \u2026 + (n \u2013 1)! + n!\\n(define (factoriales)\\n\\t(define i = 1)(define m = 0)\\n\\t(define fact 0)(define suma 0)\\n\\t(printf \\"Ingrese el valor de n: \\")\\n\\t(define suma (read))\\n\\t(do ((i 1 (+ i 1))) ((<= i n))\\n\\t\\t(set! fact 1)\\n\\t\\t(set! m = i)\\n\\t\\t(while (> m 1)\\n\\t\\t\\t(set! fact (* fact m))\\n\\t\\t\\t(set! m (- m 1))\\n\\t\\t)\\n\\t\\t(set! suma (+ suma fact))\\n\\t\\t(printf \\"\\\\t ~a! = ~a \\" i fact)\\n\\t\\t(set! i (+ i 1))\\n\\t)\\n\\t(printf \\"\\\\tsuma = ~a\\" suma)\\n)\\n(factoriales)"},"1b":{"codigo":"/*Construir un programa que muestre los n\xfameros  del 1 hasta\\nel 10 utilizando la estructira de iteracion for*/\\n#include <stdio.h>\\nint main(){\\n\\tint contador=0;\\n\\tfor( contador=1; contador<11 ; contador++ ) {\\n\\t\\tprintf(\\"\\\\n%d\\",contador);\\n\\t}\\n\\treturn 0;\\n}"},"2b":{"codigo":"/*Construir un programa que  imprima por pantalla la siguiente secuencia:\\n0 1 2 3 4\\n0 1 2 3 4\\n0 1 2 3 4\\n0 1 2 3 4\\nComo restriccion */\\n#include <stdio.h>\\nint main(){\\n\\tfor (int i = 0; i<5; i++){\\n\\t\\tfor (int j=0; j<5; j++){\\n\\t\\t\\tprintf(\\"%d\\", j);\\n\\t\\t}\\n\\t\\tprintf(\\"\\\\n\\");\\n\\t}\\n}\\n"},"3b":{"codigo":"//Calcular la suma de los n\xfameros pares e impares comprendidos entre 1 y n.\\n#include <stdio.h>\\nint main(){\\n \\tint num, c = 1, par = 0, impar = 0;\\n\\tprintf(\\"Ingrese la cantidad de numeros a sumas: \\");\\n\\tscanf(\\"%d\\", &num);\\n\\twhile (c < num){\\n\\t\\tif(c % 2 == 0){\\n\\t\\t\\tpar += c;\\n\\t\\t}else{\\n\\t\\t\\timpar += c;\\n\\t\\t}\\n\\t\\t\\tc++;\\n\\t}\\n\\tprintf(\\"Suma de pares: %d\\", par);\\n\\tprintf(\\"Suma de impares: %d\\", impar);\\n}\\n"},"4b":{"codigo":"/*Dise\xf1ar e implementar un programa que solicite a su usuario un valor no\\nnegativo n y visualice la siguiente salida:\\n1 2 3 \u2026 n-1 n\\n1 2 3 \u2026 n-1\\n \u2026.\\n1 */\\n#include <stdio.h>\\nvoid main(void){\\n\\tint k, i;\\n\\tprintf(\\"Introduzca un valor entero:\\");\\n\\tscanf(\\"%d\\",&i);\\n\\twhile(i >= 1){\\n\\t\\tk = 1;\\n\\t\\twhile(k <= i){\\n\\t\\t\\tprintf(\\"%d\\\\t\\",k);\\n\\t\\t\\tk++;\\n\\t\\t}\\n\\t\\ti--;\\n\\t}\\n}\\n"},"5b":{"codigo":"/*Los padres de una ni\xf1a le prometieron darle 10 d\xf3lares cuando cumpliera 12\\na\xf1os de edad y duplicar el regalo en cada cumplea\xf1os subsiguiente hasta que\\nel regalo excediera 1000 d\xf3lares. Escriba un programa para determinar qu\xe9 \\nedad tendr\xe1 la ni\xf1a cuando se le d\xe9 la \xfaltima cantidad y la cantidad total \\nrecibida.*/\\n#include <stdio.h>\\nint main(){\\n\\tint edad = 12, d = 10, total = 10;\\n\\tprintf(\\"Calculo del dinero recibido: \\");\\n\\tdo{\\n\\t\\td = d * 2;\\n\\t\\ttotal += d;\\n\\t\\tedad++;\\n\\t}while(total < 1000);\\n\\tprintf(\\"Edad: %d\\", edad);\\n\\tprintf(\\"Dinero recibido: %d\\", d);\\n\\tprintf(\\"Total recibido: %d\\", total);\\n}\\n"},"6b":{"codigo":"/*Construir un programa que calcule y visualice el siguiente esquema\\n1! + 2! + 3! + \u2026 + (n \u2013 1)! + n!*/\\n#include <stdio.h>\\nvoid main(void){\\n\\tint n, i = 1, m;\\n\\tfloat fact, suma = 0;\\n\\tprintf(\\"Ingrese el valor de n: \\");\\n\\tscanf(\\"%d\\",&n);\\n\\tdo{\\n\\t\\tfact = 1;\\n\\t\\tm = i;\\n\\t\\twhile(m > 1){\\n\\t\\t\\tfact *= m;\\n\\t\\t\\tm--;\\n\\t\\t}\\n\\t\\tsuma+=fact;\\n\\t\\tprintf(\\"\\\\t %d! = %0.f\\",i,fact);\\n\\t\\ti++;\\n\\t}while(i <= n);\\n\\tprintf(\\"\\\\tsuma = %0.f\\",suma);\\n} \\n"}},"cadenas":{"1":{"codigo":";Cree en programa que capture una cadena y luego\\n;convierta cada uno de los caracteres a letras may\xfasculas.\\n(define (cadena)\\n\\t(define cad \\"\\")\\n\\t(define cadMayus \\"\\")\\n\\t(printf \\"Ingrese una cadena:  \\")\\n\\t(set! cad (string-copy (read)))\\n\\t(set! cadMayus (string-upcase cad))\\n\\t(printf \\"\\\\nLa cadena en mayusculas es: ~a\\" cadMayus)\\n)\\n\\n(cadena)"},"2":{"codigo":";Construya un programa en racket que capture una cadena y almacene\\n;en otra variable la cadena invertida.\\n(define (reverse)\\n\\t(define cad \\"\\")\\n\\t(define cadReverse \\"\\")\\n\\t(printf \\"Ingrese una cadena de caracteres: \\")\\n\\t(set! cad (read))\\n\\t(deifne tam (string-length cad))\\n\\t(for ([i (in-range 0 (string-length cad) 1)])\\n\\t\\t(string-copy! cadReverse tam (string-ref cad i))\\n\\t\\t(set! tam (- tam 1))\\n\\t)\\n\\t(printf \\"\\\\nCADENA INVERTIDA: \\")\\n\\t(printf \\"\\\\n~a\\" cadReverse)\\n)\\n\\n(reverse)"},"3":{"codigo":";Cree un programa que analice cuantas letras mayusculas y \\n;cuantas letras minusculas tiene una cadena ingresada por\\n;el usuario. Nota: Puede usar ciclos anidados y codigo ASCII.\\n(define (cantidad)\\n\\t(define mayus 0)(define minus 0)\\n\\t(define cad \\"\\")\\n\\t(printf \\"Ingrese una cadena: \\")\\n\\t(set! cad (read))\\n\\t(for ([i (in-range 0 (string-length cad) 1)])\\n\\t\\t(for ([j (in-range 65 90 1)])\\n\\t\\t\\t(if (= (char->integer (string-ref cad i)) j)\\n\\t\\t\\t\\t(set! mayus (+ mayus 1))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t(for ([j (in-range 97 122 1)])\\n\\t\\t\\t(if (= (char->integer (string-ref cad i)) j)\\n\\t\\t\\t\\t(set! minus (+ minus 1))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nCantidad de Mayusculas: ~a.\\" mayus)\\n\\t(printf \\"\\\\nCantidad de Minusculas: ~a.\\" minus)\\n)\\n\\n(cantidad)"},"4":{"codigo":";Cree un programa en Racket que reciba una cadena de maximo 20\\n;caracteres escrita por el usuario, el programa debe contar\\n;cuantos numeros, y espacios en blanco contiene dicha cadena.\\n;Nota: Una buena manera de realizar el ejercicio es usando el\\n;codigo ASCII\\n(define (contador)\\t(deinfe cantNums 0)(deinfe cantSpace 0)\\n\\t(define cad \\"\\")\\n\\t(printf \\"Ingrese una cadena maximo de 20 caracteres: \\")\\n\\t(string-copy! cad (read))\\n\\t(for ([i (in-range 0 (string-length cad) 1)])\\n\\t\\t(for ([j (in-range 48 58 1)])\\n\\t\\t\\t(if (= (char->integer (string-ref cad i)) j)\\n\\t\\t\\t\\t(set! cantNums (+ cantNums 1))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t(if (= (char->integer (string-ref cad i)) 32)\\n\\t\\t\\t(set! cantSpace (+ cantSpace 1))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nLa Cadena ingresada tiene: \\")\\n\\t(printf \\"\\\\n%d valores numericos.\\" cantNums)\\n\\t(printf \\"\\\\n%d espacios en blanco. \\" cantSpace)\\n)\\n\\n(contador)"},"5":{"codigo":";Cree una programa en C, que permita determinar si una cadena\\n;ingresada por el usuario es o no pal\xedndromo. Un pal\xedndromo es \\n;una palabra o frase que se lee igual en un sentido que en otro.\\n(define (palindromo)\\n\\t(printf \\"Escribe una cadena: \\")\\n\\t(define cadena1 (string-copy (read)))\\n\\t(define cadena2 (make-string (string-length cadena1) #\\\\a))\\n\\t(define tam (- (string-length cadena1) 1))\\n\\t(for ([i (in-range 0 (string-length cadena1) 1)])\\n\\t\\t(string-set! cadena2 tam (string-ref cadena1 i))\\n\\t\\t(set! tam (- tam 1))\\n\\t)\\n\\t(if (equal? cadena1 cadena2)\\n\\t\\t(printf \\"Es un palindromo.\\")\\n\\t\\t(printf \\"No es un palindromo.\\")\\n\\t)\\n)\\n\\n(palindromo)"},"6":{"codigo":";Escriba un programa que lea dos cadenas, una para el nombre\\n;y otra para el apodo de una persona, luego de leer, concatenar \\n;las dos cadenas en una sola y mostrar por consola.\\n(define (concatenar)\\n\\t(define nombre (string-copy \\"\\"))\\n\\t(define apodo (string-copy \\"\\"))\\n\\t(printf \\"Ingrese el nombre de la persona: \\")\\n\\t(set! nombre (read))\\n\\t(printf \\"Apodo de ~a: \\" nombre)\\n\\t(set! apodo (read))\\n\\t(string-append nombre apodo)\\n\\t(printf \\"\\\\n\\\\tLa cadena concatenada es: ~a\\" nombre)\\n)\\n\\n(concatenar)"},"1b":{"codigo":"/*Cree en programa que capture una cadena y luego\\nconvierta cada uno de los caracteres a letras mayusculas.*/\\n#include <stdio.h>\\n#include <string.h>\\n#include <ctype.h>\\nint main(){\\n\\tint i, j;\\n\\tchar cadena[20];\\n\\tchar cadenaMayus[20];\\n\\tprintf(\\"Ingrese una cadena:  \\");\\n\\tscanf(\\"%s\\", cadena);\\n\\tfor(i=0; i<strlen(cadena); i++){\\n\\t\\tcadenaMayus[i] =toupper(cadena[i]);\\n\\t}\\n\\tprintf(\\"\\\\nLa cadena en mayusculas es: %s\\", cadenaMayus);\\n}\\n"},"2b":{"codigo":"/*Construya un programa en C que capture una cadena y almacene \\nen otra variable la cadena invertida.*/\\n#include <stdio.h>\\n#include <string.h>\\nint main(){\\n\\tint i,tam;\\n\\tchar cadena[20];\\n\\tchar cadena_invertida[20]={};\\n\\tprintf(\\"Ingrese una cadena de caracteres: \\");\\n\\tgets(cadena);\\n\\ttam=strlen(cadena)-1;\\n\\tfor(i=0; i<strlen(cadena); i++){\\n\\t\\tcadena_invertida[tam]=cadena[i];\\n\\t\\ttam--;\\t}\\n\\tprintf(\\"\\\\nCADENA INVERTIDA: \\");\\n\\tprintf(\\"\\\\n%s\\", cadena_invertida);\\n}\\n"},"3b":{"codigo":"/*Cree un programa que analice cuantas letras mayusculas y \\ncuantas letras minusculas tiene una cadena ingresada por\\nel usuario. Nota: Puede usar ciclos anidados y codigo ASCII.*/\\n#include <stdio.h>\\n#include <string.h>\\nint main(){\\n\\tint contador_mayus=0, contador_minus=0, j, i;\\n\\tchar cadena[20];\\n\\tprintf(\\"Ingrese una cadena: \\");\\n\\tscanf(\\"%s\\", cadena);\\n\\tfor(i=0; i<strlen(cadena); i++){\\n\\t\\tfor(j=65; j<=90; j++){\\n\\t\\t\\tif(cadena[i]==j)contador_mayus++;\\n\\t\\t}\\n\\t\\tfor(j=97; j<=122; j++){\\n\\t\\t\\tif(cadena[i]==j)contador_minus++;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\nCantidad de Mayusculas: %d.\\", contador_mayus);\\n\\tprintf(\\"\\\\nCantidad de Minusculas: %d.\\", contador_minus);\\n}\\n"},"4b":{"codigo":"/*Cree un programa en C que reciba una cadena de maximo 20\\ncaracteres escrita por el usuario, el programa debe contar\\ncuantos numeros, y espacios en blanco contiene dicha cadena.\\nNota: Una buena manera de realizar el ejercicio es usando el\\ncodigo ASCII*/\\n#include <stdio.h>\\n#include <string.h>\\nint main(){\\n\\tint i,j, contador_numeros=0, contador_espacios=0;\\n\\tchar cadena[20];\\n\\tprintf(\\"Ingrese una cadena maximo de 20 caracteres: \\");\\n\\tgets(cadena);\\n\\tfor(i=0; i<strlen(cadena); i++){\\n\\t\\tfor(j=48; j<58; j++){\\n\\t\\t\\tif(cadena[i]==j){\\n\\t\\t\\t\\tcontador_numeros++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(cadena[i]==32){\\n\\t\\t\\tcontador_espacios++;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\nLa Cadena ingresada tiene: \\");\\n\\tprintf(\\"\\\\n%d valores numericos.\\", contador_numeros);\\n\\tprintf(\\"\\\\n%d espacios en blanco. \\", contador_espacios);\\n}\\n"},"5b":{"codigo":"/*Cree una programa en C, que permita determinar si una cadena\\ningresada por el usuario es o no pal\xedndromo. Un pal\xedndromo es \\nuna palabra o frase que se lee igual en un sentido que en otro.*/\\n#include <stdio.h>\\n#include <string.h>\\nint main(){\\n\\tprintf(\\"Escribe una cadena: \\");\\n\\tchar cadena1[20];\\n\\tgets(cadena1);\\n\\tchar cadena2[strlen(cadena1)];\\n\\tint tam=strlen(cadena1)-1;\\n\\tfor(int i=0; i<strlen(cadena1); i++) {\\n\\t\\tcadena2[tam] = cadena1[i];\\n\\t\\ttam--;\\n\\t}\\n\\tif (strcmp(cadena1, cadena2) == 0){\\n\\t\\tprintf(\\"\\\\nEs un palindromo.\\\\n\\");\\n\\t}else printf(\\"\\\\nNo es un palindromo.\\\\n\\");\\n}\\n"},"6b":{"codigo":"/*Escriba un programa que lea dos cadenas, una para el nombre\\ny otra para el apodo de una persona, luego de leer, concatenar \\nlas dos cadenas en una sola y mostrar por consola.*/\\n#include <stdio.h>\\n#include <string.h>\\nint main(){\\n\\tchar nombre[20];\\n\\tchar apodo[20];\\n\\tprintf(\\"Ingrese el nombre de la persona: \\");\\n\\tscanf(\\"%s\\", nombre);\\n\\tprintf(\\"Apodo de %s: \\", nombre);\\n\\tscanf(\\"%s\\", apodo);\\n\\tstrcat(nombre, apodo);\\n\\tprintf(\\"\\\\n\\\\tLa cadena concatenada es: %s\\", nombre);\\n}\\n"}},"vectores":{"1":{"codigo":";Crear un vector de enteros que tenga tama\xf1o igual a 3,\\n;inicialicelo con valores al azar, luego use un ciclo para \\n;imprimirlo. Seguidamente modificar la segunda posici\xf3n del \\n;vector e imprimir los cambios\\n(define (setVector)\\n\\t(define vect (vector 1 2 3))\\n\\t(printf \\"El vector es: \\\\n\\")\\n\\t(for ([i (in-range 0 3 1)])\\n\\t\\t(printf \\"~a \\" (vector-ref vect i))\\n\\t)\\n\\t(vector-set! vect 1 5)\\n\\t(printf \\"El vector modificado es: \\\\n\\")\\n\\t(for ([i (in-range 0 3 1)])\\n\\t(printf \\"~a \\" (vector-ref vect i))\\n\\t)\\n)\\n\\n(setVector)\\n"},"2":{"codigo":";Cree un programa que le pida al usuario el tama\xf1o  para un vector \\n;de enteros, y luego que llene una a una las posiciones  del  vector. \\n;Finalmente imprima el vector \\n(define (llenarVect)\\n\\t(printf \\"Ingrese el tamano para el vector: \\")\\n\\t(define tam (read))\\n\\t(define valor 0)\\n\\t(define vect (make-vector tam 0))\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(printf \\"Ingrese un valor entero para la posicion [~a]: \\" i)\\n\\t\\t(set! valor (read))\\n\\t\\t(vector-set! vect i valor)\\n\\t)\\n\\t(printf \\"El vector es: \\\\n\\")\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(printf \\"~a \\" (vector-ref vect i))\\n\\t)\\n)\\n\\n(LLenarVect)\\n"},"3":{"codigo":";Cree un programa que calcule el promedio de los datos dentro \\n;de un vector de enteros.\\n(define (promedio)\\n\\t(define sumatoria 0)\\n\\t(define vect (vector 6 7 8 9 10))\\n\\t(for ([i (in-range 0 5 1)])\\n\\t\\t(set! sumatoria (+ sumatoria (vector-ref vect i)))\\n\\t)\\n\\t(printf \\"\\\\nEl promedio de los valores es: ~a\\" (/ sumatoria 5))\\n)\\n\\n(promedio)\\n"},"4":{"codigo":";Crear un programa que permita calcular el producto escalar entre \\n;dos vectores\\n(define (ProductoEscalar)\\n\\t(define escalar 0)\\n\\t(define v1 (vector 2 3 4))\\n\\t(define v2 (vector 5 6 7))\\n\\t(for ([i (in-range 0 3 1)])\\n\\t\\t(set! escalar (+ escalar (* (vector-ref v1 i) (vector-ref v2 i))))\\n\\t)\\n\\t(printf \\"\\\\nEl producto escalar es: ~a\\" escalar)\\n)\\n\\n(ProductoEscalar)\\n"},"5":{"codigo":";Buscar un m\xe1ximo entre un vector de 10 n\xfameros flotantes\\n(define (maximo)\\n\\t(define max 0)\\n\\t(define vect (vector 1.2 3.0 0.2 5 7 4.1 9.99 10.2 4 2))\\n\\t(for ([i (in-range 0 10 1)])\\n\\t\\t(if (> (vector-ref vect i) (vector-ref vect max))\\n\\t\\t\\t(set! max i)\\n\\t\\t\\t(void)\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nEl maximo de todos los numeros se encuentra en la posicion [~a] es: ~a\\" max (vector-ref vect max))\\n(maximo)\\n"},"6":{"codigo":";Buscar dentro de un vector cuantos n\xfameros positivos y \\n;cuantos negativos hay\\n(define (busqueda)\\n\\t(define positivos 0)(define negativos 0)\\n\\t(define vect (vector -1.2 -3.0 0.2 5 7 -4.1 9.99 10.2 4 2))\\n\\t(for ([i (in-range 0 10 1)])\\n\\t\\t(if (> (vector-ref vect i) 0)\\n\\t\\t\\t(set! negativos (+ negativos 1))\\n\\t\\t\\t(set! positivos (+ positivos 1))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nCantidad de Positivos: ~a de Negativos: ~a\\" positivos negativos)\\n)\\n\\n(busqueda)\\n"},"1b":{"codigo":"/*Crear un vector de enteros que tenga tama\xf1o igual a 3, \\ninicialicelo con valores al azar, luego use un ciclo para \\nimprimirlo. Seguidamente modificar la segunda posici\xf3n del \\nvector e imprimir los cambios*/\\n#include <stdio.h>\\nint main(){\\n\\tint i=0;\\n\\tint vector[3]={1,2,3};\\n\\tprintf(\\"El vector es: \\\\n\\");\\n\\tfor(i=0; i<3; i++){\\n\\t\\tprintf(\\"%d \\", vector[i]);\\n\\t}\\n\\tvector[1]=5;\\n\\tprintf(\\"\\\\nEl vector modificado es: \\\\n\\");\\n\\tfor(i=0; i<3; i++){\\n\\t\\tprintf(\\"%d \\", vector[i]);\\n\\t}\\n}\\n"},"2b":{"codigo":"/*Cree un programa que le pida al usuario el tama\xf1o  para un vector\\nde enteros, y luego que llene una a una las posiciones  del  vector.\\nFinalmente imprima el vector*/\\n#include <stdio.h>\\nint main(){\\n\\tint i=0, tamano=0, valor=0;\\n\\tprintf(\\"Ingrese el tamano para el vector: \\");\\n\\tscanf(\\"%d\\", &tamano);\\n\\tint vector[tamano];\\n\\tfor(i=0; i<tamano; i++){\\n\\t\\tprintf(\\"Ingrese un valor entero para la posicion [%d]: \\", i);\\n\\t\\tscanf(\\"%d\\", &valor);\\n\\t\\tvector[i]=valor;\\n\\t}\\n\\tprintf(\\"\\\\nEl vector es: \\\\n\\");\\n\\tfor(i=0; i<tamano;i++){\\n\\t\\tprintf(\\"%d \\", vector[i]);\\n\\t}\\n}\\n"},"3b":{"codigo":"/*Cree un programa que calcule el promedio de los datos dentro \\nde un vector de enteros.*/\\n#include <stdio.h>\\nint main(){\\n\\tint i=0;\\n\\tfloat sumatoria=0; \\n\\tint vector[5]={6,7,8,9,10};\\n\\tfor(i=0; i<5; i++){\\n\\t\\tsumatoria=vector[i]+sumatoria;\\n\\t}\\n\\tprintf(\\"\\\\nEl promedio de los valores es: %f\\", sumatoria/5);\\n}\\n"},"4b":{"codigo":"/*Crear un programa que permita calcular el producto escalar entre \\ndos vectores*/\\n#include <stdio.h>\\nint main(){\\n\\tint i=0, escalar=0;\\n\\tint v1[3]={2,3,4};\\n\\tint v2[3]={5,6,7};\\n\\tfor(i=0; i<3; i++){\\n\\t\\tescalar=(v1[i]*v2[i])+escalar;\\n\\t}\\n\\tprintf(\\"\\\\nEl producto escalar es: %d\\", escalar);\\n}\\n"},"5b":{"codigo":"/*Buscar un m\xe1ximo entre un vector de 10 n\xfameros flotantes*/#include <stdio.h>\\nint main(){\\n\\tint i=0, max=0;\\n\\tfloat vector[10]={1.2, 3.0, 0.2, 5, 7, 4.1, 9.99, 10.2, 4, 2};\\n\\tfor(i=0; i<10; i++){\\n\\t\\tif(vector[i]>vector[max]){\\n\\t\\t\\tmax=i;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\nEl maximo de todos los numeros se encuentra en la posicion [%d] es: %f\\", max, vector[max]);\\n}\\n"},"6b":{"codigo":"/*Buscar dentro de un vector cuantos n\xfameros positivos y \\ncuantos negativos hay*/\\n#include <stdio.h>\\nint main(){\\n\\tint i=0, positivos=0, negativos=0;\\n\\tfloat vector[10]={-1.2, -3.0, 0.2, 5, 7, -4.1, 9.99, 10.2, 4, 2};\\n\\tfor(i=0; i<10; i++){\\n\\t\\tif(vector[i]<0){\\n\\t\\t\\tnegativos++;\\n\\t\\t}else{\\n\\t\\t\\tpositivos++;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\nCantidad de Positivos: %d\\\\nCantidad de Negativos: %d\\", positivos, negativos);\\n}\\n"}},"matrices":{"1":{"codigo":";Crear una matriz de enteros de orden 3x4, inicializarla \\n;con los numeros en orden ascendente del 1 al 12, finalmente \\n;imprimir la matriz.\\n(require math/matrix)\\n(define (ascendente)\\n\\t(define valor 1)\\n\\t(define mat (make-matrix 3 4 0))\\n\\t(for ([i (in-range 0 3 1)])\\n\\t\\t(for ([j (in-range 0 4 1)])\\n\\t\\t\\t(matrix-set mat i j (set! valor (+ valor 1)))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\n***La matriz digitada es: ***\\\\n\\")\\n\\t(for ([i (in-range 0 3 1)])\\n\\t\\t(for ([j (in-range 0 4 1)])\\n\\t\\t\\t(printf \\"~a \\" (matrix-ref mat i j))\\n\\t\\t)\\n\\t)\\n)\\n\\n(ascendente)\\n"},"2":{"codigo":";Crear un programa que pida por consola el tama\xf1o para una \\n;matriz de enteros, luego el usuario podr\xe1 llenar dicha matriz, \\n;una vez hecho esto imprimir la matriz\\n(require math/matrix)\\n(define (fillMatrix)\\n\\t(define dato 0)\\n\\t(printf \\"Ingrese la cantidad de filas que tendra la matriz: \\")\\n\\t(define fil (read))\\n\\t(printf \\"\\\\nAhora ingrese la cantidad de columnas: \\")\\n\\t(define col (read))\\n\\t(define mat (make-matrix fil col 0))\\n\\t(printf \\"\\\\nIngrese los valores para: \\")\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(for ([j (in-range 0 col 1)])\\n\\t\\t\\t(printf \\"\\\\nPosici\xf3n [~a] [~a]: \\" i j)\\n\\t\\t\\t(set! dato (read))\\n\\t\\t\\t(matrix-set mat i j dato)\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\n***La matriz digitada es: ***\\\\n\\")\\n\\t(for ([i (in-range 0 3 1)])\\n\\t\\t(for ([j (in-range 0 4 1)])\\n\\t\\t\\t(printf \\"~a \\" (matrix-ref mat i j))\\n\\t\\t)\\n\\t)\\n)\\n\\n(fillMatrix)\\n"},"3":{"codigo":";Crear un programa que llene dos matrices de igual orden e\\n;imprima la suma de estas.\\n(require math/matrix)\\n(define (SumMatrices)\\n\\t(define dato 0)\\n\\t(printf \\"Ingrese la cantidad de filas que tendra la matriz: \\")\\n\\t(define fil (read))\\n\\t(printf \\"\\\\nAhora ingrese la cantidad de columnas: \\")\\n\\t(define col (read))\\n\\t(define mat (make-matrix fil col 0))\\n\\t(define mat2 (make-matrix fil col 0))\\n\\t(define suma (make-matrix fil col 0))\\n\\t(printf \\"\\\\nIngrese los valores para la matriz 1: \\")\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(for ([j (in-range 0 col 1)])\\n\\t\\t\\t(printf \\"\\\\nPosici\xf3n [~a] [~a]: \\" i j)\\n\\t\\t\\t(set! dato (read))\\n\\t\\t\\t(matrix-set mat i j dato)\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nIngrese los valores para la matriz 2: \\")\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(for ([j (in-range 0 col 1)])\\n\\t\\t\\t(printf \\"\\\\nPosici\xf3n [~a] [~a]: \\" i j)\\n\\t\\t\\t(set! dato (read))\\n\\t\\t\\t(matrix-set mat2 i j dato)\\n\\t\\t)\\n\\t)\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(for ([j (in-range 0 col 1)])\\n\\t\\t\\t(matrix-set suma i j (+ (matrix-ref mat i j) (matrix-ref mat2 i j)))\\n\\t\\t)\\n\\t)\\n\\t(for ([i (in-range 0 3 1)])\\n\\t\\t(for ([j (in-range 0 4 1)])\\n\\t\\t\\t(printf \\"~a \\" (matrix-ref suma i j))\\n\\t\\t)\\n\\t)\\n)\\n\\n(SumMatrices)\\n"},"4":{"codigo":";Crear un programa que simule una base de datos, que tenga\\n;el nombre de una persona junto con su n\xfamero telefonico.\\n(require math/matrix)\\n(define (Database)\\n\\t(printf \\"Personas a registrar en la base de datos: \\")\\n\\t(define fil (read))\\n\\t(define nombres (make-matrix fil 50 0))\\n\\t(define numeros (make-matrix fil 12 0))\\n\\t(printf \\"\\\\nLlenar la base de datos: \\")\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(for ([j (in-range 0 2 1)])\\n\\t\\t\\t(printf \\"\\\\nDigite el nombre de la persona ~a: \\" i+1)\\n\\t\\t\\t(matrix-set nombres i j (read))\\n\\t\\t\\t(printf\\"\\\\Numero de ~a: \\" (matrix-ref nombres i j))\\n\\t\\t\\t(matrix-set numeros i j (read))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\n***BASE DE DATOS: ***\\\\n\\")\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(for ([j (in-range 0 2 1)])\\n\\t\\t\\t(printf \\"\\\\nNombre: ~a | Telefono: ~a\\" (matrix-ref nombres i j) (matrix-ref numeros i j))\\n\\t\\t)\\n\\t)\\n)\\n\\n(Database)\\n"},"5":{"codigo":";Crear un sistema que organice citas medicas, el programa\\n;debe ofrecer la posibilidad de listar citas por mes.\\n(require math/matrix)\\n(define (citas)\\n\\t(define fil 0)(define col 0)\\n\\t(define opcion 0)(define mes 0)\\n\\t(printf \\"Citas para agendar: \\")\\n\\t(set! fil (read))\\n\\t(define paciente (make-matrix fil 50 0))\\n\\t(define fecha (make-matrix fil 4 0))\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(printf \\"\\\\nDigite el nombre del paciente ~a: \\", i+1)\\n\\t\\t(matrix-set paciente i (+ i 1) (read))\\n\\t\\t(printf \\"\\\\nDatos de la cita:\\\\nDia: \\")\\n\\t\\t(matrix-set fecha i 0 (read))\\n\\t\\t(printf \\"Mes: \\")\\n\\t\\t(matrix-set fecha i 1 (read))\\n\\t\\t(printf \\"Anio: \\")\\n\\t\\t(matrix-set fecha i 2 (read))\\n\\t\\t(printf \\"Hora: \\")\\n\\t\\t(matrix-set fecha i 3 (read))\\n\\t)\\n\\t(printf \\"\\\\nEscriba el numero del mes para listar las citas: \\")\\n\\t(set! mes (read))\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t (if (= mes (matrix-ref fecha i 1))\\n\\t\\t\\t(printf \\"\\\\nPaciente ~a: \\" (matrix-ref paciente i (+ i 1)))\\n\\t\\t\\t(printf \\"\\\\nFecha: |~a|\\" (matrix-ref fec0Napsterha i 0))\\n\\t\\t\\t(printf \\"~a|~a| - \\" (matrix-ref fecha i 1)(matrix-ref fecha i 2))\\n\\t\\t\\t(printf \\"Hora: ~a:00\\" (matrix-ref fecha i 3))\\n\\t\\t)\\n\\t)\\n)\\n\\n(citas)\\n"},"6":{"codigo":";Crear un programa que lleve la informaci\xf3n acerca de los\\n;modulos de un parqueadero. Un modulo tiene dos estados, libre\\n;u ocupado, usar un men\xfa.\\n;CONSEJOS: Use una matriz las cuales tenga dos columnas, una \\n;para el modulo y otra para el estado de dicho modulo, usar \\n;0 o 1 para expresar el estado libre y ocupado respectivamente.\\n(require math/matrix)\\n(define (parqueadero)\\n\\t(define fil 0)(define col 2)(define opcion 0)(define mod 0)\\n\\t(printf \\"Modulos del parqueadero: \\")\\n\\t(set! fil (read))\\n\\t(define parqueadero (make-matrix fil col 0))\\n\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t(matrix-set parqueadero i 1 0)\\n\\t)\\n\\t(do ((i 1 (+ i 1))) ((eq? opcion 4))\\n\\t\\t(printf \\"*Menu Parqueadero*\\\\n1. Ingresar un Vehiculo.\\")\\n\\t\\t(printf \\"\\\\n2. Salida Vehiculo.\\\\n3. Modulos libres y Ocupados.\\")\\n\\t\\t(printf \\"\\\\n4. Salir\\\\nDigite una opcion: \\")\\n\\t\\t(set! opcion (read))\\n\\t\\t(if (= opcion 1)\\n\\t\\t\\t(begin\\n\\t\\t\\t\\t(printf \\"\\\\nIngrese el modulo donde va a parquear: \\")\\n\\t\\t\\t\\t(set! mod (read))\\n\\t\\t\\t\\t(matrix-set parqueadero (- mod 1) 1 1)\\n\\t\\t\\t)\\n\\t\\t\\t(void)\\n\\t\\t)\\n\\t\\t(if (= opcion 2)\\n\\t\\t\\t(begin\\n\\t\\t\\t\\t(printf \\"\\\\nIngrese el modulo de donde sale el vehiculo: \\")\\n\\t\\t\\t\\t(set! mod (read))\\n\\t\\t\\t\\t(matrix-set parqueadero (- mod 1) 1 0)\\n\\t\\t\\t)\\t\\t\\t(void)\\n\\t)\\n\\t\\t(if (= opcion 3)\\n\\t\\t\\t(begin\\n\\t\\t\\t\\t(printf \\"\\\\nModulos libres: \\")\\n\\t\\t\\t\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t\\t\\t\\t(if (= (matrix-ref parqueadero i 1) 0)\\n\\t\\t\\t\\t\\t\\t(printf \\"\\\\nModulo [~a]\\" i+1)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t(printf \\"\\\\nModulos Ocupados \\")\\n\\t\\t\\t\\t(for ([i (in-range 0 fil 1)])\\n\\t\\t\\t\\t\\t(if (= (matrix-ref parqueadero i 1) 1)\\n\\t\\t\\t\\t\\t\\t(printf \\"\\\\nModulo [~a]\\" i+1)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t\\t(void)\\n\\t\\t)\\n\\t)\\n)\\n\\n(parqueadero)\\n"},"1b":{"codigo":"/*Crear una matriz de enteros de orden 3x4, inicializarla \\ncon los numeros en orden ascendente del 1 al 12, finalmente \\nimprimir la matriz.*/\\n#include <stdio.h>\\nint main(){\\n\\tint i, j, valor=1;\\n\\tint matriz[3][4];\\n\\tfor(i=0; i<3; i++){\\n\\t\\tfor(j=0; j<4; j++){\\n\\t\\t\\tmatriz[i][j]=valor++;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\n\\\\n***La matriz digitada es: ***\\\\n\\");\\n\\tfor(i=0; i<3; i++){\\n\\t\\tprintf(\\"\\\\n\\");\\n\\t\\tfor(j=0; j<4; j++){\\n\\t\\t\\tprintf(\\"%d \\", matriz[i][j]);\\n\\t\\t}\\n\\t}\\n}\\n"},"2b":{"codigo":"/*Crear un programa que pida por consola el tama\xf1o para una \\nmatriz de enteros, luego el usuario podr\xe1 llenar dicha matriz, \\nuna vez hecho esto imprimir la matriz*/\\n#include <stdio.h>\\nint main(){\\n\\tint i=0, j=0, filas=0, columnas=0, dato=0;\\n\\tprintf(\\"Ingrese la cantidad de filas que tendra la matriz: \\");\\n\\tscanf(\\"%d\\", &filas);\\n\\tprintf(\\"\\\\nAhora ingrese la cantidad de columnas: \\");\\n\\tscanf(\\"%d\\", &columnas);\\n\\tint matriz[filas][columnas];\\n\\tprintf(\\"\\\\n\\\\nIngrese los valores para: \\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tfor(j=0; j<columnas; j++){\\n\\t\\t\\tprintf(\\"\\\\n\\\\tPosicion [%d] [%d]: \\", i, j);\\n\\t\\t\\tscanf(\\"%d\\", &dato);\\n\\t\\t\\tmatriz[i][j]=dato;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\n***La matriz digitada es: ***\\\\n\\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tprintf(\\"\\\\n\\");\\n\\t\\tfor(j=0; j<columnas; j++){\\n\\t\\t\\tprintf(\\"\\\\t%d \\", matriz[i][j]);\\n\\t\\t}\\n\\t}\\n}\\n"},"3b":{"codigo":"/*Crear un programa que llene dos matrices de igual orden e \\nimprima la suma de estas.*/\\n#include<stdio.h>\\nint main(){\\n\\tint i=0, j=0, filas=0, columnas=0, dato=0;\\n\\tprintf(\\"Cantidad de filas: \\");\\n\\tscanf(\\"%d\\", &filas);\\n\\tprintf(\\"\\\\nCantidad de columnas: \\");\\n\\tscanf(\\"%d\\", &columnas);\\n\\tint matriz1[filas][columnas];\\n\\tint matriz2[filas][columnas];\\n\\tint suma[filas][columnas];\\n\\tprintf(\\"\\\\n\\\\nIngrese los valores para la matriz 1: \\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tfor(j=0; j<columnas; j++){\\n\\t\\t\\tprintf(\\"\\\\n\\\\tPosicion [%d] [%d]: \\", i, j);\\n\\t\\t\\tscanf(\\"%d\\", &dato);\\n\\t\\t\\tmatriz1[i][j]=dato;\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\n\\\\nIngrese los valores para la matriz 2: \\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tfor(j=0; j<columnas; j++){\\n\\t\\t\\tprintf(\\"\\\\n\\\\tPosicion [%d] [%d]: \\", i, j);\\n\\t\\t\\tscanf(\\"%d\\", &dato);\\n\\t\\t\\tmatriz2[i][j]=dato;\\n\\t\\t}\\n\\t}\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tfor(j=0; j<columnas; j++){\\n\\t\\t\\tsuma[i][j]=matriz1[i][j]+matriz2[i][j];\\n\\t\\t}\\n\\t}\\n\\tprintf(\\"\\\\n\\\\n***La suma de las matrices es: ***\\\\n\\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tprintf(\\"\\\\n\\");\\n\\t\\tfor(j=0; j<columnas; j++){\\n\\t\\t\\tprintf(\\"\\\\t%d \\", suma[i][j]);\\n\\t\\t}\\n\\t}\\n}\\n"},"4b":{"codigo":"/*Crear un programa que simule una base de datos, que tenga \\nel nombre de una persona junto con su n\xfamero telefonico.*/\\n#include<stdio.h>\\nint main(){\\n\\tint i=0, filas=0; \\n\\tprintf(\\"Personas a registrar en la base de datos: \\");\\n\\tscanf(\\"%d\\", &filas);\\n\\tchar nombres[filas][50];\\n\\tchar numeros[filas][12];\\n\\tprintf(\\"\\\\n\\\\nLlenar la base de datos:\\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tprintf(\\"\\\\n\\\\n\\\\tDigite el nombre de la persona %d: \\", i+1);\\n\\t\\tscanf(\\"%s\\",&nombres[i]);\\n\\t\\tprintf(\\"\\\\tNumero de %s: \\", nombres[i]);\\n\\t\\tscanf(\\"%s\\", &numeros[i]);\\n\\t}\\n\\tprintf(\\"\\\\n***BASE DE DATOS: ***\\\\n\\");\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tprintf(\\"\\\\n\\\\tNombre: %s | Telefono: %s\\", nombres[i], numeros[i]);\\n\\t}\\n}\\n"},"5b":{"codigo":"/*Crear un sistema que organice citas medicas, el programa\\ndebe ofrecer la posibilidad de listar citas por mes.*/\\n#include<stdio.h>\\n#include<stdlib.h>\\nint main(){\\n\\tint i=0, j=0, filas=0, opcion=0, mes=0;\\n\\tprintf(\\"Citas para agendar: \\");\\n\\tscanf(\\"%d\\", &filas);\\n\\tsystem(\\"cls\\");\\n\\tchar paciente[filas][50];\\n\\tint fecha[filas][4];\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tfor(j=0; j<4; j++){\\n\\t\\t\\tfecha[i][j]=0;\\n\\t\\t}\\n\\t}\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tprintf(\\"\\\\n\\\\n\\\\tDigite el nombre del paciente %d: \\", i+1);\\n\\t\\tscanf(\\"%s\\",&paciente[i]);\\n\\t\\tprintf(\\"\\\\n\\\\tDatos de la cita:\\\\n\\\\tDia: \\");\\n\\t\\tscanf(\\"%d\\", &fecha[i][0]);\\n\\t\\tprintf(\\"\\\\tMes: \\");\\n\\t\\tscanf(\\"%d\\", &fecha[i][1]);\\n\\t\\tprintf(\\"\\\\tAnio: \\");\\n\\t\\tscanf(\\"%d\\", &fecha[i][2]);\\n\\t\\tprintf(\\"\\\\tHora: \\");\\n\\t\\tscanf(\\"%d\\", &fecha[i][3]);\\n\\t}\\n\\tsystem(\\"pause\\");\\n\\tsystem(\\"cls\\");\\n\\tprintf(\\"Escriba el numero del mes para listar las citas: \\");\\n\\tscanf(\\"%d\\", &mes);\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tif(mes==fecha[i][1]){\\n\\t\\t\\tprintf(\\"\\\\n\\\\n\\\\tPaciente %s: \\", paciente[i]);\\n\\t\\t\\tprintf(\\"Fecha: |%d|\\", fecha[i][0]);\\n\\t\\t\\tprintf(\\"%d|%d| - \\", fecha[i][1],fecha[i][2],fecha[i][3]);\\n\\t\\t\\tprintf(\\"Hora: %d:00\\", fecha[i][3]);\\n\\t\\t}\\n\\t}\\n}\\n"},"6b":{"codigo":"/*Crear un programa que lleve la informaci\xf3n acerca de los\\nmodulos de un parqueadero. Un modulo tiene dos estados, libre\\nu ocupado, usar un men\xfa.\\nCONSEJOS: Use una matriz las cuales tenga dos columnas, una \\npara el modulo y otra para el estado de dicho modulo, usar \\n0 o 1 para expresar el estado libre y ocupado respectivamente.*/\\n#include<stdio.h>\\n#include<stdlib.h>\\nint main(){\\n\\tint i=0, filas=0, columnas=2, opcion=0, mod=0;\\n\\tprintf(\\"Modulos del parqueadero: \\");\\n\\tscanf(\\"%d\\", &filas);\\n\\tint parqueadero[filas][columnas];\\n\\tfor(i=0; i<filas; i++){\\n\\t\\tparqueadero[i][1]=0;\\n\\t}\\n\\tdo{\\n\\t\\tsystem(\\"cls\\");\\n\\t\\tprintf(\\"*Menu Parqueadero*\\\\n1. Ingresar un Vehiculo.\\");\\n\\t\\tprintf(\\"\\\\n2. Salida Vehiculo.\\\\n3. Modulos libres y Ocupados.\\");\\n\\t\\tprintf(\\"\\\\n4. Salir\\\\n\\\\n\\\\tDigite una opcion: \\");\\n\\t\\tscanf(\\"%d\\", &opcion);\\n\\t\\tif(opcion==1){\\n\\t\\t\\tprintf(\\"\\\\nIngrese el modulo donde va a parquear: \\");\\n\\t\\t\\tscanf(\\"%d\\", &mod);\\n\\t\\t\\tparqueadero[mod-1][1]=1;\\n\\t\\t\\tsystem(\\"pause\\");\\n\\t\\t}else if(opcion==2){\\n\\t\\t\\tprintf(\\"\\\\nIngrese el modulo de donde sale el vehiculo: \\");\\n\\t\\t\\tscanf(\\"%d\\", &mod);\\n\\t\\t\\tparqueadero[mod-1][1]=0;\\n\\t\\t\\tsystem(\\"pause\\");\\n\\t\\t}else if(opcion==3){\\n\\t\\t\\tprintf(\\"\\\\nModulos libres: \\");\\n\\t\\t\\tfor(i=0; i<filas; i++){\\n\\t\\t\\t\\tif(parqueadero[i][1]==0){\\n\\t\\t\\t\\t\\tprintf(\\"\\\\n\\\\tModulo [%d]\\", i+1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tprintf(\\"\\\\nModulos Ocupados: \\");\\n\\t\\t\\tfor(i=0; i<filas; i++){\\n\\t\\t\\t\\tif(parqueadero[i][1]==1){\\n\\t\\t\\t\\t\\tprintf(\\"\\\\n\\\\tModulo [%d]\\", i+1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\tsystem(\\"pause\\");\\n\\t\\t}\\n\\t}while(opcion!=4);\\n}\\n"}},"estructuras":{"1":{"codigo":";Crear en programa en Racket que tenga una estructura para almacenar fechas,\\n;leer e imprimir dos estructuras de este tipo.\\n(define-struct fecha(\\n\\t\\tdia\\n\\t\\tmes\\n\\t\\tanio\\n\\t)\\n)\\n\\n(define (main)\\n\\t(printf \\"Ingrese una fecha de nacimiento: \\")\\n\\t(define Nacimiento(make-fecha\\n\\t\\t\\t(begin (printf \\"\\\\nDia: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nMes: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nAnio: \\")(read))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nIngrese la fecha del dia de hoy: \\")\\n\\t(define F_Actual(make-fecha\\n\\t\\t\\t(begin (printf \\"\\\\nDia: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nMes: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nAnio: \\")(read))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\nLA FECHA DE NACIMIENTO INGRESADA FUE:\\")\\n\\t(printf \\" ~a/~a/~a\\" (fecha-dia Nacimiento)(fecha-mes Nacimiento)(fecha-anio Nacimiento))\\n\\t(printf \\"\\\\nLA FECHA DEL DIA DE HOY ES:\\")\\n\\t(printf \\" ~a/~a/~a\\" (fecha-dia F_Actual)(fecha-mes F_Actual)(fecha-anio F_Actual))\\n)\\n\\n(main)"},"2":{"codigo":";Cree en programa en Racket que lea e imprima una estructura\\n;que almacena la informacion basica de una persona.\\n(define-struct DataPerson(\\n\\t\\t\\tnombre\\n\\t\\t\\tapellido\\n\\t\\t\\tcedula\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define Persona(make-DataPerson\\n\\t\\t\\t(begin (printf \\"\\\\nIngrese el nombre de la persona: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nIngrese el apellido: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nIngrese la cedula: \\")(read))\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\n\\\\nLA PERSONA INGRESADA FUE:\\")\\n\\t(printf \\"\\\\nNombre: ~a\\" (DataPerson-nombre Persona))\\n\\t(printf \\"\\\\nApellido: ~a\\" (DataPerson-apellido Persona))\\n\\t(printf \\"\\\\nCedula: ~a\\" (DataPerson-cedula Persona))\\n)\\n\\n(main)"},"3":{"codigo":";Cree en programa en Racket que tenga dos estructuras anidadas, una para\\n;la informacion basica de una persona, y otra para la fecha de nacimiento.\\n;lea e imprima ambas estructuras.\\n(define-struct fecha(\\n\\t\\tdia\\n\\t\\tmes\\n\\t\\tanio\\n\\t)\\n)\\n\\n(define-struct DataPerson(\\n\\t\\tnombre\\n\\t\\tapellido\\n\\t\\tcedula\\n\\t\\tFECHA\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define Persona(make-DataPerson\\n\\t\\t\\t(begin (printf \\"\\\\nIngrese el nombre de la persona: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nIngrese el apellido: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nIngrese la cedula: \\")(read))\\n\\t\\t\\t(make-fecha \\n\\t\\t\\t\\t(begin (printf \\"\\\\nIngrese la fecha de nacimiento:\\\\nDia: \\")(read))\\n\\t\\t\\t\\t(begin (printf \\"\\\\nMes:\\")(read))\\n\\t\\t\\t\\t(begin (printf \\"\\\\nAnio: \\")(read))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\n\\\\nLA PERSONA INGRESADA FUE:\\")\\n\\t(printf \\"\\\\nNombre: ~a\\" (DataPerson-nombre Persona))\\n\\t(printf \\"\\\\nApellido: ~a\\" (DataPerson-apellido Persona))\\n\\t(printf \\"\\\\nCedula: ~a\\" (DataPerson-cedula Persona))\\n\\t(printf \\"\\\\nFecha de Nacimiento:\\")\\n\\t(printf \\" ~a/\\" (fecha-dia (DataPerson-FECHA Persona)))\\n\\t(printf \\"~a/\\" (fecha-mes (DataPerson-FECHA Persona)))\\n\\t(printf \\"~a\\" (fecha-anio (DataPerson-FECHA Persona)))\\n)\\n\\n(main)"},"4":{"codigo":";Realice un programa en Racket que capture dos horas (hora militar) \\n;y calcule la diferencia de tiempo entre ellas.\\n(define-struct hora(\\n\\t\\thoras\\n\\t\\tminutos\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define hora 0)(define minuto 0)\\n\\t(printf \\"Ingrese la hora 1: \\")\\n\\t(define Hora1(make-hora\\n\\t\\t\\t(begin (printf \\"\\\\nHoras: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nMinutos: \\")(read))\\n\\t)\\n\\t)\\n\\t(printf \\"Ingrese la hora 2: \\")\\n\\t(define Hora2(make-hora\\n\\t\\t\\t(begin (printf \\"\\\\nHoras: \\")(read))\\n\\t\\t\\t(begin (printf \\"\\\\nMinutos: \\")(read))\\n\\t\\t)\\n\\t)\\n\\t(set! hora (- (hora-horas Hora2) (hora-horas Hora1)))\\n\\t(set! minuto (- (hora-minutos Hora2) (hora-minutos Hora1)))\\n\\t(if(< hora 0)\\n\\t\\t(set! hora (* hora -1))\\n\\t\\t(void)\\n\\t)\\n\\t(if(< minuto 0)\\n\\t\\t(set! minuto (* minuto -1))\\n\\t\\t(void)\\n\\t)\\n\\t(printf \\"\\\\n\\\\nLa diferencia es de: ~a horas y ~a minutos.\\" hora minuto)\\n)\\n\\n(main)"},"5":{"codigo":";Crear una vector de estructuras que guarde la informaci\xf3n de N empleados.\\n(define-struct Persona(\\n\\t\\tnombre\\n\\t\\tsexo\\n\\t\\tsalario\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define nemp 0)(define i 0)\\n\\t(printf \\"Introduzca el numero de empleados: \\")\\n\\t(set! nemp (read))\\n\\t(define empleado (make-vector nemp))\\n\\t(for ([i (in-range 0 nemp 1)])\\n\\t\\t(vector-set! empleado i \\n\\t\\t\\t(make-Persona\\n\\t\\t\\t\\t(begin (printf \\"\\\\nNombre[~a]: \\" (+ i 1))(read))\\n\\t\\t\\t\\t(begin (printf \\"\\\\nSexo[~a]: \\" (+ i 1))(read))\\n\\t\\t\\t\\t(begin (printf \\"\\\\nSalario[~a]: \\" (+ i 1))(read))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t)\\n)\\n\\n(main)"},"6":{"codigo":";Crear una vector de estructuras que guarde la informaci\xf3n de N personas, \\n;y debe permitir realizar una busqueda sobre las personas ingresadas.\\n(define-struct persona(\\n\\t\\tnombre\\n\\t\\tcedula\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define n_personas 0)(define i 0)(define iguales 0)(define buscar 0)\\n\\t(define cedula_buscar 0)\\n\\t(printf \\"Introduzca el numero de personas a guardar: \\")\\n\\t(set! n_personas (read))\\n\\t(define personas(make-vector n_personas))\\n\\t(for ([i (in-range 0 n_personas 1)])\\n\\t\\t(vector-set! personas i \\n\\t\\t\\t(make-persona\\n\\t\\t\\t\\t(begin (printf \\"\\\\nNombre[~a]: \\" (+ i 1))(read))\\n\\t\\t\\t\\t(begin (printf \\"\\\\nCedula[~a]: \\" (+ i 1))(read))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t)\\n\\t(printf \\"\\\\n\\\\nIngrese la cedula de la persona a buscar: \\")\\n\\t(set! cedula_buscar (read))\\n\\t(while(= buscar 0)\\n\\t\\t(for ([j (in-range 0 n_personas 1)])\\n\\t\\t\\t(if(= (persona-cedula (vector-ref personas j)) cedula_buscar)\\n\\t\\t\\t\\t(begin\\n\\t\\t\\t\\t\\t(printf \\"\\\\n\\\\nEL NOMBRE DE LA PERSONA ES: \\")\\n\\t\\t\\t\\t\\t(printf \\"~a\\" (persona-nombre (vector-ref personas j)))\\n\\t\\t\\t\\t\\t(set! buscar 1)\\n\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t(set! i (+ i 1))\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t(set! buscar 1)\\n\\t)\\n\\t(if(= i n_personas)\\n\\t\\t(printf \\"\\\\nLA PERSONA NO SE ENCONTRO\\")\\n\\t\\t(void)\\n\\t)\\n)\\n\\n(main)"},"1b":{"codigo":"/*Crear en programa en c que tenga una estructura para almacenar fechas,\\nleer e imprimir dos estructuras de este tipo.*/\\n#include <stdio.h>\\nstruct fecha{\\n\\tint dia;\\n\\tint mes;\\n\\tint anio;\\n};\\n\\nint main(){\\n\\tstruct fecha Nacimiento;\\n\\tstruct fecha Fecha_Actual;\\n\\tprintf(\\"Ingrese una fecha de nacimiento:\\\\nDia: \\");\\n\\tscanf(\\"%d\\", &Nacimiento.dia);\\n\\tprintf(\\"Mes: \\");\\n\\tscanf(\\"%d\\", &Nacimiento.mes);\\n\\tprintf(\\"Anio: \\");\\n\\tscanf(\\"%d\\", &Nacimiento.anio);\\n\\tprintf(\\"Ingrese la fecha del dia de hoy:\\\\nDia: \\");\\n\\tscanf(\\"%d\\", &Fecha_Actual.dia);\\n\\tprintf(\\"Mes: \\");\\n\\tscanf(\\"%d\\", &Fecha_Actual.mes);\\n\\tprintf(\\"Anio: \\");\\n\\tscanf(\\"%d\\", &Fecha_Actual.anio);\\n\\tprintf(\\"\\\\n\\\\nLA FECHA DE NACIMIENTO INGRESADA FUE:\\");\\n\\tprintf(\\" %d/%d/%d\\", Nacimiento.dia, Nacimiento.mes, Nacimiento.anio);\\n\\tprintf(\\"\\\\n\\\\nLA FECHA DEL DIA DE HOY ES:\\");\\n\\tprintf(\\" %d/%d/%d\\", Fecha_Actual.dia, Fecha_Actual.mes, Fecha_Actual.anio);\\n}"},"2b":{"codigo":"/*Cree en programa en c que lea e imprima una estructura\\nque almacena la informacion basica de una persona.*/\\n#include <stdio.h>\\nstruct datos_persona{\\n\\tchar nombre[20];\\n\\tchar apellido[20];\\n\\tchar cedula[12];\\n};\\n\\nint main(){\\n\\tstruct datos_persona Persona1;\\n\\tprintf(\\"Ingrese el nombre de la persona: \\");\\n\\tscanf(\\"%s\\", Persona1.nombre);\\n\\tprintf(\\"Ingrese el apellido de %s: \\", Persona1.nombre);\\n\\tscanf(\\"%s\\", Persona1.apellido);\\n\\tprintf(\\"Ingrese la cedula de %s: \\", Persona1.nombre);\\n\\tscanf(\\"%s\\", Persona1.cedula);\\n\\tprintf(\\"\\\\n\\\\nLA PERSONA INGRESADA FUE:\\");\\n\\tprintf(\\"\\\\nNombre: %s\\", Persona1.nombre);\\n\\tprintf(\\"\\\\nApellido: %s\\", Persona1.apellido);\\n\\tprintf(\\"\\\\nCedula: %s\\", Persona1.cedula);\\n}"},"3b":{"codigo":"/*Cree en programa en c que tenga dos estructuras anidadas, una para\\nla informacion basica de una persona, y otra para la fecha de nacimiento.\\nlea e imprima ambas estructuras.*/\\n#include <stdio.h>\\nstruct fecha{\\n\\tint dia;\\n\\tint mes;\\n\\tint anio;\\n};\\n\\nstruct datos_persona{\\n\\tchar nombre[20];\\n\\tchar apellido[20];\\n\\tchar cedula[12];\\n\\tstruct fecha fecha_Nacimiento;\\n};\\n\\nint main(){\\n\\tstruct datos_persona Persona1;\\n\\tprintf(\\"Ingrese el nombre de la persona: \\");\\n\\tscanf(\\"%s\\", Persona1.nombre);\\n\\tprintf(\\"Ingrese el apellido de %s: \\", Persona1.nombre);\\n\\tscanf(\\"%s\\", Persona1.apellido);\\n\\tprintf(\\"Ingrese la cedula de %s: \\", Persona1.nombre);\\n\\tscanf(\\"%s\\", Persona1.cedula);\\n\\tprintf(\\"Ingrese la fecha de nacimiento:\\\\nDia: \\");\\n\\tscanf(\\"%d\\", &Persona1.fecha_Nacimiento.dia);\\n\\tprintf(\\"Mes: \\");\\n\\tscanf(\\"%d\\", &Persona1.fecha_Nacimiento.mes);\\n\\tprintf(\\"Anio: \\");\\n\\tscanf(\\"%d\\", &Persona1.fecha_Nacimiento.anio);\\n\\tprintf(\\"\\\\n\\\\nLA PERSONA INGRESADA FUE:\\");\\n\\tprintf(\\"\\\\nNombre: %s\\", Persona1.nombre);\\n\\tprintf(\\"\\\\nApellido: %s\\", Persona1.apellido);\\n\\tprintf(\\"\\\\nCedula: %s\\", Persona1.cedula);\\n\\tprintf(\\"\\\\nFecha de Nacimiento:\\");\\n\\tprintf(\\"%d/\\", Persona1.fecha_Nacimiento.dia);\\n\\tprintf(\\"%d/\\", Persona1.fecha_Nacimiento.mes);\\n\\tprintf(\\"%d\\", Persona1.fecha_Nacimiento.anio);\\n}"},"4b":{"codigo":"/*Realice un programa en C que capture dos horas (hora militar) \\ny calcule la diferencia de tiempo entre ellas.*/\\n#include <stdio.h>\\nstruct hora{\\n\\tint horas;\\n\\tint minutos;\\n};\\n\\nint main(){\\n\\tint hora=0, minuto=0;\\n\\tstruct hora Hora1;\\n\\tprintf(\\"Ingrese la hora 1:\\\\nHoras: \\");\\n\\tscanf(\\"%d\\", &Hora1.horas);\\n\\tprintf(\\"Minutos: \\");\\n\\tscanf(\\"%d\\", &Hora1.minutos);\\n\\tstruct hora Hora2;\\n\\tprintf(\\"Ingrese la hora 2:\\\\nHoras: \\");\\n\\tscanf(\\"%d\\", &Hora2.horas);\\n\\tprintf(\\"Minutos: \\");\\n\\tscanf(\\"%d\\", &Hora2.minutos);\\n\\thora=Hora2.horas-Hora1.horas;\\n\\tminuto=Hora2.minutos-Hora1.minutos;\\n\\tif(hora<0){\\n\\t\\thora=hora*-1;\\n\\t}\\n\\tif(minuto<0){\\n\\t\\tminuto=minuto*-1;\\n\\t}\\n\\tprintf(\\"\\\\n\\\\nLa diferencia es de: %d horas y %d minutos,\\", hora, minuto);\\n}"},"5b":{"codigo":"/*Crear un vector de estructuras que guarde la informaci\xf3n de N empleados.*/\\n#include<stdio.h>\\nstruct Persona{\\n\\tchar nombre[30];\\n\\tchar sexo[12];\\n\\tfloat salario;\\n};\\n\\nint main(){\\n\\tint nemp, i;\\n\\tprintf(\\"Introduzca el numero de empleados: \\");\\n\\tscanf(\\"%d\\",&nemp);\\n\\tstruct Persona emp[nemp];\\n\\tfor(i=0;i<nemp;i++){\\n\\t\\tprintf(\\"\\\\nNombre[%d]: \\",i+1);\\n\\t\\tscanf(\\"%s\\",emp[i].nombre);\\n\\t\\tprintf(\\"Sexo[%d]: \\",i+1);\\n\\t\\tscanf(\\"%s\\",emp[i].sexo);\\n\\t\\tprintf(\\"Salario[%d]: \\",i+1);\\n\\t\\tscanf(\\"%f\\",&emp[i].salario);\\n\\t}\\n}\\n"},"6b":{"codigo":"/*Crear una vector de estructuras que guarde la informaci\xf3n de N personas,\\ny debe permitir realizar una busqueda sobre las personas ingresadas.*/\\n#include<stdio.h>\\nstruct persona{\\n\\tchar nombre[30];\\n\\tint cedula;\\n};\\n\\nint main(){\\n\\tint n_personas, i, iguales, buscar=0;\\n\\tint cedula_buscar;\\n\\tprintf(\\"Introduzca de personas a guardar: \\");\\n\\tscanf(\\"%d\\",&n_personas);\\n\\tstruct persona personas[n_personas];\\n\\tfor(i=0;i<n_personas;i++){\\n\\t\\tprintf(\\"\\\\nNombre[%d]: \\",i+1);\\n\\t\\tscanf(\\"%s\\",personas[i].nombre);\\n\\t\\tprintf(\\"Cedula[%d]: \\",i+1);\\n\\t\\tscanf(\\"%d\\", &personas[i].cedula);\\n\\t}\\n\\tprintf(\\"\\\\n\\\\nIngrese la cedula de la persona a buscar: \\");\\n\\tscanf(\\"%d\\", &cedula_buscar);\\n\\twhile(buscar==0){\\n\\t\\tfor(i=0; i<n_personas; i++){\\n\\t\\t\\tif(personas[i].cedula==cedula_buscar){\\n\\t\\t\\t\\tprintf(\\"\\\\n\\\\nEL NOMBRE DE LA PERSONA ES: %s\\", personas[i].nombre);\\n\\t\\t\\t\\tbuscar=1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tbuscar=1;\\n\\t}\\n\\tif(i==n_personas){\\n\\t\\tprintf(\\"\\\\nLA PERSONA NO SE ENCONTRO\\");\\n\\t}\\n}\\n"}},"funciones":{"1":{"codigo":";Cree una funcion que evalue si un n\xfamero es par o impar.\\n(define (esperar n)\\n\\t(if (= (remainder n 2) 0)\\n\\t\\t1\\n\\t\\t0\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define numero 0)\\n\\t(printf \\"Ingrese un numero: \\")\\n\\t(set! numero (read))\\n\\t(if (= (esperar numero) 1)\\n\\t\\t(printf \\"\\\\nEl numero ingresado es Par. \\")\\n\\t\\t(printf \\"\\\\nEl numero ingresado es Impar. \\")\\n\\t)\\n)\\n\\n(main)"},"2":{"codigo":";Crear un programa que tenga una funci\xf3n encargada de \\n;aplicar descuento a un producto que este en venta.\\n(define (descuento precio descuento)\\n\\t(define total 0)\\n\\t(if(and (> precio 0) (> descuento 0))\\n\\t\\t(set! total (* precio(/ (- 100 descuento) 100)))\\n\\t)\\n\\ttotal\\n)\\n\\n(define (main)\\n\\t(define precio 0) (define desc 0)\\n\\t(printf \\"Ingrese el precio del producto: \\")\\n\\t(set! precio (read))\\n\\t(printf \\"Ingrese el descuento en porcentaje para el producto: \\")\\n\\t(set! desc (read))\\n\\t(printf \\"\\\\nEl precio final es: ~a\\" (descuento precio desc))\\n)\\n\\n(main)"},"3":{"codigo":";Cree una funci\xf3n que se encargue de devolver el maximo \\n;valor de los valores ingresados en un vector de enteros \\n;que el usuario digita.\\n(define  (maximo vect N)\\n\\t(define mayor 0)\\n\\t(for ([i (in-range 0 N 1)])\\n\\t\\t(if (< mayor (vector-ref vect i))\\n\\t\\t\\t(set! mayor (vector-ref vect i))\\n\\t\\t\\t(void)\\n\\t\\t)\\n\\t)\\n\\tmayor\\n)\\n\\n(define (main)\\n\\t(printf \\"Ingrese la cantidad de enteros a guardar en el vector: \\")\\n\\t(define N (read))\\n\\t(define vect ) \\n\\t(for ([i (in-range 0 N 1)])\\n\\t\\t(printf \\"Valor para la posicion [~a]: \\" i+1)\\n\\t\\t(vector-set! vect i (read))\\n\\t)\\n\\t(printf \\"\\\\nEL VALOR MAXIMO ES: ~a\\" (maximo vect N))\\n)\\n\\n(main)"},"4":{"codigo":";Cree un programa en Racket tenga un men\xfa de opciones de una \\n;calculadora deoperaciones matem\xe1ticas basicas.\\n(define (suma)\\n\\t(define a 0)(define b 0)\\n\\t(printf \\"Numero a: \\")\\n\\t(set! a (read))\\n\\t(printf \\"\\\\nNumero b: \\")\\n\\t(set! b (read))\\n\\t(+ a b)\\n)\\n\\n(define (resta)\\n\\t(define a 0)(define b 0)\\n\\t(printf \\"Numero a: \\")\\n\\t(set! a (read))\\n\\t(printf \\"\\\\nNumero b: \\")\\n\\t(set! b (read))\\n\\t(- a b)\\n)\\n\\n(define (multiplicacion)\\n\\t(define a 0)(define b 0)\\n\\t(printf \\"Numero a: \\")\\n\\t(set! a (read))\\n\\t(printf \\"\\\\nNumero b: \\")\\n\\t(set! b (read))\\n\\t(* a b)\\n)\\n\\n(define (division)\\n\\t(define a 0)(define b 0)\\n\\t(printf \\"Numero a: \\")\\n\\t(set! a (read))\\n\\t(printf \\"\\\\nNumero b: \\")\\n\\t(set! b (read))\\n\\t(/ a b)\\n)\\n\\n(define (main)\\n\\t(define opcion 0)\\n\\t(printf \\"\\\\nCALCULADORA:\\\\n1. Suma.\\\\n2. Resta.\\\\n3. Multiplicacion\\")\\n\\t(printf \\"\\\\n4. Division..\\\\n5. Salir\\\\nOpcion: \\")\\n\\t(set! opcion (read))\\n\\t(cond\\n\\t\\t((= opcion 1) (printf \\"\\\\nLa suma da como resultado: ~a\\" \\n\\t\\t\\t(suma)))\\n\\t\\t((= opcion 2) (printf \\"\\\\nLa resta da como resultado: ~a\\" \\n\\t\\t\\t(resta)))\\n\\t\\t((= opcion 3) (printf \\"\\\\nLa multiplicacion da como resultado: ~a\\" \\n\\t\\t\\t(multiplicacion)))\\n\\t\\t((= opcion 4) (printf \\"\\\\nLa division da como resultado: ~a\\" \\n\\t\\t\\t(division)))\\n\\t\\t((= opcion 5) (printf \\"Salir\\"))\\t\\t(else (begin (printf \\"ingrese una opcion valida.\\") (main)))\\n\\t)\\n)\\n\\n(main)"},"5":{"codigo":";Cree una funci\xf3n que utilice recursi\xf3n para calcular el\\n;factorial de un n\xfamero.\\n(define (factorial n)\\n\\t(if(= n 0)\\n\\t\\t1\\n\\t\\t(if(= n 1)\\n\\t\\t\\t1\\n\\t\\t\\t(* n (factorial (- n 1)))\\n\\t\\t)\\n\\t)\\n)\\n\\n(define (main) \\n\\t(define numero 0)\\n\\t(printf \\"Ingresa un numero para calcular su factorial: \\")\\n\\t(set! numero (read))\\n\\t(printf \\"\\\\nEl factorial del numero ~a es: ~a\\" numero (factorial numero))\\n)\\n\\n(main)"},"6":{"codigo":";Escriba un programa que use funciones recursivas\\n;el cual permita escribir la sucesi\xf3n de Fibonacci.\\n(define (fibonacci n)\\n\\t(if (= n 1)\\n\\t\\t1\\n\\t\\t(if (= n 2)\\n\\t\\t\\t1\\n\\t\\t\\t(+ (fibonacci (- n 1)) (fibonacci (- n 2)))\\n\\t\\t)\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define limite 0)\\n\\t(printf \\"Escriba el limite para la sucesion de fibonacci: \\")\\n\\t(set! limite (read))\\n\\t(for ([i (in-range 0 limite 1)])\\n\\t\\t(printf \\"~a\\\\n\\" (fibonacci i))\\n\\t)\\n)\\n\\n(main)"},"1b":{"codigo":"/*Cree una funcion que evalue si un n\xfamero es par o impar.*/\\n#include <stdio.h>\\nint espar(int n){\\n\\tif(n%2==0){\\n\\t\\treturn 1;\\n\\t}else return 0;\\n}\\n\\nint main(){\\n\\tint numero;\\n\\tprintf(\\"Ingrese un numero: \\");\\n\\tscanf(\\"%d\\", &numero);\\n\\tif(espar(numero) == 1){\\n\\t\\tprintf(\\"\\\\nEl numero ingresado es Par. \\");\\n\\t}else printf(\\"\\\\nEl numero ingresado es Impar. \\");\\n}"},"2b":{"codigo":"/* Crear un programa que tenga una funci\xf3n encargada de aplicar descuento a un producto que este en venta.*/#include <stdio.h>\\nfloat descuento(float precio, float descuento){\\n\\tfloat total=0;\\n\\tif(precio>0 && descuento>0){\\n\\t\\ttotal=precio*((100-descuento)/100);\\n\\t}\\n\\treturn total;\\n}\\n\\nint main(){\\n\\tfloat precio=0, desc=0;\\n\\tprintf(\\"Ingrese el precio del producto: \\");\\n\\tscanf(\\"%f\\", &precio);\\n\\tprintf(\\"Ingrese el descuento en porcentaje para el producto: \\");\\n\\tscanf(\\"%f\\", &desc);\\n\\tprintf(\\"\\\\n\\tEl precio final es: %.2f\\", descuento(precio, desc));\\n}"},"3b":{"codigo":"/*Cree una funci\xf3n que se encargue de devolver el maximo \\nvalor de los valores ingresados en un vector de enteros \\nque el usuario digita.*/\\n#include <stdio.h>\\nint maximo(int vector[], int N){\\n \\tint i, mayor=0;\\n\\tfor(i=0; i<N; i++){\\n\\t\\tif(mayor<vector[i]){\\n\\t\\t\\tmayor=vector[i];\\n\\t\\t}\\n\\t}\\n\\treturn mayor;\\n}\\n\\nint main(){\\n\\tint N, i;\\n\\tprintf(\\"Ingrese la cantidad de enteros a guardar en el vector: \\");\\n\\tscanf(\\"%d\\", &N);\\n\\tint vector[N];\\n\\tfor(i=0; i<N; i++){\\n\\t\\tprintf(\\"Valor para la posicion [%d]: \\", i+1);\\n\\t\\tscanf(\\"%d\\", &vector[i]);\\n\\t}\\n\\tprintf(\\"\\\\nEL VALOR MAXIMO ES: %d\\", maximo(vector, N));\\n}"},"4b":{"codigo":"/*Cree un programa en C tenga un men\xfa de opciones de una \\ncalculadora deoperaciones matem\xe1ticas basicas.*/\\n#include <stdio.h>\\nint suma(){\\n\\tint a, b;\\n\\tprintf(\\"Numero a: \\");\\n\\tscanf(\\"%d\\", &a);\\n\\tprintf(\\"\\\\nNumero b: \\");\\n\\tscanf(\\"%d\\", &b);\\nreturn a+b;\\n}\\n\\nint resta(){\\n\\tint a, b;\\n\\tprintf(\\"Numero a: \\");\\n\\tscanf(\\"%d\\", &a);\\n\\tprintf(\\"\\\\nNumero b: \\");\\n\\tscanf(\\"%d\\", &b);\\n\\treturn a-b;\\n}\\n\\nint multiplicacion(){\\n\\tint a, b;\\n\\tprintf(\\"Numero a: \\");\\n\\tscanf(\\"%d\\", &a);\\n\\tprintf(\\"\\\\nNumero b: \\");\\n\\tscanf(\\"%d\\", &b);\\n\\treturn a*b;\\n}\\n\\nfloat division(){\\n\\tfloat a, b;\\n\\tprintf(\\"Numero a: \\");\\n\\tscanf(\\"%f\\", &a);\\n\\tprintf(\\"\\\\nNumero b: \\");\\n\\tscanf(\\"%f\\", &b);\\n\\treturn a/b;\\n}\\n\\nint main(){\\n\\tint opcion;\\n\\tdo{\\n\\t\\tprintf(\\"\\\\nCALCULADORA:\\\\n1. Suma.\\\\n2. Resta.\\\\n3. Multiplicacion\\");\\n\\t\\tprintf(\\"\\\\n4. Division..\\\\n5. Salir\\\\nOpcion: \\");\\n\\t\\tscanf(\\"%d\\", &opcion);\\n\\t\\tswitch(opcion){\\n\\t\\t\\tcase 1: printf(\\"\\\\nLa suma da como resultado: %d\\", suma());\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2: printf(\\"\\\\nLa resta da como resultado: %d\\",resta());\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3: printf(\\"\\\\nLa multiplicacion da como resultado: %d\\",multiplicacion());\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 4: printf(\\"\\\\nLa division da como resultado: %f\\",division());\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault: printf(\\"ingrese una opcion valida.\\");\\n\\t\\t}\\n\\t}while(opcion!=5);\\n}"},"5b":{"codigo":"/*Cree una funci\xf3n que utilice recursi\xf3n para calcular el\\nfactorial de un n\xfamero.*/\\n#include <stdio.h>\\nint factorial(int n) {\\n\\tif(n < 0) return 0;\\n\\telse if(n > 1) return n*factorial(n-1);\\n\\treturn 1;\\n}\\n\\nint main() {\\n\\tint numero;\\n\\tprintf(\\"Ingresa un numero para calcular su factorial: \\");\\n\\tscanf(\\"%d\\", &numero);\\n\\tprintf(\\"\\\\n\\\\nEl factorial del numero %d es: %d.\\", numero, factorial(numero));\\n}"},"6b":{"codigo":"/*Escriba un programa que use funciones recursivas \\nel cual permita escribir la sucesi\xf3n de Fibonacci.*/\\n#include <stdio.h>\\n#include <stdlib.h>\\nint fibonacci(int n){\\n\\tif (n == 1){\\n\\t\\treturn 1;\\n\\t}else if (n==2){\\n\\t\\treturn 1;\\n\\t}else return fibonacci(n-1) + fibonacci(n-2);\\n}\\n\\nint main(){\\n\\tint i, limite;\\n\\tprintf(\\"Escriba el limite para la sucesion de fibonacci: \\");\\n\\tscanf(\\"%d\\", &limite);\\n\\tfor (i=0; i<limite; i++){\\n\\t\\tprintf(\\"%d\\\\n\\", fibonacci(i));\\n\\t}\\n}"}},"composicion":{"1":{"codigo":";Crear un programa en Racket que capture una letra y y devuelva \\n;la letra siguiente. Nota: Use el codigo ASCII, use dos funciones, \\n;una para comprobar el valor de la letra, y otra para aumentar \\n;dicho valor\\n(define (ASCII letra)\\n\\t(char->integer letra)\\n)\\n\\n(define (aumentar letra)\\n\\t(define valor 0)\\n\\t(set! valor (ASCII letra))\\n\\t(if(= valor 90)\\n\\t\\t65\\n\\t\\t(if(= valor 122)\\n\\t\\t\\t97\\n\\t\\t\\t(set!  valor (+ valor 1))\\n\\t\\t)\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define letra \\"\\")\\n\\t(printf \\"Ingrese una letra: \\")\\n\\t(set! letra (read))\\n\\t(printf \\"\\\\nLa siguiente letra es: ~a\\" (aumentar letra))\\n)\\n\\n(main)"},"2":{"codigo":";Cree un programa en Racket que realice una resta de enteros con la\\n;condici\xf3n de que el resultado de positivo, use funciones anidadas.\\n(define (mayor a b)\\n\\t(if(> b a) \\n\\t\\tb\\n\\t\\ta\\n\\t)\\n)\\n\\n(define (resta a b)\\n\\t(if(= (mayor a b) a)\\n\\t\\t(- a b)\\n\\t\\t-1\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define a 0)(define b 0)\\n\\t(printf \\"Resta de numeros positivos.\\\\nPrimer Numero: \\")\\n\\t(set! a (read))\\n\\t(printf \\"Segundo Numero: \\")\\n\\t(set! b (read))\\n\\t(if(= (resta a b) -1)\\n\\t\\t(printf \\"\\\\n*El segundo numero no puede ser mas grande que el primero.\\")\\n\\t\\t(printf \\"\\\\nLa resta entre los numeros ingresados es: ~a\\" (resta a b))\\n\\t)\\n)\\n\\n(main)"},"3":{"codigo":";Realizar la implementaci\xf3n con funciones en Racket de un programa que\\n;lea una fecha dada por el usuario y se compruebe si el dia y mes estan \\n;bien escritos y luego imprima el mes en palabras.\\n(define (mes_palabras mes)\\n\\t(cond \\n\\t\\t((= mes 1) (printf \\"Enero\\"))\\n\\t\\t((= mes 2) (printf \\"Febrero\\"))\\n\\t\\t((= mes 3) (printf \\"Marzo\\"))\\n\\t\\t((= mes 4) (printf \\"Abril\\"))\\n\\t\\t((= mes 5) (printf \\"Mayo\\"))\\n\\t\\t((= mes 6) (printf \\"Junio\\"))\\n\\t\\t((= mes 7) (printf \\"Julio\\"))\\n\\t\\t((= mes 8) (printf \\"Agosto\\"))\\n\\t\\t((= mes 9) (printf \\"Septiembre\\"))\\n\\t\\t((= mes 10) (printf \\"Octubre\\"))\\n\\t\\t((= mes 11) (printf \\"Noviembre\\"))\\n\\t\\t((= mes 12) (printf \\"Diciembre\\"))\\n\\t)\\n)\\n\\n(define (comprobar dia mes)\\n\\t(if (and (and (> dia 0) (< dia 32)) (and (> mes 0) (< mes 13)))\\n\\t\\t(begin\\n\\t\\t\\t(mes_palabras mes)\\n\\t\\t\\t1\\n\\t\\t)\\n\\t\\t0\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define d 0)(define m 0)(define a 0)\\n\\t(printf \\"Dia: \\")\\n\\t(set! d (read))\\n\\t(printf \\"\\\\nMes: \\")\\n\\t(set! m (read))\\n\\t(if(= (comprobar d m) 1)\\n\\t\\t(printf \\"\\\\nLA FECHA ESTA CORRECTAMENTE ESCRITA. \\")\\n\\t\\t(printf \\"\\\\nLA FECHA ESTA INCORRECTA. \\")\\n\\t)\\n)\\n\\n(main)"},"4":{"codigo":";Crear un programa que permita realizar la contabilidad al vender\\n;un producto. El programa debe tener dos funciones anidadas, una que \\n;multiplique la cantidad total y otra que aplique el descuento.\\n(define (descuento valor_cantidad descuento)\\n\\t(define total 0)\\n\\t(if(and (> valor_cantidad 0) (> descuento 0))\\n\\t\\t(set! total (* valor_cantidad (/ (- 100 descuento) 100)))\\n\\t)\\n\\ttotal\\n)\\n\\n(define (cantidad precio cantidad desc)\\n\\t(define valor 0)\\n\\t(set! valor (* precio cantidad))\\n\\t(descuento valor desc)\\n)\\n\\n(define (main)\\n\\t(define precio 0)(define desc 0)(define  cant 0) \\n\\t(printf \\"Ingrese el precio del producto: \\")\\n\\t(set! precio (read))\\n\\t(printf \\"Ingrese la cantidad del producto: \\")\\n\\t(set! cant (read))\\n\\t(printf \\"Ingrese el descuento en porcentaje para el producto: \\")\\n\\t(set! desc (read))\\n\\t(printf \\"\\\\nEl precio final es: ~a\\" (cantidad precio cant desc))\\n)\\n\\n(main)"},"5":{"codigo":";Cree una funci\xf3n recursiva que permita calcular el minimo com\xfan \\n;multiplo entre dos numeros. Nota: Se puede usar el maximo comun \\n;entre los dos n\xfameros. Se aplica el concepto de funciones anidadas.\\n(define (maximo_comun_divisor a b)\\n\\t(define temporal 0)\\n\\t(while (not (= b 0))\\n\\t\\t(set! temporal b)\\n\\t\\t(set! b (remainder a b)\\n\\t\\t(set! a temporal)\\n\\t)\\n\\ta\\n)\\n\\n(define minimo_comun_multiplo(int a, int b)\\n\\t(/ (a * b) (maximo_comun_divisor a b))\\n)\\n\\n(define (main) \\n\\t(define a 0)(define b 0)\\n\\t(printf \\"Ingrese el numero a: \\")\\n\\t(set! a (read))\\n\\t(printf \\"\\\\nIngrese el numero b: \\")\\n\\t(set! b (read))\\n\\t(define mcm (minimo_comun_multiplo a b)\\n\\t(printf \\"\\\\nMCM de ~a y ~a = ~a\\\\n\\" a b mcm)\\n)\\n\\n(main)"},"6":{"codigo":";Haga un programa en Racket que use dos funciones recursivas anidadas\\n;para calcular la n-esima potencia de un n\xfamero dado por el usuario.\\n(define (multi a b)\\n\\t(if(or (= a 0) (= b 0))\\n\\t\\t0\\n\\t\\t(+ a (multi a (- b 1)))\\n\\t)\\n)\\n\\n(define (potencia base exp)\\n\\t(define res 0)\\n\\t(if (= exp 0)\\n\\t\\t(set! res 1.0)\\n\\t\\t(if (> exp 0)\\n\\t\\t\\t(set! res (multi base (potencia base (- exp 1))))\\n\\t\\t\\t(set! res (/ 1.0 (multi base (potencia base (+ exp 1)))))\\n\\t\\t)\\n\\t)\\n\\tres\\n)\\n\\n(define (main)\\n\\t(define base 0)(define exp 0)\\n\\t(printf \\"Base: \\")\\n\\t(set! base (read))\\n\\t(printf \\"Exponente: \\")\\n\\t(set! exp (read))\\n\\t(printf \\"POTENCIA: ~a\\" (potencia base exp))\\n)\\n\\n(main)"},"1b":{"codigo":"/*Crear un programa en c que capture una letra y y devuelva la \\nletra siguiente. Nota: Use el codigo ASCII, use dos funciones, \\nuna para comprobar el valor de la letra, y otra para aumentar \\ndicho valor*/\\n#include <stdio.h>\\nint ASCII(char letra){\\n\\treturn letra;\\n}\\n\\nint aumentar(char letra){\\n\\tint valor;\\n\\tvalor=ASCII(letra);\\n\\tif(valor==90){\\n\\t\\treturn 65;\\n\\t}else if(valor==122){\\n\\t\\treturn 97;\\n\\t}else return valor+1;\\n}\\n\\nint main(){\\n\\tchar letra;\\n\\tprintf(\\"Ingrese una letra: \\");\\n\\tscanf(\\"%c\\", &letra);\\n\\tprintf(\\"\\\\n\\\\nLa siguiente letra es: %c\\", aumentar(letra));\\n}"},"2b":{"codigo":"/*Cree un programa en c que realice una resta de enteros con la\\ncondici\xf3n de que el resultado de positivo, use funciones anidadas.*/\\n#include <stdio.h>\\nint mayor(int a, int b){\\n\\tif(b>a) return b;\\n\\telse return a;\\n}\\n\\nint resta(int a, int b){\\n\\tif(mayor(a,b)==a){\\n\\t\\treturn a-b;\\n\\t}else return -1;\\n}\\n\\nint main(){\\n\\tint a, b;\\n\\tprintf(\\"Resta de numeros positivos.\\\\nPrimer Numero: \\");\\n\\tscanf(\\"%d\\", &a);\\n\\tprintf(\\"Segundo Numero: \\");\\n\\tscanf(\\"%d\\", &b);\\n\\tif(resta(a,b)==-1){\\n\\t\\tprintf(\\"\\\\n\\\\n*El segundo numero no puede ser mas grande que el primero. \\");\\n\\t}else printf(\\"\\\\n\\\\nLa resta entre los numeros ingresados es: %d\\", resta(a,b));\\n}"},"3b":{"codigo":"/*Realizar la implementaci\xf3n con funciones en c de un programa que\\nlea una fecha dada por el usuario y se compruebe si el dia y mes \\nestan bien escritos y luego imprima el mes en palabras.*/\\n#include <stdio.h>\\nvoid mes_palabras(int mes){\\n\\tswitch(mes){\\n\\t\\t\\tcase 1: printf(\\"Enero\\");break;\\n\\t\\t\\tcase 2: printf(\\"Febrero\\");break;\\n\\t\\t\\tcase 3: printf(\\"Marzo\\");break;\\n\\t\\t\\tcase 4: printf(\\"Abril\\");break;\\n\\t\\t\\tcase 5: printf(\\"Mayo\\");break;\\n\\t\\t\\tcase 6: printf(\\"Junio\\");break;\\n\\t\\t\\tcase 7: printf(\\"Julio\\");break;\\n\\t\\t\\tcase 8: printf(\\"Agosto\\");break;\\n\\t\\t\\tcase 9: printf(\\"Septiembre\\");break;\\n\\t\\t\\tcase 10: printf(\\"Octubre\\");break;\\n\\t\\t\\tcase 11: printf(\\"Noviembre\\");break;\\n\\t\\t\\tcase 12: printf(\\"Diciembre\\");break;\\n\\t}\\n}\\n\\nint comprobar(int dia, int mes){\\n\\tif(dia>=1 && dia<=31 && mes>=1 && mes<=12){\\n\\t\\tmes_palabras(mes);\\n\\t\\treturn 1;\\n\\t}else return 0;\\n}\\n\\nint main(){\\n\\tint d,m,a;\\n\\tprintf(\\"Dia: \\");\\n\\tscanf(\\"%d\\", &d);\\n\\tprintf(\\"\\\\nMes: \\");\\n\\tscanf(\\"%d\\", &m);\\n\\tif(comprobar(d, m) == 1){\\n\\t\\tprintf(\\"\\\\nLA FECHA ESTA CORRECTAMENTE ESCRITA. \\");\\n\\t}else printf(\\"\\\\nLA FECHA ESTA INCORRECTA. \\");\\n}"},"4b":{"codigo":"/*Crear un programa que permita realizar la contabilidad al vender\\nun producto. El programa debe tener dos funciones anidadas, una que \\nmultiplique la cantidad total y otra que aplique el descuento.*/\\n#include <stdio.h>\\nfloat descuento(float valor_cantidad, float descuento){\\n\\tfloat total=0;\\n\\tif(valor_cantidad>0 && descuento>0){\\n\\t\\ttotal=valor_cantidad*((100-descuento)/100);\\n\\t}\\n\\treturn total;\\n}\\n\\nfloat cantidad(float precio, float cantidad, float desc){\\n\\tfloat valor=0;\\n\\tvalor=precio*cantidad;\\n\\treturn descuento(valor, desc);\\n}\\n\\nint main(){\\n\\tfloat precio=0, desc=0, cant=0;\\n\\tprintf(\\"Ingrese el precio del producto: \\");\\n\\tscanf(\\"%f\\", &precio);\\n\\tprintf(\\"Ingrese la cantidad del producto: \\");\\n\\tscanf(\\"%f\\", &cant);\\n\\tprintf(\\"Ingrese el descuento en porcentaje para el producto: \\");\\n\\tscanf(\\"%f\\", &desc);\\n\\tprintf(\\"\\\\nEl precio final es: %.2f\\", cantidad(precio, cant, desc));\\n}"},"5b":{"codigo":"/*Cree una funci\xf3n recursiva que permita calcular el minimo com\xfan \\nmultiplo entre dos numeros. Nota: Se puede usar el maximo comun \\nentre los dos n\xfameros. Se aplica el concepto de funciones anidadas.*/\\n#include <stdio.h>\\nint maximo_comun_divisor(int a, int b){\\n\\tint temporal;\\n\\twhile (b != 0) {\\n\\t\\ttemporal = b;\\n\\t\\tb = a % b;\\n\\t\\ta = temporal;\\n\\t}\\n\\treturn a;\\n}\\n\\nint minimo_comun_multiplo(int a, int b){\\n\\treturn (a * b) / maximo_comun_divisor(a, b);\\n}\\n\\nint main(void) {\\n\\tint a,b;\\n\\tprintf(\\"Ingrese el numero a: \\");\\n\\tscanf(\\"%d\\", &a);\\n\\tprintf(\\"\\\\nIngrese el numero b: \\");\\n\\tscanf(\\"%d\\", &b);\\n\\tint mcm = minimo_comun_multiplo(a, b);\\n\\tprintf(\\"\\\\n\\\\nMCM de %d y %d = %d\\\\n\\", a, b, mcm);\\n}"},"6b":{"codigo":"/*Haga un programa en C que use dos funciones recursivas anidadas \\npara calcular la n-esima potencia de un n\xfamero dado por el usuario.*/\\n#include <stdio.h>\\nfloat multi(float a, float b){\\n\\tif(a==0 || b==0)\\n\\t\\treturn 0;\\n\\telse{\\n\\t\\treturn a+multi(a,b-1);\\n\\t}\\n}\\n\\nfloat potencia(float base, int exp){\\n\\tfloat res;\\n\\tif (exp == 0)\\n\\t\\tres=1.0;\\n\\telse if (exp > 0){\\n\\t\\tres=multi(base,potencia(base,exp - 1));\\n\\t}\\n\\telse if (exp < 0){\\n\\t\\tres=1.0/multi(base,potencia(base,exp + 1));\\n\\t}\\n\\treturn res;\\n}\\n\\nint main(){\\n\\tint base, exp;\\n\\tprintf(\\"Base: \\");\\n\\tscanf(\\"%d\\", &base);\\n\\tprintf(\\"Exponente: \\");\\n\\tscanf(\\"%d\\", &exp);\\n\\tprintf(\\"POTENCIA: %f\\", potencia(base, exp));\\n}"}},"procedimientos":{"1":{"codigo":";Implemente un procedimiento que reciba un numero e imprima\\n;si el numero es positivo o negativo, en caso de ser positivo\\n;debe analizar si es par o impar.\\n(define (analisis n)\\n\\t(if (> n 0)\\n\\t\\t(begin\\n\\t\\t\\t(printf \\"\\\\nEl numero ingresado es positivo.\\")\\n\\t\\t\\t(if (= (remainder n 2) 0)\\n\\t\\t\\t\\t(printf \\"\\\\nAdemas el numero es par.\\")\\n\\t\\t\\t\\t(printf \\"\\\\nAdemas el numero es impar.\\")\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t(printf \\"\\\\nEl numero ingresado es Negativo.\\")\\n\\t)\\n\\n)\\n\\n(define (main)\\n\\t(define numero 0)\\n\\n\\t(printf \\"Ingrese un numero para analizar: \\")\\n\\t(set! numero (read))\\n\\t(analisis numero)\\n)\\n\\n(main)"},"2":{"codigo":";Implemente un procedimiento que dado un numero imprima en\\n;palabrasel mes del a\xf1o correspondiente.\\n(define (mes_palabras mes)\\n\\t(cond\\n\\t\\t((= mes 1) (printf \\"Enero\\"))\\n\\t\\t((= mes 2) (printf \\"Febrero\\"))\\n\\t\\t((= mes 3) (printf \\"Marzo\\"))\\n\\t\\t((= mes 4) (printf \\"Abril\\"))\\n\\t\\t((= mes 5) (printf \\"Mayo\\"))\\n\\t\\t((= mes 6) (printf \\"Junio\\"))\\n\\t\\t((= mes 7) (printf \\"Julio\\"))\\n\\t\\t((= mes 8) (printf \\"Agosto\\"))\\n\\t\\t((= mes 9) (printf \\"Septiembre\\"))\\n\\t\\t((= mes 10) (printf \\"Octubre\\"))\\n\\t\\t((= mes 11) (printf \\"Noviembre\\"))\\n\\t\\t((= mes 12) (printf \\"Diciembre\\"))\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define mes 0)\\n\\t(do ((i 1 (+ i 1))) ((and (> mes 0)(< mes 13)))\\n\\t\\t(printf \\"\\\\nIngrese un numero: \\")\\n\\t\\t(set! mes (read))\\n\\t\\t(mes_palabras mes)\\n\\t)\\n)\\n\\n(main)"},"3":{"codigo":";Crear un programa en Racket que contenga un procedimiento que\\n;imprima un cuadrado de acuerdo a un caracter que se le\\n;entrega junto con el tama\xf1o de los lados de este.\\n(define (cuadrado c lado)\\n\\t(for ([i (in-range 0 lado 1)])\\n\\t\\t(for ([j (in-range 0 lado 1)])\\n\\t\\t\\t(printf \\"~a \\" c)\\n\\t\\t)\\n\\t\\t(printf \\"\\\\n\\")\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define c 0)\\n\\t(define lado 0)\\n\\t(printf \\"Ingrese un caracter para imprimir: \\")\\n\\t(set! c (read))\\n\\t(printf \\"Ingrese el tamano de los lados del cuadrado: \\")\\n\\t(set! lado (read))\\n\\t(cuadrado c lado)\\n)\\n\\n(main)"},"4":{"codigo":";Cree un programa que reciba una fecha (dia, mes y a\xf1o) en\\n;variables separadas, luego implemente un procedimiento que\\n;muestre la fecha siguiente.\\n(define (fecha_siguiente dia mes anio)\\n\\t(printf \\"\\\\n\\\\n***FECHA SIGUIENTE:***\\\\n\\")\\n\\t(if (dia>0 && dia<=31 && mes>0 && mes<=12)\\n\\t\\t(if (and (= dia 31)  (= mes 12))\\n\\t\\t\\t(begin\\n\\t\\t\\t\\t(set! dia 1)\\n\\t\\t\\t\\t(set! mes 1)\\n\\t\\t\\t\\t(set! anio (+ anio 1))\\n\\t\\t\\t\\t(printf \\"[~a/~a/~a]\\" dia mes anio)\\n\\t\\t\\t)\\n\\t\\t\\t(if (= dia 31)\\n\\t\\t\\t\\t(begin \\n\\t\\t\\t\\t\\t(set! dia 1)\\n\\t\\t\\t\\t\\t(set! mes (+ mes 1))\\n\\t\\t\\t\\t\\t(printf \\"[~a/~a/~a]\\" dia mes anio)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t(begin\\n\\t\\t\\t\\t\\t(set! dia (+ dia 1))\\n\\t\\t\\t\\t\\t(printf \\"[~a/~a/~a]\\" dia mes anio)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t(printf \\"\\\\n***FECHA INVALIDA***\\")\\n\\t)\\n)\\n\\n(define (main)\\n\\t(define d 0)(define m 0)(define a 0)\\n\\t(printf \\"Ingrese una fecha.\\\\nDia: \\")\\n\\t(set! d (read))\\n\\t(printf \\"Mes: \\")\\n\\t(set! m (read))\\n\\t(printf \\"Anio: \\")\\n\\t(set! a (read))\\n\\t(fecha_siguiente d m a)\\n)\\n\\n(main)"},"5":{"codigo":";Cree un programa en c que tenga los procedimientos basicos \\n;relacionados con vectores, llenar e imprimir un vector.\\n(define (imprimir_vector vec tam)\\n\\t(printf \\"\\\\n***EL VECTOR ES: ***\\\\n\\")\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(printf \\"~a \\" (vector-ref vect i))\\n\\t)\\n)\\n\\n(define (llenar_vector vect tam)\\n\\t(define num 0)\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(printf \\"\\\\nPosicion ~a: \\" i+1)\\n\\t\\t(set! num (read))\\n\\t\\t(vector-set! vect i num)\\n\\t)\\n\\t(imprimir_vector vect tam)\\n)\\n\\n(define (main)\\n\\t(define tam 0)\\n\\t(printf \\"Ingrese un tamano para el vector: \\")\\n\\t(set! tam (read))\\n\\t(define vect (make-vector tam 0))\\n\\t(llenar_vector vect tam)\\n)\\n\\n(main)"},"6":{"codigo":";Con base al anterior programa, cree un procedimiento que\\n;ordene de manera ascendente los valores de un vector de N\\n;enteros dado por el usuario.\\n(define (imprimir_vector vec tam)\\n\\t(printf \\"\\\\n***EL VECTOR ES: ***\\\\n\\")\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(printf \\"~a \\" (vector-ref vect i))\\n\\t)\\n)\\n\\n(define (ordenar_vector vect tam)\\n\\t(define temp 0)\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(for ([j (in-range 0 tam 1)])\\n\\t\\t\\t(if (< (vector-ref vect j) (vector-ref vect i))\\n\\t\\t\\t\\t(begin\\n\\t\\t\\t\\t\\t(set! temp (vector-ref vect j))\\n\\t\\t\\t\\t\\t(vector-set! vect j (vector-ref vect i))\\n\\t\\t\\t\\t\\t(vector-set! vect i temp)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t(void)\\n\\t\\t\\t)\\n\\t\\t)\\n\\t)\\n\\t(imprimir_vector vect tam)\\n)\\n\\n(define (llenar_vector vect tam)\\n\\t(define num 0)\\n\\t(for ([i (in-range 0 tam 1)])\\n\\t\\t(printf \\"\\\\nPosicion ~a: \\" i+1)\\n\\t\\t(set! num (read))\\n\\t\\t(vector-set! vect i num)\\n\\t)\\n\\t(imprimir_vector vect tam)\\n\\t(ordenar_vector vect tam)\\n)\\n\\n(define (main)\\n\\t(define tam 0)\\n\\t(printf \\"Ingrese un tamano para el vector: \\")\\n\\t(set! tam (read))\\n\\t(define vect (make-vector tam 0))\\n\\t(llenar_vector vect tam)\\n)\\n\\n(main)"},"1b":{"codigo":"/*Implemente un procedimiento que reciba un numero e imprima\\nsi el numero es positivo o negativo, en caso de ser positivo\\ndebe analizar si es par o impar.*/\\n#include <stdio.h>\\nvoid analisis(int n){\\n\\tif(n>0){\\n\\t\\tprintf(\\"\\\\nEl numero ingresado es positivo.\\");\\n\\t\\tif(n%2==0){ \\n\\t\\t\\tprintf(\\"\\\\nAdemas el numero es par.\\");\\n\\t\\t}else {\\n\\t\\t\\tprintf(\\"\\\\nAdemas el numero es impar.\\");\\n\\t\\t}\\n\\t}else printf(\\"\\\\nEl numero ingresado es Negativo.\\");\\n}\\n\\nint main(){\\n\\tint numero;\\n\\tprintf(\\"Ingrese un numero para analizar: \\");\\n\\tscanf(\\"%d\\", &numero);\\n\\tanalisis(numero);\\n}"},"2b":{"codigo":"/*Implemente un procedimiento que dado un numero imprima en\\npalabrasel mes del a\xf1o correspondiente.*/\\n#include <stdio.h>\\nvoid mes_palabras(int mes){\\n\\tswitch(mes){\\n\\t\\tcase 1: printf(\\"Enero\\");break;\\n\\t\\tcase 2: printf(\\"Febrero\\");break;\\n\\t\\tcase 3: printf(\\"Marzo\\");break;\\n\\t\\tcase 4: printf(\\"Abril\\");break;\\n\\t\\tcase 5: printf(\\"Mayo\\");break;\\n\\t\\tcase 6: printf(\\"Junio\\");break;\\n\\t\\tcase 7: printf(\\"Julio\\");break;\\n\\t\\tcase 8: printf(\\"Agosto\\");break;\\n\\t\\tcase 9: printf(\\"Septiembre\\");break;\\n\\t\\tcase 10: printf(\\"Octubre\\");break;\\n\\t\\tcase 11: printf(\\"Noviembre\\");break;\\n\\t\\tcase 12: printf(\\"Diciembre\\");break;\\n\\t}\\n}\\n\\nint main(){\\n\\tint mes;\\n\\tdo{\\n\\t\\tprintf(\\"\\\\nIngrese un numero: \\");\\n\\t\\tscanf(\\"%d\\", &mes);\\n\\t\\tmes_palabras(mes);\\n\\t}while(mes>0 && mes<=12);\\n}"},"3b":{"codigo":"/*Crear un programa en C que contenga un procedimiento que\\nimprima un cuadrado de acuerdo a un caracter que se le \\nentrega junto con el tama\xf1o de los lados de este.*/\\n#include <stdio.h>\\nvoid cuadrado(char c, int lado){\\n\\tint i, j;\\n\\tfor(i=0; i<lado; i++){\\n\\t\\tfor(j=0; j<lado; j++){\\n\\t\\t\\tprintf(\\"%c\\", c);\\n\\t\\t}\\n\\t\\tprintf(\\"\\\\n\\");\\n\\t}\\n}\\n\\nint main(){\\n\\tchar c;\\n\\tint lado;\\n\\tprintf(\\"Ingrese un caracter para imprimir: \\");\\n\\tscanf(\\"%c\\", &c);\\n\\tprintf(\\"Ingrese el tamano de los lados del cuadrado: \\");\\n\\tscanf(\\"%d\\", &lado);\\n\\tcuadrado(c, lado);\\n}"},"4b":{"codigo":"/*Cree un programa que reciba una fecha (dia, mes y a\xf1o) en\\nvariables separadas, luego implemente un procedimiento que \\nmuestre la fecha siguiente.*/\\n#include <stdio.h>\\nvoid fecha_siguiente(int dia, int mes, int anio){\\n\\tprintf(\\"\\\\n\\\\n***FECHA SIGUIENTE:***\\\\n\\");\\n\\tif(dia>0 && dia<=31 && mes>0 && mes<=12){\\n\\t\\tif(dia==31 && mes==12){\\n\\t\\t\\tdia=1;\\n\\t\\t\\tmes=1;\\n\\t\\t\\tanio=anio+1;\\n\\t\\t\\tprintf(\\"[%d/%d/%d]\\", dia, mes, anio);\\n\\t\\t}else if(dia==31){\\n\\t\\t\\tdia=1;\\n\\t\\t\\tmes=mes+1;\\n\\t\\t\\tprintf(\\"[%d/%d/%d]\\", dia, mes, anio);\\n\\t\\t}else{\\n\\t\\t\\tdia=dia+1;\\n\\t\\t\\tprintf(\\"[%d/%d/%d]\\", dia, mes, anio);\\n\\t\\t}\\n\\t}else printf(\\"\\\\n\\\\n***FECHA INVALIDA***\\");\\n}\\n\\nint main(){\\n\\tint d, m, a;\\n\\tprintf(\\"Ingrese una fecha.\\\\nDia: \\");\\n\\tscanf(\\"%d\\", &d);\\n\\tprintf(\\"Mes: \\");\\n\\tscanf(\\"%d\\", &m);\\n\\tprintf(\\"Anio: \\");\\n\\tscanf(\\"%d\\", &a);\\n\\tfecha_siguiente(d,m,a);\\n}"},"5b":{"codigo":"/*Cree un programa en c que tenga los procedimientos basicos \\nrelacionados con vectores, llenar e imprimir un vector.*/\\n#include <stdio.h>\\nvoid imprimir_vector(int vector[], int tamano){\\n\\tprintf(\\"\\\\n\\\\n***EL VECTOR ES: ***\\\\n\\");\\n\\tfor(int i=0; i<tamano; i++){\\n\\t\\tprintf(\\"%d \\", vector[i]);\\n\\t}\\n}\\n\\nvoid llenar_vector(int vector[], int tamano){\\n\\tint num;\\n\\tfor(int i=0; i<tamano; i++){\\n\\t\\tprintf(\\"\\\\nPosicion %d :\\", i+1);\\n\\t\\tscanf(\\"%d\\", &num);\\n\\t\\tvector[i]=num;\\n\\t}\\n\\timprimir_vector(vector, tamano);\\n}\\n\\nint main(){\\n\\tint tamano;\\n\\tprintf(\\"Ingrese un tamano para el vector: \\");\\n\\tscanf(\\"%d\\", &tamano);\\n\\tint vector[tamano];\\n\\tllenar_vector(vector, tamano);\\n}"},"6b":{"codigo":"/*Con base al anterior programa, cree un procedimiento que \\nordene de manera ascendente los valores de un vector de N \\nenteros dado por el usuario.*/\\n#include <stdio.h>\\nvoid imprimir_vector(int vector[], int tamano){\\n\\tprintf(\\"\\\\n\\\\n***EL VECTOR ES: ***\\\\n\\");\\n\\tfor(int i=0; i<tamano; i++){\\n\\t\\tprintf(\\"%d\\", vector[i]);\\n\\t}\\n}\\n\\nvoid ordenar_vector(int vector[], int tamano){\\n\\tint i, j, temp;\\n\\tfor (i=0; i<(tamano-1); i++){\\n\\t\\tfor (j=i+1; j<tamano; j++){\\n\\t\\t\\tif (vector[j]<vector[i]){\\n\\t\\t\\t\\ttemp=vector[j];\\n\\t\\t\\t\\tvector[j]=vector[i];\\n\\t\\t\\t\\tvector[i]=temp;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\timprimir_vector(vector, tamano);\\n}\\n\\nvoid llenar_vector(int vector[], int tamano){\\n\\tint num;\\n\\tfor(int i=0; i<tamano; i++){\\n\\t\\tprintf(\\"\\\\nPosicion %d: \\", i+1);\\n\\t\\tscanf(\\"%d\\", &num);\\n\\t\\tvector[i]=num;\\n\\t}\\n\\timprimir_vector(vector, tamano);\\n\\tordenar_vector(vector, tamano);\\n}\\n\\nint main(){\\n\\tint tamano;\\n\\tprintf(\\"Ingrese un tamano para el vector: \\");\\n\\tscanf(\\"%d\\", &tamano);\\n\\tint vector[tamano];\\n\\tllenar_vector(vector, tamano);\\n}"}}}]')},366:function(e){e.exports=JSON.parse('[{"expresiones":{"1":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Constantes\\n\\tAsignaci\xf3n\\n\\tLectura y Escritura por consola","2":"\\t\\t\\tRACKET\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: ;Esto es un comentario\\nO pueden ser de varias lineas: \\n#| Comentario\\nVarias\\nLineas |#\\n\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: //Esto es un comentario\\n O de varias lineas: \\n/* Comentario\\nVarias\\nLineas */\\n\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"2":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Constantes\\n\\tAsignaci\xf3n\\n\\tLectura y Escritura por consola","2":"\\t\\t\\tRACKET\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: ;Esto es un comentario\\nO pueden ser de varias lineas: \\n#| Comentario\\nVarias\\nLineas |#\\n\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: //Esto es un comentario\\n O de varias lineas: \\n/* Comentario\\nVarias\\nLineas */\\n\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"3":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Constantes\\n\\tAsignaci\xf3n\\n\\tLectura y Escritura por consola","2":"\\t\\t\\tRACKET\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: ;Esto es un comentario\\nO pueden ser de varias lineas: \\n#| Comentario\\nVarias\\nLineas |#\\n\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: //Esto es un comentario\\n O de varias lineas: \\n/* Comentario\\nVarias\\nLineas */\\n\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"4":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Constantes\\n\\tAsignaci\xf3n\\n\\tLectura y Escritura por consola","2":"\\t\\t\\tRACKET\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: ;Esto es un comentario\\nO pueden ser de varias lineas: \\n#| Comentario\\nVarias\\nLineas |#\\n\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: //Esto es un comentario\\n O de varias lineas: \\n/* Comentario\\nVarias\\nLineas */\\n\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"5":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Constantes\\n\\tAsignaci\xf3n\\n\\tLectura y Escritura por consola","2":"\\t\\t\\tRACKET\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: ;Esto es un comentario\\nO pueden ser de varias lineas: \\n#| Comentario\\nVarias\\nLineas |#\\n\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: //Esto es un comentario\\n O de varias lineas: \\n/* Comentario\\nVarias\\nLineas */\\n\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"6":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Constantes\\n\\tAsignaci\xf3n\\n\\tLectura y Escritura por consola","2":"\\t\\t\\tRACKET\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: ;Esto es un comentario\\nO pueden ser de varias lineas: \\n#| Comentario\\nVarias\\nLineas |#\\n\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nCOMENTARIOS:\\nLos comentarios pueden ser de una sola linea escribiendo: //Esto es un comentario\\n O de varias lineas: \\n/* Comentario\\nVarias\\nLineas */\\n\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "}},"secuencia":{"1":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Variables\\n\\tUso de Operadores","2":"\\t\\t\\tRACKET\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!","3":"\\t\\t\\tC\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual ="},"2":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Variables\\n\\tUso de Operadores\\n\\tImpresi\xf3n por Consola","2":"\\t\\t\\tRACKET\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)","3":"\\t\\t\\tC\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);"},"3":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Variables\\n\\tUso de Operadores\\n\\tImpresi\xf3n por Consola\\n\\tLectura por consola","2":"\\t\\t\\tRACKET\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"4":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Variables\\n\\tUso de Operadores\\n\\tImpresi\xf3n por Consola\\n\\tLectura por consola","2":"\\t\\t\\tRACKET\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"5":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Variables\\n\\tUso de Operadores\\n\\tImpresi\xf3n por Consola\\n\\tLectura por consola","2":"\\t\\t\\tRACKET\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "},"6":{"1":"En este ejemplo se usa:\\n\\tExpresiones\\n\\tDefinici\xf3n de Variables\\n\\tUso de Operadores\\n\\tImpresi\xf3n por Consola\\n\\tLectura por consola","2":"\\t\\t\\tRACKET\\nEXPRESIONES:\\nLas expresiones en racket se escriben entre par\xe9ntesis en modo PreOrden, lo que significa que se recorre la raiz, luego el nodo izquiero y luego el derecho, es decir, si tenemos la suma: 2+3, sint\xe1cticamente se escribir\xeda:\\n\\t (+ 2 3)\\n\\nOPERADORES:\\nEn Racket Los operadores se escriben al igual que las expresiones, en Pre-Orden\\nPara la asignaci\xf3n, re-asignaci\xf3n o reemplazar el valor de una variable se usa la palabra reservada set!\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en Racket, se usa la palabra reservada printf y entre comillas dobles se escribe el mensaje. Si se desea imprimir una variable se usa el simbolo: ~a\\nSe escribe dentro de los simbolos y el nombre de la variable a imprimir se escribe luego de los simbolos.\\nSint\xe1cticamente: Si tenemos una variable: numero\\nSe imprime de este modo:\\n\\n(printf \\"La variable es ~a\\" numero)\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en racket, se usa la palabra reservada del lenguaje: read, escrita entre parentesis. \\nSe usa en el momento en que se llama a una funci\xf3n, y reemplaza el nombre de la variable por (read) un dato que entra por consola.\\nSint\xe1cticamente:\\nSi tenemos una funci\xf3n (define(comparar (numero1 numero2))\\n\\tBloque de Instrucciones)\\n\\nEl llamado a la funci\xf3n seria: (comparar (read) (read))","3":"\\t\\t\\tC\\nEXPRESIONES:\\nLas expresiones constan de operadores y operandos, estos pueden ser: \\n\\tAritm\xe9ticos\\n\\tL\xf3gicos\\n\\tRelacionales\\nEn el caso de los operadores ar\xedtmeticos se escriben en InOrden, es decir en el orden que normalmente se trabaja a nivel matem\xe1tico.\\n\\nOPERADORES:\\nEn C hay tres tipos de operadores, aritm\xe9ticos, l\xf3gicos y relacionales los cuales se escriben en In-Orden.\\nPara la asignaci\xf3n de un dato a una variable se usa el simbolo de igual =\\n\\nIMPRIMIR POR CONSOLA:\\nPara imprimir datos por consola en C se usa la palabra reservada printf, funci\xf3n de la libreria stdio.h (Tambi\xe9n scanf, para leer datos).\\nSe escribe entre comillas dobles el mensaje a mostrar. Si se desea mostrar el valor de una variable se escribe dentro de las comillas el simbolo \'%\' con la letra que identifica al tipo de dato, luego de las comillas y separado por coma \',\' se escribe el nombre de la variable a imprimir.\\nSint\xe1cticamente: Si se tiene un variable de tipo entero: \\nint variable=5;\\n\\nSe imprime del siguiente modo:\\nprintf(\\"La variable es: %d\\", variable);\\n\\nLEER POR CONSOLA:\\nPara leer datos por consola en C hay que tener en cuenta el tipo de dato que se quiere recoger, se usa la palabra reservada scanf junto con los simbolos \'%\' y \'&\'. \\nSe escribe el tipo de dato al lado del porcentaje, ambos deben estar entre comillas doble.\\nEl nombre de la variable donde se almacenar\xe1 el valor debe aparecer precedida de el simbolo ampersan, ambos luego de una coma.\\nSint\xe1cticamente:\\nSi tenemos una variable de tipo entero:\\nint variable;\\n\\nLeemos un valor para dicha variable as\xed: scanf(\\"%d\\", &variable);  "}},"condicionales":{"1":{"1":"En este ejemplo se usa:\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"2":{"1":"En este ejemplo se usa:\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"3":{"1":"En este ejemplo se usa:\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"4":{"1":"En este ejemplo se usa:\\n\\tCondicional M\xfaltiple: COND/SWITCH-CASE","2":"\\t\\t\\tRACKET\\nSELECCI\xd3N M\xdaLTIPLE:\\nPara las selecciones m\xfaltiples se usa la palabra reservada COND y se analizan distintas opciones escritas entre parentesis, dentro de cada posible opci\xf3n se hace una comparaci\xf3n y si esta es verdadera se ejecuta la instrucci\xf3n continua. Si ninguna condici\xf3n se cumple se puede colocar una opci\xf3n por defecto con la palabra de reservada: else.\\n\\nSint\xe1cticamnete: ( COND\\n\\t[(= opcion 1)(Instrucciones para opci\xf3n 1)] \\n\\t[(= opcion 2)(Instrucciones para opci\xf3n 2)]\\n\\t[else (Instrucciones por defecto)] )","3":"\\t\\t\\tC\\nSELECCI\xd3N M\xdaLTIPLE:\\nPara seleccionar de manera m\xfaltiple se usa el switch-Case, dos palabras reservadas que de acuerdo al valor de una variable analizan n posibilidades distintas, tambi\xe9n existe la posibilidad de asignar instrucciones cuando la variable no toma ningun valor dentro de los posibles casos.\\nCada uno de los casos debe tener la palabra reservada: break para garantizar la salidad de la estructura.\\nSint\xe1cticamente:\\nswitch(variable){\\n\\tCase 1: Opcion1\\n\\tCase 2: Opcion2\\n\\t.\\n\\tCase N: OpcionN\\n\\t.\\n\\tdefault: Opcion_por_defecto\\n}"},"5":{"1":"En este ejemplo se usa:\\n\\tCondicional M\xfaltiple: COND/SWITCH-CASE","2":"\\t\\t\\tRACKET\\nSELECCI\xd3N M\xdaLTIPLE:\\nPara las selecciones m\xfaltiples se usa la palabra reservada COND y se analizan distintas opciones escritas entre parentesis, dentro de cada posible opci\xf3n se hace una comparaci\xf3n y si esta es verdadera se ejecuta la instrucci\xf3n continua. Si ninguna condici\xf3n se cumple se puede colocar una opci\xf3n por defecto con la palabra de reservada: else.\\n\\nSint\xe1cticamnete: ( COND\\n\\t[(= opcion 1)(Instrucciones para opci\xf3n 1)] \\n\\t[(= opcion 2)(Instrucciones para opci\xf3n 2)]\\n\\t[else (Instrucciones por defecto)] )","3":"\\t\\t\\tC\\nSELECCI\xd3N M\xdaLTIPLE:\\nPara seleccionar de manera m\xfaltiple se usa el switch-Case, dos palabras reservadas que de acuerdo al valor de una variable analizan n posibilidades distintas, tambi\xe9n existe la posibilidad de asignar instrucciones cuando la variable no toma ningun valor dentro de los posibles casos.\\nCada uno de los casos debe tener la palabra reservada: break para garantizar la salidad de la estructura.\\nSint\xe1cticamente:\\nswitch(variable){\\n\\tCase 1: Opcion1\\n\\tCase 2: Opcion2\\n\\t.\\n\\tCase N: OpcionN\\n\\t.\\n\\tdefault: Opcion_por_defecto\\n}"},"6":{"1":"En este ejemplo se usa:\\n\\tCondicional M\xfaltiple: COND/SWITCH-CASE\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nSELECCI\xd3N M\xdaLTIPLE:\\nPara las selecciones m\xfaltiples se usa la palabra reservada COND y se analizan distintas opciones escritas entre parentesis, dentro de cada posible opci\xf3n se hace una comparaci\xf3n y si esta es verdadera se ejecuta la instrucci\xf3n continua. Si ninguna condici\xf3n se cumple se puede colocar una opci\xf3n por defecto con la palabra de reservada: else.\\n\\nSint\xe1cticamnete: ( COND\\n\\t[(= opcion 1)(Instrucciones para opci\xf3n 1)] \\n\\t[(= opcion 2)(Instrucciones para opci\xf3n 2)]\\n\\t[else (Instrucciones por defecto)] )\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nSELECCI\xd3N M\xdaLTIPLE:\\nPara seleccionar de manera m\xfaltiple se usa el switch-Case, dos palabras reservadas que de acuerdo al valor de una variable analizan n posibilidades distintas, tambi\xe9n existe la posibilidad de asignar instrucciones cuando la variable no toma ningun valor dentro de los posibles casos.\\nCada uno de los casos debe tener la palabra reservada: break para garantizar la salidad de la estructura.\\nSint\xe1cticamente:\\nswitch(variable){\\n\\tCase 1: Opcion1\\n\\tCase 2: Opcion2\\n\\t.\\n\\tCase N: OpcionN\\n\\t.\\n\\tdefault: Opcion_por_defecto\\n}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"}},"ciclos":{"1":{"1":"En este ejemplo se usa:\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"2":{"1":"En este ejemplo se usa:\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"3":{"1":"En este ejemplo se usa:\\n\\tEstructura de iteraci\xf3n: WHILE\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\n\\nWHILE:\\nLa estructura de iteraci\xf3n while repite un conjunto de instrucciones siempre y cuando una condici\xf3n se cumpla.\\nSint\xe1cticamnete, se escribe entre par\xe9ntesis se escribe la palabra reservada while y luego la condici\xf3n a evaluar. La condici\xf3n como todas las expresiones en racket, se debe escribir en Pre-Orden.\\nAs\xed:\\n(while (< i 1)\\nInstrucciones\\n)\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\n\\nWHILE:\\nLa estructura repetitiva While se usa para repetir un conjunto de instrucciones siempre y cuando una condici\xf3n se cumpla.\\nA nivel se sintaxis se escribe la palabra reservada while y entre par\xe9ntesis la condici\xf3n a evaluar, as\xed:\\nwhile(condicion_de_finalizacion){\\n\\tInstrucciones\\n}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"4":{"1":"En este ejemplo se usa:\\n\\tEstructura de iteraci\xf3n: WHILE","2":"\\t\\t\\tRACKET\\n\\nWHILE:\\nLa estructura de iteraci\xf3n while repite un conjunto de instrucciones siempre y cuando una condici\xf3n se cumpla.\\nSint\xe1cticamnete, se escribe entre par\xe9ntesis se escribe la palabra reservada while y luego la condici\xf3n a evaluar. La condici\xf3n como todas las expresiones en racket, se debe escribir en Pre-Orden.\\nAs\xed:\\n(while (< i 1)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\n\\nWHILE:\\nLa estructura repetitiva While se usa para repetir un conjunto de instrucciones siempre y cuando una condici\xf3n se cumpla.\\nA nivel se sintaxis se escribe la palabra reservada while y entre par\xe9ntesis la condici\xf3n a evaluar, as\xed:\\nwhile(condicion_de_finalizacion){\\n\\tInstrucciones\\n}"},"5":{"1":"En este ejemplo se usa:\\n\\tEstructura de iteraci\xf3n: DO/DO WHILE","2":"\\t\\t\\tRACKET\\nDO:\\nLa estructura repetitiva que ejecuta instrucciones y luego evalua en Racket se define por la palabra reservada do, sint\xe1cticamnete se coloca entre par\xe9ntesis la palabra do y se usa una variable para la cual se establece un inicio, la manera como incrementa y un limite.\\nSint\xe1cticamnete:\\nSea v la variable a iterar: \\n(d (v inicio (+ v incremento)) (< v limite)\\n\\tInstrucciones\\n))","3":"\\t\\t\\tC\\nDO WHILE:\\nEn C, la estructura repetitiva que ejecuta instrucciones y luego evalua se llama do-while. Se usa las palabras reservadas do y while, y entre corchetes se escribe las instrucciones a repetir, se finaliza con ;\\nSint\xe1cticamente:\\ndo{\\n\\tInstrucciones\\n}while(condicion);"},"6":{"1":"En este ejemplo se usa:\\n\\tEstructura de iteraci\xf3n: DO/DO WHILE\\n\\tEstructura de iteraci\xf3n: WHILE","2":"\\t\\t\\tRACKET\\nDO:\\nLa estructura repetitiva que ejecuta instrucciones y luego evalua en Racket se define por la palabra reservada do, sint\xe1cticamnete se coloca entre par\xe9ntesis la palabra do y se usa una variable para la cual se establece un inicio, la manera como incrementa y un limite.\\nSint\xe1cticamnete:\\nSea v la variable a iterar: \\n(d (v inicio (+ v incremento)) (< v limite)\\n\\tInstrucciones\\n))\\n\\nWHILE:\\nLa estructura de iteraci\xf3n while repite un conjunto de instrucciones siempre y cuando una condici\xf3n se cumpla.\\nSint\xe1cticamnete, se escribe entre par\xe9ntesis se escribe la palabra reservada while y luego la condici\xf3n a evaluar. La condici\xf3n como todas las expresiones en racket, se debe escribir en Pre-Orden.\\nAs\xed:\\n(while (< i 1)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nDO WHILE:\\nEn C, la estructura repetitiva que ejecuta instrucciones y luego evalua se llama do-while. Se usa las palabras reservadas do y while, y entre corchetes se escribe las instrucciones a repetir, se finaliza con ;\\nSint\xe1cticamente:\\ndo{\\n\\tInstrucciones\\n}while(condicion);\\n\\nWHILE:\\nLa estructura repetitiva While se usa para repetir un conjunto de instrucciones siempre y cuando una condici\xf3n se cumpla.\\nA nivel se sintaxis se escribe la palabra reservada while y entre par\xe9ntesis la condici\xf3n a evaluar, as\xed:\\nwhile(condicion_de_finalizacion){\\n\\tInstrucciones\\n}"}},"cadenas":{"1":{"1":"En este ejemplo se usa:\\n\\tCadenas","2":"\\t\\t\\tRACKET\\nCADENAS:\\nLas cadenas en Racket se definen como cualquier otra variable, se usa la palabra define y un identificador o nombre para dicha variable, seguidamente se inicializa la cadena entre comillas dobles \\"\\".\\nSint\xe1cticamnete: \\n(define cadena1 \\"\\")\\n(define cadena2 \\"Hola Mundo\\")\\n\\nFunciones para cadenas:\\n En Racket las funciones para el manejo de cadenas vienen nativas con el lenguaje, es decir, no hay que importar modulos o librerias.","3":"\\t\\t\\tC\\nCADENAS:\\nLas cadenas en C son un tipo de dato de char, solo que no almacena un solo caracter, sino que almacena varios caracteres en una sola varibale, por lo que a nivel de sintaxis una cadena se declara as\xed:\\nchar cadena[]\\nEs opcional ponerle el tama\xf1o a la cadena, depende si se inicializa en el momento o no.\\n*El caso especial para capturar cadenas por consola es que no se usa el ampersan & a la hora de colocar el nombre de la variable.\\n\\nFunciones para cadenas:\\n En C existen librerias que permiten el manejo de funciones (copiar, concatenar, comparar, etc.) estas funciones se usan importando la libreria: string.h "},"2":{"1":"En este ejemplo se usa:\\n\\tCadenas\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nCADENAS:\\nLas cadenas en Racket se definen como cualquier otra variable, se usa la palabra define y un identificador o nombre para dicha variable, seguidamente se inicializa la cadena entre comillas dobles \\"\\".\\nSint\xe1cticamnete: \\n(define cadena1 \\"\\")\\n(define cadena2 \\"Hola Mundo\\")\\n\\nFunciones para cadenas:\\n En Racket las funciones para el manejo de cadenas vienen nativas con el lenguaje, es decir, no hay que importar modulos o librerias.\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nCADENAS:\\nLas cadenas en C son un tipo de dato de char, solo que no almacena un solo caracter, sino que almacena varios caracteres en una sola varibale, por lo que a nivel de sintaxis una cadena se declara as\xed:\\nchar cadena[]\\nEs opcional ponerle el tama\xf1o a la cadena, depende si se inicializa en el momento o no.\\n*El caso especial para capturar cadenas por consola es que no se usa el ampersan & a la hora de colocar el nombre de la variable.\\n\\nFunciones para cadenas:\\n En C existen librerias que permiten el manejo de funciones (copiar, concatenar, comparar, etc.) estas funciones se usan importando la libreria: string.h \\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"3":{"1":"En este ejemplo se usa:\\n\\tCadenas\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nCADENAS:\\nLas cadenas en Racket se definen como cualquier otra variable, se usa la palabra define y un identificador o nombre para dicha variable, seguidamente se inicializa la cadena entre comillas dobles \\"\\".\\nSint\xe1cticamnete: \\n(define cadena1 \\"\\")\\n(define cadena2 \\"Hola Mundo\\")\\n\\nFunciones para cadenas:\\n En Racket las funciones para el manejo de cadenas vienen nativas con el lenguaje, es decir, no hay que importar modulos o librerias.\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nCADENAS:\\nLas cadenas en C son un tipo de dato de char, solo que no almacena un solo caracter, sino que almacena varios caracteres en una sola varibale, por lo que a nivel de sintaxis una cadena se declara as\xed:\\nchar cadena[]\\nEs opcional ponerle el tama\xf1o a la cadena, depende si se inicializa en el momento o no.\\n*El caso especial para capturar cadenas por consola es que no se usa el ampersan & a la hora de colocar el nombre de la variable.\\n\\nFunciones para cadenas:\\n En C existen librerias que permiten el manejo de funciones (copiar, concatenar, comparar, etc.) estas funciones se usan importando la libreria: string.h \\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"4":{"1":"En este ejemplo se usa:\\n\\tCadenas\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nCADENAS:\\nLas cadenas en Racket se definen como cualquier otra variable, se usa la palabra define y un identificador o nombre para dicha variable, seguidamente se inicializa la cadena entre comillas dobles \\"\\".\\nSint\xe1cticamnete: \\n(define cadena1 \\"\\")\\n(define cadena2 \\"Hola Mundo\\")\\n\\nFunciones para cadenas:\\n En Racket las funciones para el manejo de cadenas vienen nativas con el lenguaje, es decir, no hay que importar modulos o librerias.\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nCADENAS:\\nLas cadenas en C son un tipo de dato de char, solo que no almacena un solo caracter, sino que almacena varios caracteres en una sola varibale, por lo que a nivel de sintaxis una cadena se declara as\xed:\\nchar cadena[]\\nEs opcional ponerle el tama\xf1o a la cadena, depende si se inicializa en el momento o no.\\n*El caso especial para capturar cadenas por consola es que no se usa el ampersan & a la hora de colocar el nombre de la variable.\\n\\nFunciones para cadenas:\\n En C existen librerias que permiten el manejo de funciones (copiar, concatenar, comparar, etc.) estas funciones se usan importando la libreria: string.h \\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"5":{"1":"En este ejemplo se usa:\\n\\tCadenas\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nCADENAS:\\nLas cadenas en Racket se definen como cualquier otra variable, se usa la palabra define y un identificador o nombre para dicha variable, seguidamente se inicializa la cadena entre comillas dobles \\"\\".\\nSint\xe1cticamnete: \\n(define cadena1 \\"\\")\\n(define cadena2 \\"Hola Mundo\\")\\n\\nFunciones para cadenas:\\n En Racket las funciones para el manejo de cadenas vienen nativas con el lenguaje, es decir, no hay que importar modulos o librerias.\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nCADENAS:\\nLas cadenas en C son un tipo de dato de char, solo que no almacena un solo caracter, sino que almacena varios caracteres en una sola varibale, por lo que a nivel de sintaxis una cadena se declara as\xed:\\nchar cadena[]\\nEs opcional ponerle el tama\xf1o a la cadena, depende si se inicializa en el momento o no.\\n*El caso especial para capturar cadenas por consola es que no se usa el ampersan & a la hora de colocar el nombre de la variable.\\n\\nFunciones para cadenas:\\n En C existen librerias que permiten el manejo de funciones (copiar, concatenar, comparar, etc.) estas funciones se usan importando la libreria: string.h \\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"6":{"1":"En este ejemplo se usa:\\n\\tCadenas","2":"\\t\\t\\tRACKET\\nCADENAS:\\nLas cadenas en Racket se definen como cualquier otra variable, se usa la palabra define y un identificador o nombre para dicha variable, seguidamente se inicializa la cadena entre comillas dobles \\"\\".\\nSint\xe1cticamnete: \\n(define cadena1 \\"\\")\\n(define cadena2 \\"Hola Mundo\\")\\n\\nFunciones para cadenas:\\n En Racket las funciones para el manejo de cadenas vienen nativas con el lenguaje, es decir, no hay que importar modulos o librerias.","3":"\\t\\t\\tC\\nCADENAS:\\nLas cadenas en C son un tipo de dato de char, solo que no almacena un solo caracter, sino que almacena varios caracteres en una sola varibale, por lo que a nivel de sintaxis una cadena se declara as\xed:\\nchar cadena[]\\nEs opcional ponerle el tama\xf1o a la cadena, depende si se inicializa en el momento o no.\\n*El caso especial para capturar cadenas por consola es que no se usa el ampersan & a la hora de colocar el nombre de la variable.\\n\\nFunciones para cadenas:\\n En C existen librerias que permiten el manejo de funciones (copiar, concatenar, comparar, etc.) estas funciones se usan importando la libreria: string.h "}},"vectores":{"1":{"1":"En este ejemplo se usa:\\n\\tVectores\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"2":{"1":"En este ejemplo se usa:\\n\\tVectores\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"3":{"1":"En este ejemplo se usa:\\n\\tVectores\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"4":{"1":"En este ejemplo se usa:\\n\\tVectores\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"5":{"1":"En este ejemplo se usa:\\n\\tVectores\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF ","2":"\\t\\t\\tRACKET\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"6":{"1":"En este ejemplo se usa:\\n\\tVectores\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF ","2":"\\t\\t\\tRACKET\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"}},"matrices":{"1":{"1":"En este ejemplo se usa:\\n\\tMatrices\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nMATRICES:\\nPara el manejo de matrices en racket es necesario importar o requerir el modulo math/matrix\\nDicho modulo contiene funciones para crear y llenar matrices.\\nLas matrices se definen como una variable m\xe1s en Racket, se usa la palabra define y se le da un identificador.\\nSint\xe1cticamente:\\n(require math/matrix)\\n(define matriz (make-matrix fil col 0))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nMATRICES:\\nLas matrices en C se consideran un vector bidimensional, por lo que se declaran de igual manera, solo que en vez de proporcionar un tama\xf1o, se proporciona un n\xfamero de alto y ancho, para las filas y columnas respectivamente, asi que hablando sint\xe1cticamente:\\ntipo_dato nombre_matriz[filas][Columnas];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"2":{"1":"En este ejemplo se usa:\\n\\tMatrices\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nMATRICES:\\nPara el manejo de matrices en racket es necesario importar o requerir el modulo math/matrix\\nDicho modulo contiene funciones para crear y llenar matrices.\\nLas matrices se definen como una variable m\xe1s en Racket, se usa la palabra define y se le da un identificador.\\nSint\xe1cticamente:\\n(require math/matrix)\\n(define matriz (make-matrix fil col 0))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nMATRICES:\\nLas matrices en C se consideran un vector bidimensional, por lo que se declaran de igual manera, solo que en vez de proporcionar un tama\xf1o, se proporciona un n\xfamero de alto y ancho, para las filas y columnas respectivamente, asi que hablando sint\xe1cticamente:\\ntipo_dato nombre_matriz[filas][Columnas];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"3":{"1":"En este ejemplo se usa:\\n\\tMatrices\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nMATRICES:\\nPara el manejo de matrices en racket es necesario importar o requerir el modulo math/matrix\\nDicho modulo contiene funciones para crear y llenar matrices.\\nLas matrices se definen como una variable m\xe1s en Racket, se usa la palabra define y se le da un identificador.\\nSint\xe1cticamente:\\n(require math/matrix)\\n(define matriz (make-matrix fil col 0))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nMATRICES:\\nLas matrices en C se consideran un vector bidimensional, por lo que se declaran de igual manera, solo que en vez de proporcionar un tama\xf1o, se proporciona un n\xfamero de alto y ancho, para las filas y columnas respectivamente, asi que hablando sint\xe1cticamente:\\ntipo_dato nombre_matriz[filas][Columnas];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"4":{"1":"En este ejemplo se usa:\\n\\tMatrices\\n\\tEstructura de iteraci\xf3n: FOR","2":"\\t\\t\\tRACKET\\nMATRICES:\\nPara el manejo de matrices en racket es necesario importar o requerir el modulo math/matrix\\nDicho modulo contiene funciones para crear y llenar matrices.\\nLas matrices se definen como una variable m\xe1s en Racket, se usa la palabra define y se le da un identificador.\\nSint\xe1cticamente:\\n(require math/matrix)\\n(define matriz (make-matrix fil col 0))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))","3":"\\t\\t\\tC\\nMATRICES:\\nLas matrices en C se consideran un vector bidimensional, por lo que se declaran de igual manera, solo que en vez de proporcionar un tama\xf1o, se proporciona un n\xfamero de alto y ancho, para las filas y columnas respectivamente, asi que hablando sint\xe1cticamente:\\ntipo_dato nombre_matriz[filas][Columnas];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}"},"5":{"1":"En este ejemplo se usa:\\n\\tMatrices\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF","2":"\\t\\t\\tRACKET\\nMATRICES:\\nPara el manejo de matrices en racket es necesario importar o requerir el modulo math/matrix\\nDicho modulo contiene funciones para crear y llenar matrices.\\nLas matrices se definen como una variable m\xe1s en Racket, se usa la palabra define y se le da un identificador.\\nSint\xe1cticamente:\\n(require math/matrix)\\n(define matriz (make-matrix fil col 0))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)","3":"\\t\\t\\tC\\nMATRICES:\\nLas matrices en C se consideran un vector bidimensional, por lo que se declaran de igual manera, solo que en vez de proporcionar un tama\xf1o, se proporciona un n\xfamero de alto y ancho, para las filas y columnas respectivamente, asi que hablando sint\xe1cticamente:\\ntipo_dato nombre_matriz[filas][Columnas];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}"},"6":{"1":"En este ejemplo se usa:\\n\\tMatrices\\n\\tEstructura de iteraci\xf3n: FOR\\n\\tCondicional Simple: IF\\n\\tEstructura de iteraci\xf3n: DO/DO WHILE","2":"\\t\\t\\tRACKET\\nMATRICES:\\nPara el manejo de matrices en racket es necesario importar o requerir el modulo math/matrix\\nDicho modulo contiene funciones para crear y llenar matrices.\\nLas matrices se definen como una variable m\xe1s en Racket, se usa la palabra define y se le da un identificador.\\nSint\xe1cticamente:\\n(require math/matrix)\\n(define matriz (make-matrix fil col 0))\\n\\nFOR:\\nSe usa una variable para la cual se establece un rango de iteraci\xf3n. Se escribe la palabra reservada in-range y se coloca el inicio, el limite y la manera en que aumenta. Se separan por espacios en blanco.\\nSint\xe1cticamente: \\nfor(i (in-range inicio limite aumento))\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if analiza una condici\xf3n escrita entre parentesis, en caso de ser verdadera ejecuta la primera sentencia, si no, ejecuta la segunda.\\nSint\xe1cticamente:\\n(if(condicion)\\n\\tcondicion_true\\n\\tcondicion_false\\n)\\n\\nDO:\\nLa estructura repetitiva que ejecuta instrucciones y luego evalua en Racket se define por la palabra reservada do, sint\xe1cticamnete se coloca entre par\xe9ntesis la palabra do y se usa una variable para la cual se establece un inicio, la manera como incrementa y un limite.\\nSint\xe1cticamnete:\\nSea v la variable a iterar: \\n(d (v inicio (+ v incremento)) (< v limite)\\n\\tInstrucciones\\n))","3":"\\t\\t\\tC\\nMATRICES:\\nLas matrices en C se consideran un vector bidimensional, por lo que se declaran de igual manera, solo que en vez de proporcionar un tama\xf1o, se proporciona un n\xfamero de alto y ancho, para las filas y columnas respectivamente, asi que hablando sint\xe1cticamente:\\ntipo_dato nombre_matriz[filas][Columnas];\\n\\nFOR:\\nSe usa una variable (i) para la cual se establece un inicio, limite y la manera en que aumenta. Se separan por punto y coma ; \\nSint\xe1cticamente:\\n\\nfor(i=inicio; i<limite; i++){\\n\\tCuerpo de Bucle\\n\\t}\\n\\nSELECCI\xd3N SIMPLE:\\nLa sentencia if evalua una condici\xf3n escrita entre parentesis y ejecuta la siguiente instrucci\xf3n o conjunto de instrucciones.\\nSint\xe1cticamente:\\nif(condicion){\\n\\tBloque instrucciones\\n}\\n\\nDO WHILE:\\nEn C, la estructura repetitiva que ejecuta instrucciones y luego evalua se llama do-while. Se usa las palabras reservadas do y while, y entre corchetes se escribe las instrucciones a repetir, se finaliza con ;\\nSint\xe1cticamente:\\ndo{\\n\\tInstrucciones\\n}while(condicion);"}},"estructuras":{"1":{"1":"En este ejemplo se usa:\\n\\tEstructuras","2":"\\t\\t\\tRACKET\\nESTRUCTURAS\\nPara definir una estructura en Racket se usa un caso especial de la palabra reservada define. Se usa la palabra: define-struct y se le da un nombre para la estructura, seguidamente entre par\xe9ntesis se colocan las variables correspondientes a los miembros de la estructura.\\nSint\xe1cticamnete: (define-struct nombre_estructura(\\n\\tmiembro_1\\n\\tmiembro_2\\n\\t)\\n)","3":"\\t\\t\\tC\\nESTRUCTURAS:\\nEn C las estructuras se definen con la palabra reservada struct y entre llaves se ingresan todos los miembros de dicha estructura, cada miembro debe tener declarado su tipo de dato y su nombre. Una vez finalizado esto, luego de las llaves se puede realizar la creaci\xf3n de una variable del tipo de dicha estructura o simplemente colocar el simbolo ;\\n\\nSintacticamnete:\\nstruct nombre_estructura{\\n\\tint numero;\\n\\tint vector[20]\\n}variable_de_estrucutra;"},"2":{"1":"En este ejemplo se usa:\\n\\tEstructuras","2":"\\t\\t\\tRACKET\\nESTRUCTURAS\\nPara definir una estructura en Racket se usa un caso especial de la palabra reservada define. Se usa la palabra: define-struct y se le da un nombre para la estructura, seguidamente entre par\xe9ntesis se colocan las variables correspondientes a los miembros de la estructura.\\nSint\xe1cticamnete: (define-struct nombre_estructura(\\n\\tmiembro_1\\n\\tmiembro_2\\n\\t)\\n)","3":"\\t\\t\\tC\\nESTRUCTURAS:\\nEn C las estructuras se definen con la palabra reservada struct y entre llaves se ingresan todos los miembros de dicha estructura, cada miembro debe tener declarado su tipo de dato y su nombre. Una vez finalizado esto, luego de las llaves se puede realizar la creaci\xf3n de una variable del tipo de dicha estructura o simplemente colocar el simbolo ;\\n\\nSintacticamnete:\\nstruct nombre_estructura{\\n\\tint numero;\\n\\tint vector[20]\\n}variable_de_estrucutra;"},"3":{"1":"En este ejemplo se usa:\\n\\tEstructuras","2":"\\t\\t\\tRACKET\\nESTRUCTURAS\\nPara definir una estructura en Racket se usa un caso especial de la palabra reservada define. Se usa la palabra: define-struct y se le da un nombre para la estructura, seguidamente entre par\xe9ntesis se colocan las variables correspondientes a los miembros de la estructura.\\nSint\xe1cticamnete: (define-struct nombre_estructura(\\n\\tmiembro_1\\n\\tmiembro_2\\n\\t)\\n)","3":"\\t\\t\\tC\\nESTRUCTURAS:\\nEn C las estructuras se definen con la palabra reservada struct y entre llaves se ingresan todos los miembros de dicha estructura, cada miembro debe tener declarado su tipo de dato y su nombre. Una vez finalizado esto, luego de las llaves se puede realizar la creaci\xf3n de una variable del tipo de dicha estructura o simplemente colocar el simbolo ;\\n\\nSintacticamnete:\\nstruct nombre_estructura{\\n\\tint numero;\\n\\tint vector[20]\\n}variable_de_estrucutra;"},"4":{"1":"En este ejemplo se usa:\\n\\tEstructuras","2":"\\t\\t\\tRACKET\\nESTRUCTURAS\\nPara definir una estructura en Racket se usa un caso especial de la palabra reservada define. Se usa la palabra: define-struct y se le da un nombre para la estructura, seguidamente entre par\xe9ntesis se colocan las variables correspondientes a los miembros de la estructura.\\nSint\xe1cticamnete: (define-struct nombre_estructura(\\n\\tmiembro_1\\n\\tmiembro_2\\n\\t)\\n)","3":"\\t\\t\\tC\\nESTRUCTURAS:\\nEn C las estructuras se definen con la palabra reservada struct y entre llaves se ingresan todos los miembros de dicha estructura, cada miembro debe tener declarado su tipo de dato y su nombre. Una vez finalizado esto, luego de las llaves se puede realizar la creaci\xf3n de una variable del tipo de dicha estructura o simplemente colocar el simbolo ;\\n\\nSintacticamnete:\\nstruct nombre_estructura{\\n\\tint numero;\\n\\tint vector[20]\\n}variable_de_estrucutra;"},"5":{"1":"En este ejemplo se usa:\\n\\tEstructuras\\n\\tVectores","2":"\\t\\t\\tRACKET\\nESTRUCTURAS\\nPara definir una estructura en Racket se usa un caso especial de la palabra reservada define. Se usa la palabra: define-struct y se le da un nombre para la estructura, seguidamente entre par\xe9ntesis se colocan las variables correspondientes a los miembros de la estructura.\\nSint\xe1cticamnete: (define-struct nombre_estructura(\\n\\tmiembro_1\\n\\tmiembro_2\\n\\t)\\n)\\n\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))","3":"\\t\\t\\tC\\nESTRUCTURAS:\\nEn C las estructuras se definen con la palabra reservada struct y entre llaves se ingresan todos los miembros de dicha estructura, cada miembro debe tener declarado su tipo de dato y su nombre. Una vez finalizado esto, luego de las llaves se puede realizar la creaci\xf3n de una variable del tipo de dicha estructura o simplemente colocar el simbolo ;\\n\\nSintacticamnete:\\nstruct nombre_estructura{\\n\\tint numero;\\n\\tint vector[20]\\n}variable_de_estrucutra;\\n\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];"},"6":{"1":"En este ejemplo se usa:\\n\\tEstructuras\\n\\tVectores","2":"\\t\\t\\tRACKET\\nESTRUCTURAS\\nPara definir una estructura en Racket se usa un caso especial de la palabra reservada define. Se usa la palabra: define-struct y se le da un nombre para la estructura, seguidamente entre par\xe9ntesis se colocan las variables correspondientes a los miembros de la estructura.\\nSint\xe1cticamnete: (define-struct nombre_estructura(\\n\\tmiembro_1\\n\\tmiembro_2\\n\\t)\\n)\\n\\nVECTORES:\\nPara definir un vector en Racket, se usa la palabra reservada vector o make-vector y entre parentesis se inicializan.\\nLos vectores tambi\xe9n se les tiene que definir un nombre, asi que: \\n(define vec (vector 1 2 3))","3":"\\t\\t\\tC\\nESTRUCTURAS:\\nEn C las estructuras se definen con la palabra reservada struct y entre llaves se ingresan todos los miembros de dicha estructura, cada miembro debe tener declarado su tipo de dato y su nombre. Una vez finalizado esto, luego de las llaves se puede realizar la creaci\xf3n de una variable del tipo de dicha estructura o simplemente colocar el simbolo ;\\n\\nSintacticamnete:\\nstruct nombre_estructura{\\n\\tint numero;\\n\\tint vector[20]\\n}variable_de_estrucutra;\\n\\nVECTORES:\\nLos vectores en C se declaran teniendo en cuenta:\\n\\tTipo de dato\\n\\tNombre\\n\\tTama\xf1o.\\nSintacticamente:\\n tipo_dato nombre_vector[tama\xf1o_vector];"}},"funciones":{"1":{"1":"En este ejemplo se usa:\\n\\tFunciones","2":"\\t\\t\\tRACKET\\nFUNCIONES:\\nEn Racket basta con escribir la palabra reservada define y seguido dar un nombre o identificador para la funci\xf3n, a continuaci\xf3n se escriben sus parametros y las instrucciones correspondientes.\\nSint\xe1cticamente: (define nombre_funcion (num1 num2)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nFUNCIONES:\\nEn C el definir funciones es algo sencillo pero especifico, se debe tener en cuenta el tipo de dato que la funci\xf3n retornar\xe1 y el tipo de dato de los parametros de entrada.\\nSint\xe1cticamente:\\n tipo_dato_salida nombre_funcion (tipo_dato_entrada entrada1, tipo_dato_entrada entrada2){\\n\\tInstrucciones\\n}"},"2":{"1":"En este ejemplo se usa:\\n\\tFunciones","2":"\\t\\t\\tRACKET\\nFUNCIONES:\\nEn Racket basta con escribir la palabra reservada define y seguido dar un nombre o identificador para la funci\xf3n, a continuaci\xf3n se escriben sus parametros y las instrucciones correspondientes.\\nSint\xe1cticamente: (define nombre_funcion (num1 num2)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nFUNCIONES:\\nEn C el definir funciones es algo sencillo pero especifico, se debe tener en cuenta el tipo de dato que la funci\xf3n retornar\xe1 y el tipo de dato de los parametros de entrada.\\nSint\xe1cticamente:\\n tipo_dato_salida nombre_funcion (tipo_dato_entrada entrada1, tipo_dato_entrada entrada2){\\n\\tInstrucciones\\n}"},"3":{"1":"En este ejemplo se usa:\\n\\tFunciones","2":"\\t\\t\\tRACKET\\nFUNCIONES:\\nEn Racket basta con escribir la palabra reservada define y seguido dar un nombre o identificador para la funci\xf3n, a continuaci\xf3n se escriben sus parametros y las instrucciones correspondientes.\\nSint\xe1cticamente: (define nombre_funcion (num1 num2)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nFUNCIONES:\\nEn C el definir funciones es algo sencillo pero especifico, se debe tener en cuenta el tipo de dato que la funci\xf3n retornar\xe1 y el tipo de dato de los parametros de entrada.\\nSint\xe1cticamente:\\n tipo_dato_salida nombre_funcion (tipo_dato_entrada entrada1, tipo_dato_entrada entrada2){\\n\\tInstrucciones\\n}"},"4":{"1":"En este ejemplo se usa:\\n\\tFunciones","2":"\\t\\t\\tRACKET\\nFUNCIONES:\\nEn Racket basta con escribir la palabra reservada define y seguido dar un nombre o identificador para la funci\xf3n, a continuaci\xf3n se escriben sus parametros y las instrucciones correspondientes.\\nSint\xe1cticamente: (define nombre_funcion (num1 num2)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nFUNCIONES:\\nEn C el definir funciones es algo sencillo pero especifico, se debe tener en cuenta el tipo de dato que la funci\xf3n retornar\xe1 y el tipo de dato de los parametros de entrada.\\nSint\xe1cticamente:\\n tipo_dato_salida nombre_funcion (tipo_dato_entrada entrada1, tipo_dato_entrada entrada2){\\n\\tInstrucciones\\n}"},"5":{"1":"En este ejemplo se usa:\\n\\tFunciones\\n\\tRecursividad","2":"\\t\\t\\tRACKET\\nFUNCIONES:\\nEn Racket basta con escribir la palabra reservada define y seguido dar un nombre o identificador para la funci\xf3n, a continuaci\xf3n se escriben sus parametros y las instrucciones correspondientes.\\nSint\xe1cticamente: (define nombre_funcion (num1 num2)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nFUNCIONES:\\nEn C el definir funciones es algo sencillo pero especifico, se debe tener en cuenta el tipo de dato que la funci\xf3n retornar\xe1 y el tipo de dato de los parametros de entrada.\\nSint\xe1cticamente:\\n tipo_dato_salida nombre_funcion (tipo_dato_entrada entrada1, tipo_dato_entrada entrada2){\\n\\tInstrucciones\\n}"},"6":{"1":"En este ejemplo se usa:\\n\\tFunciones\\n\\tRecursividad","2":"\\t\\t\\tRACKET\\nFUNCIONES:\\nEn Racket basta con escribir la palabra reservada define y seguido dar un nombre o identificador para la funci\xf3n, a continuaci\xf3n se escriben sus parametros y las instrucciones correspondientes.\\nSint\xe1cticamente: (define nombre_funcion (num1 num2)\\nInstrucciones\\n)","3":"\\t\\t\\tC\\nFUNCIONES:\\nEn C el definir funciones es algo sencillo pero especifico, se debe tener en cuenta el tipo de dato que la funci\xf3n retornar\xe1 y el tipo de dato de los parametros de entrada.\\nSint\xe1cticamente:\\n tipo_dato_salida nombre_funcion (tipo_dato_entrada entrada1, tipo_dato_entrada entrada2){\\n\\tInstrucciones\\n}"}},"composicion":{"1":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"2":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"3":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"4":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"5":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"6":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."}},"procedimientos":{"1":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"2":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"3":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"4":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"5":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."},"6":{"1":"line 8: Se hace el llamado a la funci\xf3n (n\xfameros)","2":"line 3: Se define la funci\xf3n.","3":"line 4: Se inicializa el for y se le da un rango."}}}]')},367:function(e){e.exports=JSON.parse('[{"expresiones":{"1":"Transformar en c\xf3digo el pseudoc\xf3digo que se muestra a continuaci\xf3n, correspondiente a\\nproporcionar el precio medio de un producto, calculado a partir del precio del mismo en\\ntres establecimientos distintos. Los precios para el c\xe1lculo son introducidos por el \\nusuario.\\n\\n1.Inicio\\n2.-  -Mostrar \u201cIntroduzca el precio del producto 1\u201d: Pedir precio1 \\n3.-  -Mostrar \u201cIntroduzca el precio del producto 2\u201d: Pedir precio2 \\n4.-  -Mostrar \u201cIntroduzca el precio del producto 3\u201d: Pedir precio3 \\n5.-  -media = (precio1 + precio2 + precio3) / 3\\n6.-  -Mostrar \u201cEl precio medio del producto es\u201d, media, \u201cEuros\u201d \\n7.Fin ","2":"Transformar en c\xf3digo el pseudoc\xf3digo que se muestra a continuaci\xf3n, correspondiente\\nal c\xe1lculo del volumen de un cilindro dados su altura y di\xe1metro.\\n\\n1.Inicio\\n2.-  -Mostrar \u201cIntroduzca el di\xe1metro, en metros\u201d : Pedir D \\n3.-  -Mostrar \u201cIntroduzca la altura, en metros\u201d : Pedir H \\n4.-  -R = D/2 : Pi = 3,141593\\n5.-  -V = Pi * (R ^ 2) * H\\n6.-  -Mostrar \u201cEl volumen del cilindro es de\u201d, V, \u201cmetros c\xfabicos\u201d\\n 7.Fin ","3":"Un supermercado ha puesto en oferta la venta al por mayor de cierto producto,\\nofreciendo un descuento del 15% por la compra de m\xe1s de 3 docenas y 10% en caso\\ncontrario. Adem\xe1s por la compra de m\xe1s de 3 docenas se obsequia una unidad del\\nproducto por cada docena en exceso sobre 3. Dise\xf1e un algoritmo que determine el\\nmonto de la compra, el monto del descuento, el monto a pagar y el n\xfamero de unidades\\nde obsequio por la compra de cierta cantidad de docenas del producto."},"secuencia":{"1":"Desarrolle un algoritmo que tenga tres valores y almacene las variables\\na,b y c respectivamente. Debe indicar cual es el menor.","2":"Leer un n\xfamero entero positivo y averiguar si es perfecto. Un n\xfamero es perfecto\\ncuando es igual a la suma de sus divisores excepto el mismo.","3":"Escribe un programa que pregunte el precio, el tanto por ciento de descuento, y te\\ndiga el precio con descuento. Por ejemplo, si el precio que introduce el usuario \\nes 300 y el descuento 20, el programa dir\xe1 que el precio final con descuento es de 240. "},"condicionales":{"1":"Determinar si un alumno aprueba a reprueba un curso, sabiendo que aprobara\\nsi su promedio de tres calificaciones es mayor o igual a 70; reprueba en caso\\ncontrario.","2":"Construir un programa que realice descuentos en base a lo siguiente:\\n\\n\\tSi la compra es menor a 500 no hay descuento\\n\\tSi es entre 500 y 1000, 10% de descuento\\n\\tSi es entre 1000 y 2000, 20% de descuento\\n\\tSi es mayor a 2000, 30% de descuento","3":"Se quiere crear un programaque resuelva la ecuaci\xf3n cuadr\xe1tica tipo ax2 + bx + c.\\nPara ello se ha estudiado el problema, que se ha planteado en pseudoc\xf3digo. Transformar\\nel pseudoc\xf3digo que se muestra a continuaci\xf3n en c\xf3digo C y comprobar que el programa\\nobtiene los resultados esperados para una serie de casos de prueba."},"ciclos":{"1":"Una ONG tiene puntos de reparto de vacunas que se pretende funcionen de la siguiente manera.\\nCada d\xeda, empezar con 1000 vacunas disponibles y a trav\xe9s de un programa que controla las\\nentregas avisar si el inventario baja de 200 unidades.","2":"Dise\xf1e un algoritmo que lea un n\xfamero de tres cifras y determine si es igual al rev\xe9s del\\nn\xfamero.\\nComo el n\xfamero tiene tres cifras, para que sea igual al rev\xe9s, basta con que la\\ncifra de las unidades sea igual a la cifra de las centenas. Por ejemplo: 353, 878, etc.","3":"Crea un programa que usando bucles nos permita pedir un n\xfamero par comprendido entre 100 y\\n200 y nos muestre todos los n\xfameros pares comprendidos entre el n\xfamero facilitado y 200.\\nPor ejemplo si el n\xfamero facilitado es 192 nos deber\xeda mostrar 192, 194, 196, 198 y 200."},"cadenas":{"1":"Escribir un programa que una frase, determinar qu\xe9 caracteres se encuentran repetidos, y cu\xe1ntas\\nveces aparece repetido cada car\xe1cter. Utilizar un vector con los caracteres que van apareciendo y\\notro correspondiente a la misma posici\xf3n con el n\xfamero de repeticiones. ","2":"Escribir un programa que dada una frase de tama\xf1o m\xe1ximo N, determine si es un pal\xedndromo o no. Un\\npal\xedndromo es una frase que, atendiendo s\xf3lo a sus letras e ignorando los espacios, acentos, signos de\\npuntuaci\xf3n y tipo de letra (may\xfascula o min\xfascula) expresa lo mismo le\xedda de izquierda a derecha que\\nde derecha a izquierda. \u201cd\xe1bale arroz a la zorra el abad\u201d. ","3":"Un psiquiatra tiene un paciente que habla invirtiendo las frases completas. (por ejemplo: si quiere\\ndecir \u201chola caracola\u201d, lo que realmente dice es: \u201calocarac aloh\u201d). Para poder comunicarse con el\\npaciente decide hacer un programa que traduzca lo que \xe9l dice al lenguaje del paciente. Implementar\\ndicho programa."},"vectores":{"1":"Desarrolle un programa para que un usuario pueda llenar dos vectores de 18 elementos cada\\nuno y almacenar el producto de estos en un tercer vector. Imprimir el tercer vector.","2":"El Instituto Leonardo Da Vinci, desea obtener las notas de todos los estudiantes del grado\\n12do. Para esto, dise\xf1e un programa que permita ingresarlas en un vector, determinar el\\npromedio de las mismas y luego imprimirlas. Imprima tambi\xe9n el promedio obtenido.","3":"Dise\xf1ar  un  programa  en  C++  que  lea  N temperaturas. El usuario debe ingresar  N\\n(n\xfamero total de temperaturas) y cada una de las temperaturas. El programa debe calcular\\nsu media  y  encontrar  cu\xe1ntas  temperaturas  son mayores o iguales a esa media"},"matrices":{"1":"Crear un array bidimensional de tama\xf1o 7x7 y rell\xe9nalo de forma que los elementos de la\\ndiagonal principal sean 1 y el resto 0. Mu\xe9stra el array por pantalla en forma de cuadrado.","2":"En la tienda Mar\xeda Shop desean crear un programa para conocer como han sido las ventas de cada\\nuna de las \xfaltimas 4 semanas. Desarrolle un programa donde se ingresen en las ventas de cada d\xeda\\nen una matriz 4x7 y luego determine e imprima\\n\\n\\tEl total de ventas de cada semana.\\n\\tEl promedio de ventas de cada semana.\\n\\tCual semana fue la de mayor venta.","3":"Queremos almacenar en una matriz las notas de inform\xe1tica de los alumnos de secundaria de una\\nescuela. Suponiendo que hay 4 grados distintos, 15 alumnos por grado, se pide:\\n\\n\\tIngresar las notas que ha sacado cada alumno de cada grado.\\n\\tImprimir cu\xe1l es la nota promedio de cada grado.\\n\\tImprimir la mayor nota en general.\\n\\tImprimir todas las notas.\\n\\tImprimir cu\xe1ntos alumnos aprobaron y cu\xe1ntos reprobaron de cada grado."},"estructuras":{"1":"Se requiere crear un programa con estrcturas para manejar la informaci\xf3n de notas\\nde un estudiante. Cree un struct llamada \u201cestudiante\u201d, calcula e imprime el promedio\\nde las 5 calificaciones de un estudiante. ","2":"La informaci\xf3n de todos los empleados de la empresa DATASYSTEM est\xe1 almacenada\\nen una variable de tipo struct llamada \u201cempleado\u201d. La informaci\xf3n con que se\\ncuenta de cada empleado es: nombre, sexo y sueldo.\\nPor tanto se pide: Realizar un programa en C que lea en un array de estructuras los\\ndatos de los N trabajadores de la empresa y que imprima los datos del empleado con\\nmayor y menor salario. ","3":"El due\xf1o del gimnasio \u201cLYON GYM\u201d desea automatizar la informaci\xf3n de los deportistas\\nque asisten a su gimnasio para realizar ejercicios. Los datos con que se cuenta de\\ncada deportista es: nombre, edad, peso (kg), altura. Programa en C que permite\\nregistrar un nuevo cliente del gimnasio e imprimir dichos datos. Nota: El peso se\\nleer\xe1 en kg y se imprimir\xe1 su valor correspondiente en libras. "},"funciones":{"1":"Escribir un programa que reciba un numero del 1 al 12 desde el teclado y muestre el n\xfamero de\\nd\xedas correspondiente al mes que corresponda con ese d\xeda (usar funciones).","2":"Dise\xf1e un programa, que dada una cifra entera y mayor que cero, sea elevada a una potencia\\nintroducida por el usuario, la cual. (Ejemplo: 5^2=25).  Emplee una Funci\xf3n llamada Potencia.","3":"Realizar una funci\xf3n llamada media3, que toma tres n\xfameros reales como par\xe1metros, y no devuelve\\nnada. Esa funci\xf3n debe calcular la media de los tres n\xfameros pasados como par\xe1metros y mostrar\\ncon un mensaje cu\xe1l es la media calculada."},"composicion":{"1":"Escribir una funci\xf3n que calcule el n\xfamero de horas, minutos y segundos que hay en N segundos.\\nEjemplo En 3601segundos equivale 1 hora 0 minutos 1 segundo.","2":"Construir un programa que permita leer 10 n\xfameros enteros y determinar en cu\xe1ntos de ellos\\nse encuentra el d\xedgito 1, sacar su promedio, n\xfamero mayor.","3":"Un alumno desea saber cu\xe1l ser\xe1 su promedio general en las tres materias que cursa y cu\xe1l ser\xe1\\nel promedio que obtendr\xe1 en cada una de ellas. Estas materias se eval\xfaan como se muestran a\\ncontinuaci\xf3n.\\n\\n\\tLa calificaci\xf3n de materias se obtiene de la siguiente manera:  Examen 90%, Promedio de\\n\\tlas tareas 10%. En esta materia se pidi\xf3 un total de tres tareas.\\n\\tLa calificaci\xf3n de f\xedsica se obtiene de la siguiente manera: Examen: 80%. Promedio de\\n\\tlas tareas 10%. En esta materia se pidi\xf3 un total de tres tareas.\\n\\tLa calificaci\xf3n de qu\xedmica se obtiene de la siguiente manera: Examen: 85%. Promedio de\\n\\tlas tareas 10%. En esta materia se pidi\xf3 un total de tres tareas."},"procedimientos":{"1":"Escriba un programa que tome como entrada desde teclado dos n\xfameros naturales (mayores\\nque cero) \\"N\\" e \\"i\\", e imprima en pantalla el d\xedgito que ocupa la posici\xf3n i-\xe9sima del n\xfamero\\nN. Si i es mayor que el n\xfamero de d\xedgitos de N, se escribir\xe1 en pantalla -1. Por ejemplo, para N\\n= 25064 e i = 2, el resultado es el d\xedgito 6, y para i = 7, el resultado es -1.","2":"Escribe un programa que acepte como entrada desde teclado un n\xfamero natural mayor que cero\\ny d\xe9 como salida el resultado de sumar dos a dos los d\xedgitos que aparecen en posiciones\\nsim\xe9tricas respecto al d\xedgito central dentro del n\xfamero dado como entrada. Por ejemplo :\\npara el n\xfamero : 2354869.\\nla salida es: 2+9 = 11, 3 + 6 = 9, 5 + 8 = 13, 4\\npara el n\xfamero : 6582\\nla salida es : 6 + 2 = 8, 5 + 8 = 13","3":"El m\xe1ximo com\xfan divisor (mcd) de dos n\xfameros naturales p y q es el mayor entero d que\\ndivide a ambos. Un algoritmo muy conocido para calcularlo es el de Euclides. \xc9ste utiliza\\ndos variables, que contienen inicialmente a cada uno de los n\xfameros, y trata de hacer que su\\ncontenido sea el mismo. Para ello, ir\xe1 restando la menor a la mayor hasta que ambas\\ncontengan el mismo valor. En dicho momento, el valor obtenido en cualquiera de ellas es el\\nm\xe1ximo com\xfan divisor de los dos n\xfameros iniciales. Por ejemplo, si P = 18 y Q = 12, el\\nalgoritmo har\xe1 que P y Q vayan tomando los siguientes valores:\\nInicialmente P == 18 y Q == 12 (P > Q => P = P - Q)\\nDespu\xe9s P == 6 y Q == 12 (Q > P => Q = Q - P)\\nDespu\xe9s P == 6 y Q == 6 (P == Q => El mcd es 6)\\nDise\xf1a el algoritmo anterior siguiendo un enfoque recursivo:\\nunsigned mcd(unsigned P, unsigned Q)."}}]')},416:function(e,n,a){},417:function(e,n,a){},418:function(e){e.exports=JSON.parse('[{"title":"1. Expresiones","description":"En esta secci\xf3n aprender\xe1s a realizar operaciones l\xf3gicas y aritm\xe9ticas de forma sencilla en C, a partir del lenguaje Racket","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590276263/expresiones_tupmpm.jpg","page":"/module/:Expresiones","difficulty":"Principiante"},{"title":"2. Estructuras de secuencia","description":"En esta secci\xf3n aprender\xe1s a realizar instrucciones que se ejecutaran una tras otra en el orden que estas van apareciendo de forma sencilla en C, a partir del lenguaje Racket.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590278559/secuencia2_qi7ifv.jpg","page":"/module/:Estructuras de Secuencia","difficulty":"Principiante"},{"title":"3. Estructuras de selecci\xf3n","description":"En esta secci\xf3n asimilar\xe1s el uso de las instrucciones condicionales b\xe1sicas de C como el if y switch, a partir del lenguaje Racket.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590339183/condif_m9xkkb.jpg","page":"/module/:Estructuras de Selecci\xf3n","difficulty":"Medio"},{"title":"4. Estructuras de iteraci\xf3n","description":"Esta secci\xf3n compara y explica el funcionamiento de las estructuras de iteraci\xf3n: while do/while y for en lenguaje C, a partir del lenguaje Racket.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590354995/ciclos_gzld3h.png","page":"/module/:Estructuras de iteraci\xf3n","difficulty":"Medio"},{"title":"5. Cadenas y Caracteres","description":"En esta secci\xf3n entender\xe1s el uso, declaraci\xf3n e inicializaci\xf3n de cadenas y caracteres en C, adem\xe1s, aprender\xe1s las funciones para su manejo, comparando con Racket su estructura.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590341922/STRING_qx7wbp.jpg","page":"/module/:Cadenas y Caracteres","difficulty":"Medio"},{"title":"6. Vectores","description":"En esta secci\xf3n aprender\xe1s c\xf3mo crear, inicializar y modificar vectores en C, comparando con Racket su estructura.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590344975/VECTOR_urfruc.jpg","page":"/module/:Vectores","difficulty":"Medio"},{"title":"7. Matrices","description":"En esta secci\xf3n aprender\xe1s c\xf3mo crear, inicializar y modificar Matrices en C, comparando con Racket su estructura.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590352516/matriz_jfuwsg.jpg","page":"/module/:Matrices","difficulty":"Avanzado"},{"title":"8. Estructuras de datos","description":"En esta secci\xf3n abarcar\xe1s qu\xe9 son las estructuras de datos; c\xf3mo crearlas y operarlas.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590353277/estructuras_pewbhi.png","page":"/module/:Estructuras de Datos","difficulty":"Avanzado"},{"title":"9. Funciones","description":"En esta secci\xf3n conseguir\xe1s entender la forma correcta de definir y llamar funciones en C a partir del lenguaje Racket.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590357604/funcion_dxknap.jpg","page":"/module/:Funciones","difficulty":"Avanzado"},{"title":"10. Composici\xf3n de Funciones","description":"En esta secci\xf3n descubrir\xe1s qu\xe9 es la composici\xf3n de funciones, c\xf3mo implementarla de forma sencilla C, a partir del lenguaje Racket.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590359091/esfuncio_xedio4.jpg","page":"/module/:Composici\xf3n de Funciones","difficulty":"Avanzado"},{"title":"11. Procedimientos","description":"En esta secci\xf3n aprender\xe1s como crear y usar procedimientos en C a partir del lenguaje Racket.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590360867/PROCEDIMIENTOS_rm7a8b.jpg","page":"/module/:Procedimientos","difficulty":"Avanzado"},{"title":"12. Modo gr\xe1fico","description":"En esta secci\xf3n profundizar\xe1s en funciones que te sirvan para crear entornos gr\xe1ficos b\xe1sicos como figuras hasta llegar a los fundamentos del desarrollo de videojuegos.","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590362475/GRAFICA_ktu2b6.jpg","page":"/module/:Modo gr\xe1fico","difficulty":"Avanzado"},{"title":"13. Practica C","description":"En esta secci\xf3n final har\xe1s una peque\xf1a prueba para validar el conocimiento adquirido,\xa1Mucha suerte!","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590366359/PR%C3%81CTICA_lg9l84.jpg","page":"/modpractice1/:expresiones","difficulty":"Elemental"},{"title":"14. Practica Racket","description":"En esta secci\xf3n final har\xe1s una peque\xf1a prueba para validar el conocimiento adquirido,\xa1Mucha suerte!","img":"https://res.cloudinary.com/djqxz1kvu/image/upload/v1590366359/PR%C3%81CTICA_lg9l84.jpg","page":"/modpractice2/:expresiones","difficulty":"Elemental"}]')},419:function(e,n,a){e.exports=a.p+"static/media/logo.ba633d7a.png"},420:function(e,n,a){e.exports=a.p+"static/media/manual.972aa2a5.pdf"},421:function(e,n,a){e.exports=a.p+"static/media/logos.ba4bc016.png"},434:function(e,n,a){e.exports=a(625)},439:function(e,n,a){},440:function(e,n,a){},441:function(e,n,a){},442:function(e,n,a){},443:function(e,n,a){},444:function(e,n,a){},599:function(e,n,a){},600:function(e,n,a){},601:function(e,n,a){},602:function(e,n,a){},614:function(e,n,a){},615:function(e,n,a){},616:function(e,n,a){},625:function(e,n,a){"use strict";a.r(n);var t=a(13),i=a.n(t),r=a(252),o=a.n(r),s=(a(439),a(428)),c=a(284),l=(a(440),a(100)),d=a(101),u=a(145),m=a(144),p=(a(441),function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){return Object(l.a)(this,a),n.apply(this,arguments)}return Object(d.a)(a,[{key:"getLabelColor",value:function(e){switch(e){case"Principiante":return"#5cb85c";case"Medio":return"#f0ad4e";case"Avanzado":return"#337ab7";case"Elemental":return"#5bc0de"}}},{key:"render",value:function(){return i.a.createElement("div",{className:"Card"},i.a.createElement("img",{className:"Card__img",src:this.props.img,alt:"Clases"}),i.a.createElement("div",{className:"Card__text"},i.a.createElement("h4",{className:"Card__text--title"},this.props.title),i.a.createElement("p",{className:"Card__text--difficulty",style:{color:this.getLabelColor(this.props.difficulty),fontWeight:"bold"}},this.props.difficulty),i.a.createElement("p",{className:"Card__text--description"},this.props.description)),i.a.createElement("div",{className:"Card__link"},i.a.createElement("a",{href:this.props.page},"Iniciar tema")))}}]),a}(t.Component)),f=a(418),b=(a(442),a(419)),v=a.n(b),g=a(420),E=a.n(g),S=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){return Object(l.a)(this,a),n.apply(this,arguments)}return Object(d.a)(a,[{key:"module",value:function(){return this.props.mod}},{key:"render",value:function(){return i.a.createElement("header",{className:"Navbar"},i.a.createElement("div",{className:"Navbar__logo"},i.a.createElement("img",{src:v.a,width:"30",alt:"logo"}),i.a.createElement("a",{className:"Navbar__link",href:"/"},"Racket y C")),i.a.createElement("nav",{className:"Navbar__nav"},i.a.createElement("a",{className:"Navbar__link Navbar__link--element",href:"/menu"},"M\xf3dulos"),i.a.createElement("a",{className:"Navbar__link Navbar__link--element",href:"/modpractice1/:"+this.module()},"Pr\xe1ctica"),i.a.createElement("a",{className:"Navbar__link Navbar__link--element",href:"/"},"Inicio"),i.a.createElement("a",{className:"Navbar__link Navbar__link--element",href:E.a,target:"_blank"},"Manual")))}}]),a}(t.Component);var h=function(){return i.a.createElement("div",{className:"Container"},i.a.createElement(S,{mod:"expresiones"}),i.a.createElement("div",{className:"Home"},f.map((function(e){return i.a.createElement(p,{title:e.title,description:e.description,img:e.img,page:e.page,difficulty:e.difficulty})}))))};a(443);var y=function(){return i.a.createElement("h1",null,"NotFound")},C=(a(444),a(421)),q=a.n(C),I=a(422);function O(){var e=Object(I.a)(["\n  width: 100%;\n  height: 20%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: left;\n  flex-wrap: wrap;\n  margin-bottom: 15px;\n"]);return O=function(){return e},e}var R=a(423).a.div(O()),j=(a(446),function(){return i.a.createElement(R,null,i.a.createElement("footer",{class:"page-footer bg-light mt-5"},i.a.createElement("div",{class:"footer-copyright text-center py-3"},"\xa9 2020 Copyright:",i.a.createElement("a",{href:"https://www.utp.edu.co/",target:"_blank"}," Universidad Tecnologica Pereira"))))});var L=function(){return i.a.createElement("div",null,i.a.createElement("div",{className:"Container"},i.a.createElement(S,{mod:"expresiones"}),i.a.createElement("div",{className:"info"},i.a.createElement("div",{className:"info__text"},i.a.createElement("h3",{className:"info__text--title"},"Gu\xeda de comparaci\xf3n de lenguaje Racket y C"),i.a.createElement("p",{className:"info__text--description"},"Este sitio web tiene como objetivo ser un instrumento que sirva de apoyo a los estudiantes de la Universidad Tecnol\xf3gica de Pereira para el aprendizaje del lenguaje de programaci\xf3n C a trav\xe9s de conocimientos previos de Scheme, tambi\xe9n conocido como Racket. En esta herramienta se podr\xe1n encontrar variedad de ejemplos con los que el estudiante podr\xe1 mejorar su nivel de abstracci\xf3n y obtener el conocimiento de una manera pr\xe1ctica."),i.a.createElement("h3",{className:"info__text--title"},"Informaci\xf3n Adicional"),i.a.createElement("p",{className:"info__text--description"},"Este sitio web cuenta con 12 modulos, cada modulo cuenta con ejemplos practicos sobre determinados temas, el estudiante es libre de escoger a cual modulo quiere ingresar, nuestra recomendaci\xf3n es que antes de ingresar a un modulo, visite el modulo previo, para asi poder obtener un mejor entendimiento de los temas que va a ver en el modulo al que desea entrar."),i.a.createElement("a",{href:"/menu"},i.a.createElement("button",{className:"btn"},"\xa1Aprende m\xe1s!"))),i.a.createElement("div",{className:"info__image"},i.a.createElement("img",{src:q.a,alt:"logos"})))),i.a.createElement("hr",{className:"footer"}),i.a.createElement(j,null))},N=a(280);a(599),a(600);function _(e){var n=e.onClick,a=e.name,t=e.currentActive,r=e.index;return i.a.createElement("div",{onClick:function(){return n(r)},className:"tab__button ".concat(t===r&&"tab__button--active")},i.a.createElement("i",{className:"fa fa-sitemap "})," ",a)}a(601);function A(e){for(var n=e.setCurrentActive,a=e.currentActive,t=e.direction,r=e.type,o=e.index,s=new Array,c=1;c<=o;c++)s.push(i.a.createElement(_,{onClick:n,name:"".concat(c,". ").concat(r," "),index:c,currentActive:a}));return i.a.createElement("div",{className:"tabs--".concat(t)},s)}a(602);var k=a(242),P=a.n(k),x=(a(416),a(208)),z=function(){function e(){Object(l.a)(this,e)}return Object(d.a)(e,[{key:"uno",value:function(){for(var e="",n=1;n<11;n++)e+=n+" ";return e}},{key:"dos",value:function(){return["0  1  2  3  4\n0  1  2  3  4\n0  1  2  3  4\n0  1  2  3  4\n"]}},{key:"tres",value:function(){for(var e=Math.floor(54*Math.random()+1),n=1,a=0,t=0;n<e;)n%2==0?a+=n:t+=n,n++;return"Suma de pares: "+a+"\nSuma de impares: "+t}},{key:"cuatro",value:function(){for(var e,n=Math.floor(24*Math.random()+1),a="";n>=1;){for(e=1;e<=n;)a+=" "+e,e++;a+="\n",n--}return a}},{key:"cinco",value:function(){var e=12,n=10,a=10;do{a+=n*=2,e++}while(a<1e3);return"Edad: "+String(e)+"\nDinero recibido: "+n+"\nTotal recibido: "+a}},{key:"seis",value:function(){var e,n,a=Math.floor(25*Math.random()+1),t=1,i=0,r="";do{for(n=1,e=t;e>1;)n*=e,e--;i+=n,r+=t+"! = "+n+"\n",t++}while(t<=a);return r+="suma = "+i}}]),e}(),M=function(){function e(){Object(l.a)(this,e)}return Object(d.a)(e,[{key:"uno",value:function(e,n,a,t,i){return e>0?"Numero positivo: "+e:"Numero negativo: "+e}},{key:"dos",value:function(e,n,a,t,i){return e<n&&e<a?e:n<e&&n<a?n:a}},{key:"tres",value:function(e,n,a,t,i){return e>=3.5?"Aprob\xf3 la materia":e>=3&&e<3.4?"Presenta prueba de validaci\xf3n":e>=0&&e<3?"Reprob\xf3 la materia":"ingrese una nota valida"}},{key:"cuatro",value:function(e,n,a,t,i){var r=n,o=a,s=t,c=i,l="Seleccione opci\xf3n:\n1 \u2013 Equil\xe1tero\n2 \u2013 Is\xf3sceles\n3 \u2013 Escaleno\n"+e+"\n";switch(e){case 1:l+="Introduzca lado del tri\xe1ngulo: "+r+"\n",l+="El per\xedmetro es: "+3*r;break;case 2:l+="Ingrese el lado y la base: "+r+" "+c+"\n",l+="El per\xedmetro es: "+(2*r+c);break;case 3:l+="Ingrese los 3 lados: "+r+0+o+" "+s+"\n",l+="El per\xedmetro es: "+(s+(r+o));break;default:l+="Opci\xf3n no v\xe1lida."}return l}},{key:"cinco",value:function(e,n,a,t,i){var r=e,o=n,s="1. Dia corespondiente\n2. listar dias\n";switch(r){case 1:switch(s+="ingrese un numero entre 1 y 7: "+r+"\n",o){case 1:s+="Lunes";break;case 2:s+="Martes";break;case 3:s+="Miercoles";break;case 4:s+="Jueves";break;case 5:s+="Viernes";break;case 6:s+="Sabado";break;case 7:s+="Domingo";break;default:s+="Ingrese una opci\xf3n valida"}break;case 2:s+="Lunes\nMartes\nMiercoles\nJueves\nViernes\nSabado\nDomingo";break;default:s+="Ingrese una opci\xf3n valida"}return s}},{key:"seis",value:function(e,n,a,t,i){var r=n,o="";switch(e){case 1:o+=r>=15?"Salario anual de: 88000":r<15&&r>10?"Salario anual de: 72000":r<10&&r>5?"Salario anual de: 60000":r<5&&r>0?"Salario anual de: 52000":"Ingrese una a\xf1o valido";break;case 2:o+="Si lleva m\xe1s de 15 a\xf1os en la empresa 12%\nSi lleva menos de 15 pero m\xe1s de 10 a\xf1os 8%\nSi lleva menos de 10 pero m\xe1s de 5 a\xf1os 5%\nSi lleva menos de 5 a\xf1os 3%\n";break;default:o+="Opci\xf3n no v\xe1lida."}return o}}]),e}(),D=function(){function e(){Object(l.a)(this,e)}return Object(d.a)(e,[{key:"uno",value:function(){return["El vector es: \n1  2  3 \n\nEl vector modificado es: \n1  5  3"]}},{key:"dos",value:function(){return"Ingrese el tama\xf1o del vector: \n 4\n\nIngrese un valor entero para la pisici\xf3n [1]: 3\nIngrese un valor entero para la pisici\xf3n [2]: 5\nIngrese un valor entero para la pisici\xf3n [3]: 1\nIngrese un valor entero para la pisici\xf3n [4]: 9\n\nEl vector es: \n3  5  1  9"}},{key:"tres",value:function(){return"El promedio de los valores es: 8"}},{key:"cuatro",value:function(){return"El producto escalar es: 56"}},{key:"cinco",value:function(){return"El maximo de todos los numeros se encuentra en la posicion [7] es: 10.2"}},{key:"seis",value:function(){return"Cantidad de Positivos: 3 de Negativos: 7"}}]),e}(),T=a(427),w=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){return Object(l.a)(this,a),n.apply(this,arguments)}return Object(d.a)(a,[{key:"uno",value:function(e,n,a,t,i){return"El perimetro es: "+6.283184*e}},{key:"dos",value:function(e,n,a,t,i){var r=e;return"El volumen del cubo es: "+Math.pow(r,3)}},{key:"tres",value:function(e,n,a,t,i){var r=e,o=n;return"la hipotenusa es: "+Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}},{key:"cuatro",value:function(e,n,a,t,i){var r=e;return r/2/.6+" Kilos de azucar\n"+r/3/.72+"Kilos de cafe\nQuedan "+(r/=6)+"euros"}},{key:"cinco",value:function(e,n,a,t,i){var r=n;return"La suma en pulgadas es: "+(12*e+r/.0254)+"\nLa suma en yardas es: "+(3*e+1.09361*r)+"\nLa suma en metros es: "+(.3045*e+(r=.3045*e+r))+"\nLa suma en millas es: "+(19e-5*e+62e-5*r)}},{key:"seis",value:function(e,n,a,t,i){var r,o;return"La cantidad en metros cubicos es: "+(r=e/1e3)+"\n\nLa cantidad en yardas cubicos es: "+(o=r/.0283)+"\n\nLa cantidad que se usa para riego en \nmetros cubicos es: "+.25*r+"\n\nLa cantidad que se usa para el consumo \ndomestico en metros cubicos es: "+.75*r+"\n\nLa cantidad que se usa para riego en \npies cubicos es: "+.25*o+"\n\nLa cantidad que se usa para el consumo \ndomestico en pies cubicos es: "+.75*o}},{key:"render",value:function(){return i.a.createElement("div",null,i.a.createElement(T.a,{showPopup:this.props.ver,position:"right center"},i.a.createElement("div",null,"Popup content here !!")))}}]),a}(t.Component),F=function(){function e(){Object(l.a)(this,e)}return Object(d.a)(e,[{key:"uno",value:function(){return 13}},{key:"dos",value:function(){return"*TELEFONO*\n\nDescuelgue el telefono. \nIngrese el telefono a marcar: \n3288040\nProcesando\n\nEsta marcando al numero: 3288040\n\tConversacion en curso.\nPulse una tecla si desea finalizar la llamada. \n\nPpause\nLLAMADA FINALIZADA"}},{key:"tres",value:function(){}},{key:"cuatro",value:function(){return"AREA DE UN TRIANGULO:\nBASE: \n5\nALTURA: \n9"+"\n\nEl area del triangulo es: "(45)/2}},{key:"cinco",value:function(){return"VOLUMEN DE UN CILINDRO:\nRADIO: \n3\nALTURA: \n5\n\nEl volumen del cilindro con radio 3 y altura 5 es: 141.372"}},{key:"seis",value:function(){return"DIAGONAL DE UN RECTANGULO:\nLADO 1: \n3\nLADO 2: \n5\n\nLa diagonal para el rectangulo de lados 3x5 es: "+Math.sqrt(34)}}]),e}(),U=function(){function e(){Object(l.a)(this,e)}return Object(d.a)(e,[{key:"uno",value:function(){return"Ingrese una cadena:  \nHola Samuel\nLa cadena en mayusculas es: HOLA SAMUEL"}},{key:"dos",value:function(){return"Ingrese una cadena de caracteres: \nel dia de ayer llovio\nCADENA INVERTIDA: \noivoll reya aid le"}},{key:"tres",value:function(){return"Ingrese una cadena: \nBuenos Dias Silvio\nCantidad de Mayusculas: 3\nCantidad de Minusculas: 13"}},{key:"cuatro",value:function(){return"Ingrese una cadena maximo de 20 caracteres: \nla suma de 2+2 es 4\nLa Cadena ingresada tiene: \n3 valores numericos.\n5 espacios en blanco. "}},{key:"cinco",value:function(){return"Escribe una cadena: \nAll\xed ves Sevilla\nEs un palindromo.\n"}},{key:"seis",value:function(){return"Ingrese el nombre de la persona: ramiroApodo de %s: piojito\nLa cadena concatenada es: ramiropiojito"}}]),e}(),V=P()(a.e(0).then(a.t.bind(null,707,7)),{ssr:!1}),H=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(e){var t;return Object(l.a)(this,a),(t=n.call(this,e)).handleEditorDidMount=function(e){},t.handleChange=function(e,n){},t.onSubmit=function(e){var n;switch(t.props.module){case"expresiones":n=new w;break;case"secuencia":n=new F;break;case"condicionales":n=new M;break;case"ciclos":n=new z;break;case"cadenas":n=new U;break;case"vectores":case"matrices":case"estructuras":case"funciones":case"composicion":case"procedimientos":case"Modo gr\xe1fico":n=new D}switch(t.props.ejemplo){case 1:document.getElementById("output").value=n.uno(t.one,t.two,t.thrid,t.four,t.five);break;case 2:document.getElementById("output").value=n.dos(t.one,t.two,t.thrid,t.four,t.five);break;case 3:document.getElementById("output").value=n.tres(t.one,t.two,t.thrid,t.four,t.five);break;case 4:document.getElementById("output").value=n.cuatro(t.one,t.two,t.thrid,t.four,t.five);break;case 5:document.getElementById("output").value=n.cinco(t.one,t.two,t.thrid,t.four,t.five);break;case 6:document.getElementById("output").value=n.seis(t.one,t.two,t.thrid,t.four,t.five)}},t.one=0,t.two=0,t.thrid=0,t.four=0,t.five=0,t.i=0,t}return Object(d.a)(a,[{key:"ejemplos",value:function(e,n){var a;switch(e){case 1:a=x[0][n][1].codigo;break;case 2:a=x[0][n][2].codigo;break;case 3:a=x[0][n][3].codigo;break;case 4:a=x[0][n][4].codigo;break;case 5:a=x[0][n][5].codigo;break;case 6:a=x[0][n][6].codigo}return a}},{key:"onKeyDownHandler",value:function(){var e=0;if(13==window.event.keyCode){e=document.getElementById("in1").value,document.getElementById("in1").value="";var n=parseInt(e);switch(this.i++,this.props.module){case"expresiones":switch(this.props.ejemplo){case 1:case 2:switch(this.i){case 1:this.one=n}break;case 3:switch(this.i){case 1:this.one=n;break;case 2:this.two=n}break;case 4:switch(this.i){case 1:this.one=n}break;case 5:switch(this.i){case 1:this.one=n;break;case 2:this.two=n}break;case 6:switch(this.i){case 1:this.one=n}}break;case"secuencia":case"condicionales":switch(this.props.ejemplo){case 1:switch(this.i){case 1:this.one=n}break;case 2:case 3:case 4:case 5:case 6:switch(this.i){case 1:this.one=n;break;case 2:this.two=n;break;case 3:this.thrid=n;break;case 4:this.four=n;break;case 5:this.five=n}}}}}},{key:"render",value:function(){var e=this;this.i=this.props.cero;var n=this.ejemplos(this.props.ejemplo,this.props.module);return i.a.createElement("div",{className:"compiler"},i.a.createElement("div",{className:"compiler__editor monaco-theme"},i.a.createElement(V,{height:"400px",language:"scheme",value:n,options:{selectOnLineNumbers:!0,readOnly:!0,minimap:{enabled:!1}},onChange:this.handleChange,editorDidMount:this.handleEditorDidMount})),i.a.createElement("textarea",{id:"output",className:"compiler__output",placeholder:"output",disabled:!0}),i.a.createElement("input",{className:"compiler__input",type:"text",id:"in1",onKeyDown:function(){return e.onKeyDownHandler()}}),i.a.createElement("button",{className:"compiler__button",onClick:this.onSubmit},"Ejecutar"))}}]),a}(t.Component),B=function(){function e(){Object(l.a)(this,e)}return Object(d.a)(e,[{key:"uno",value:function(){return""}},{key:"dos",value:function(){return""}},{key:"tres",value:function(){return""}},{key:"cuatro",value:function(){return""}},{key:"cinco",value:function(){return""}},{key:"seis",value:function(){return""}}]),e}(),K=P()(a.e(0).then(a.t.bind(null,707,7)),{ssr:!1}),X=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(e){var t;return Object(l.a)(this,a),(t=n.call(this,e)).handleEditorDidMount=function(e){},t.handleChange=function(e,n){},t.onSubmit=function(e){var n;switch(t.props.module){case"expresiones":n=new w;break;case"secuencia":n=new F;break;case"condicionales":n=new M;break;case"ciclos":case"cadenas":n=new z;break;case"vectores":case"matrices":case"estructuras":case"funciones":case"composicion":case"procedimientos":case"Modo gr\xe1fico":n=new D;break;default:n=new B}switch(t.props.ejemplo){case 1:document.getElementById("output2").value=n.uno(t.one,t.two,t.thrid,t.four,t.five);break;case 2:document.getElementById("output2").value=n.dos(t.one,t.two,t.thrid,t.four,t.five);break;case 3:document.getElementById("output2").value=n.tres(t.one,t.two,t.thrid,t.four,t.five);break;case 4:document.getElementById("output2").value=n.cuatro(t.one,t.two,t.thrid,t.four,t.five);break;case 5:document.getElementById("output2").value=n.cinco(t.one,t.two,t.thrid,t.four,t.five);break;case 6:document.getElementById("output2").value=n.seis(t.one,t.two,t.thrid,t.four,t.five)}},t.one=0,t.two=0,t.i=0,t}return Object(d.a)(a,[{key:"ejemplos",value:function(e,n){var a;switch(e){case 1:a=x[0][n]["1b"].codigo;break;case 2:a=x[0][n]["2b"].codigo;break;case 3:a=x[0][n]["3b"].codigo;break;case 4:a=x[0][n]["4b"].codigo;break;case 5:a=x[0][n]["5b"].codigo;break;case 6:a=x[0][n]["6b"].codigo;break;default:a=""}return a}},{key:"onKeyDownHandler",value:function(){var e;if(13==window.event.keyCode){e=document.getElementById("in2").value,document.getElementById("in2").value="";var n=parseInt(e);switch(this.i++,this.props.module){case"expresiones":switch(this.props.ejemplo){case 1:case 2:switch(this.i){case 1:this.one=n}break;case 3:switch(this.i){case 1:this.one=n;break;case 2:this.two=n}break;case 4:switch(this.i){case 1:this.one=n}break;case 5:switch(this.i){case 1:this.one=n;break;case 2:this.two=n}break;case 6:switch(this.i){case 1:this.one=n}}break;case"secuencia":break;case"condicionales":switch(this.props.ejemplo){case 1:switch(this.i){case 1:this.one=n}break;case 2:case 3:case 4:case 5:case 6:switch(this.i){case 1:this.one=n;break;case 2:this.two=n;break;case 3:this.thrid=n;break;case 4:this.four=n;break;case 5:this.five=n}}}}}},{key:"render",value:function(){var e=this;this.i=this.props.cero;var n=this.ejemplos(this.props.ejemplo,this.props.module);return i.a.createElement("div",{className:"compiler compiler--left"},i.a.createElement("div",{className:"compiler__editor monaco-theme"},i.a.createElement(K,{height:"400px",language:"c",value:n,options:{selectOnLineNumbers:!0,readOnly:!0,minimap:{enabled:!1}},onChange:this.handleChange,editorDidMount:this.handleEditorDidMount})),i.a.createElement("textarea",{id:"output2",className:"compiler__output",placeholder:"output",disabled:!0}),i.a.createElement("input",{className:"compiler__input",type:"text",id:"in2",onKeyDown:function(){return e.onKeyDownHandler()}}),i.a.createElement("button",{className:"compiler__button",onClick:this.onSubmit},"Ejecutar"))}}]),a}(t.Component);var G=function(e){var n=Object(t.useState)(0),a=Object(N.a)(n,2),r=a[0],o=a[1];return r=r!=e.label?0:r,i.a.createElement("div",{className:"ejemplo"},i.a.createElement("div",{className:"ejemplo__editor"},i.a.createElement(H,{ejemplo:e.label,module:e.modules,cero:0})),i.a.createElement("div",null,i.a.createElement("button",{className:"compiler__button",onClick:function(){return o(r=e.label)}},"Ir a C"),i.a.createElement("div",{className:"spacing"}),i.a.createElement("a",{href:"/comparison/:"+e.modules+e.label,className:"compiler__button"},"Comparar")),i.a.createElement("div",{className:"ejemplo__editor"},i.a.createElement(X,{ejemplo:r,module:e.modules,cero:0})))};function J(e){var n=e.dat,a=Object(t.useState)(0),r=Object(N.a)(a,2),o=(r[0],r[1],Object(t.useState)(1)),s=Object(N.a)(o,2),c=s[0],l=s[1];console.log(l);var d=n.replace(":",""),u=function(e){var n;switch(e){case"Expresiones":n="expresiones";break;case"Estructuras de Secuencia":n="secuencia";break;case"Estructuras de Selecci\xf3n":n="condicionales";break;case"Estructuras de iteraci\xf3n":n="ciclos";break;case"Cadenas y Caracteres":n="cadenas";break;case"Vectores":n="vectores";break;case"Matrices":n="matrices";break;case"Estructuras de Datos":n="estructuras";break;case"Funciones":n="funciones";break;case"Composici\xf3n de Funciones":n="composicion";break;case"Procedimientos":case"Modo gr\xe1fico":n="procedimientos"}return n}(d=d.replace("#",""));return i.a.createElement("div",{className:"Container"},i.a.createElement(S,{mod:u}),i.a.createElement("div",{className:"Module"},i.a.createElement("h1",{className:"Module__title"},d),i.a.createElement(A,{setCurrentActive:l,currentActive:c,direction:"row",index:6,type:"Ejemplo"}),i.a.createElement(G,{label:c,modules:u,count:0})))}var W=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){return Object(l.a)(this,a),n.apply(this,arguments)}return Object(d.a)(a,[{key:"render",value:function(){return i.a.createElement("div",null,i.a.createElement(J,{dat:this.props.match.params.modules}))}}]),a}(t.Component),Q=(a(614),a(366)),Y=(a(615),P()(a.e(0).then(a.t.bind(null,707,7)),{ssr:!1}));function Z(e){return i.a.createElement("div",{className:"outline"},i.a.createElement(Y,{width:"400",height:"400",language:"scheme",value:e.code,options:{selectOnLineNumbers:!0,readOnly:!0,minimap:{enabled:!1}}}))}function $(e){return i.a.createElement("div",{className:"outline"},i.a.createElement(Y,{width:"400",height:"400",language:"c",value:e.code,options:{selectOnLineNumbers:!0,readOnly:!0,minimap:{enabled:!1}}}))}var ee=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){var e;Object(l.a)(this,a);for(var t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];return(e=n.call.apply(n,[this].concat(i))).getData=function(n){var a=e.props.module,t=e.getExercice(a);a=a.replace(t,""),document.getElementById("steps").value=Q[0][a][t][1],document.getElementById("exp1").value=Q[0][a][t][2],document.getElementById("exp2").value=Q[0][a][t][3]},e}return Object(d.a)(a,[{key:"getExercice",value:function(e){return e.charAt(e.length-1)}},{key:"render",value:function(){var e=new H,n=new X,a=this.props.module,t=this.getExercice(a);return a=a.replace(t,""),i.a.createElement("div",{className:"Compare"},i.a.createElement(Z,{code:e.ejemplos(parseInt(t),a)}),i.a.createElement("div",{className:"Compare__text-area"},i.a.createElement("textarea",{id:"steps",className:"texts",disabled:!0}),i.a.createElement("div",null,i.a.createElement("textarea",{id:"exp1",className:"texts2",disabled:!0}),i.a.createElement("textarea",{id:"exp2",className:"texts2",disabled:!0})),i.a.createElement("a",{href:"#",className:"compiler__button",onClick:this.getData},"Comparar")),i.a.createElement($,{code:n.ejemplos(parseInt(t),a)}))}}]),a}(t.Component),ne=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){var e;Object(l.a)(this,a);for(var t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];return(e=n.call.apply(n,[this].concat(i))).onSubmit=function(e){window.history.back(),window.history.back()},e}return Object(d.a)(a,[{key:"getNum",value:function(e){return e.charAt(e.length-1)}},{key:"render",value:function(){var e=this.props.match.params.modules.replace(":","");e=e.replace("#","");var n=this.getNum(e);return i.a.createElement("div",{className:"Container"},i.a.createElement(S,{mod:e.replace(n,"")}),i.a.createElement("h1",{className:"Module__title"},"Racket vs C"),i.a.createElement(ee,{module:e}),i.a.createElement("button",{className:"compiler__button",onClick:this.onSubmit},"Regresar"))}}]),a}(t.Component),ae=(a(616),a(367)),te=(a(417),P()(a.e(0).then(a.t.bind(null,707,7)),{ssr:!1})),ie=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(e){var t;return Object(l.a)(this,a),(t=n.call(this,e)).handleEditorDidMount=function(e){},t.handleChange=function(e,n){},t.onSubmit=function(e){},t}return Object(d.a)(a,[{key:"render",value:function(){return i.a.createElement("div",{className:"compiler compiler--left"},i.a.createElement("div",{className:"compiler__editor monaco-theme"},i.a.createElement(te,{height:"400px",language:"c",value:"//type code here",theme:"twilight",options:{selectOnLineNumbers:!0,readOnly:!1,minimap:{enabled:!1}},onChange:this.handleChange,editorDidMount:this.handleEditorDidMount})),i.a.createElement("textarea",{id:"output2",className:"compiler__output",placeholder:"output",disabled:!0}),i.a.createElement("div",{className:"rows"},i.a.createElement("button",{className:"compiler__button",href:this.props.url},"Ir a Racket"),i.a.createElement("button",{className:"compiler__button",onClick:this.onSubmit},"Ejecutar")))}}]),a}(t.Component),re=P()(a.e(0).then(a.t.bind(null,707,7)),{ssr:!1}),oe=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(e){var t;return Object(l.a)(this,a),(t=n.call(this,e)).handleEditorDidMount=function(e){},t.handleChange=function(e,n){},t.onSubmit=function(e){},t}return Object(d.a)(a,[{key:"render",value:function(){return i.a.createElement("div",{className:"compiler compiler--left"},i.a.createElement("div",{className:"compiler__editor monaco-theme"},i.a.createElement(re,{height:"400px",language:"scheme",value:";type code here",theme:"twilight",options:{selectOnLineNumbers:!0,readOnly:!1,minimap:{enabled:!1}},onChange:this.handleChange,editorDidMount:this.handleEditorDidMount})),i.a.createElement("textarea",{id:"output2",className:"compiler__output",placeholder:"output",disabled:!0}),i.a.createElement("div",null,i.a.createElement("a",{className:"compiler__button",href:this.props.url},"Ir a C"),i.a.createElement("button",{className:"compiler__button",onClick:this.onSubmit},"Ejecutar")))}}]),a}(t.Component);function se(e){var n=e.editors,a=e.urls;if("/modpractice1/:modules"==n){var t=a.replace("1","2");return i.a.createElement(ie,{url:t})}t=a.replace("2","1");return i.a.createElement(oe,{url:t})}function ce(e){var n=e.dat,a=e.editor,r=e.url,o=Object(t.useState)(0),s=Object(N.a)(o,2),c=(s[0],s[1],Object(t.useState)(1)),l=Object(N.a)(c,2),d=l[0],u=l[1],m=n.replace(":","");return i.a.createElement("div",{className:"Container"},i.a.createElement(S,{mod:m}),i.a.createElement("div",{className:"Practice"},i.a.createElement("h1",{className:"Practice__title"},"Herramienta de pr\xe1ctica"),i.a.createElement(A,{setCurrentActive:u,currentActive:d,direction:"row",index:3,type:"Ejercicio"}),i.a.createElement("div",{className:"Practice__content"},i.a.createElement("div",{className:"Practice__text"},function(e,n){var a;switch(e){case 1:a=ae[0][n][1];break;case 2:a=ae[0][n][2];break;case 3:a=ae[0][n][3]}return a}(d,m)),i.a.createElement("div",{className:"Practice__editor"},i.a.createElement(se,{editors:a,urls:r})))))}var le=function(e){Object(u.a)(a,e);var n=Object(m.a)(a);function a(){return Object(l.a)(this,a),n.apply(this,arguments)}return Object(d.a)(a,[{key:"render",value:function(){return console.log(),i.a.createElement("div",null,i.a.createElement(ce,{dat:this.props.match.params.modules,editor:this.props.match.path,url:this.props.match.url}))}}]),a}(t.Component);var de=function(){return i.a.createElement(s.a,null,i.a.createElement(c.c,null,i.a.createElement(c.a,{exact:!0,path:"/",component:L}),i.a.createElement(c.a,{path:"/menu",component:h}),i.a.createElement(c.a,{path:"/modpractice1/:modules",component:le}),i.a.createElement(c.a,{path:"/modpractice2/:modules",component:le}),i.a.createElement(c.a,{path:"/module/:modules",component:W}),i.a.createElement(c.a,{path:"/comparison/:modules",component:ne}),i.a.createElement(c.a,{component:y})))};var ue=function(){return i.a.createElement(de,null)};a(618),a(619);o.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(ue,null)),document.getElementById("root"))}},[[434,3,4]]]);
//# sourceMappingURL=main.fb2f3fa9.chunk.js.map